
pwm_2motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007850  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007960  08007960  00017960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d6c  08007d6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007d6c  08007d6c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d6c  08007d6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  08007f50  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007f50  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f310  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  0002f515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000315a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00032490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b1f  00000000  00000000  000332b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fda6  00000000  00000000  0004bdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da66  00000000  00000000  0005bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e95e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  000e9634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007948 	.word	0x08007948

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007948 	.word	0x08007948

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
	{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,100);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	2201      	movs	r2, #1
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <__io_putchar+0x20>)
 8000b38:	f003 fb16 	bl	8004168 <HAL_UART_Transmit>
		return ch;
 8000b3c:	687b      	ldr	r3, [r7, #4]
	}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000328 	.word	0x20000328

08000b4c <HAL_UART_RxCpltCallback>:
void cnterClockwise(motor motor);

/*-----calback function when recieve data via uart-----------
 * Using recieve_IT()
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint8_t i;
				if(huart->Instance == USART1) //uart1
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a7e      	ldr	r2, [pc, #504]	; (8000d54 <HAL_UART_RxCpltCallback+0x208>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	f040 80f6 	bne.w	8000d4c <HAL_UART_RxCpltCallback+0x200>
				{
						if(rx_index==0) {for (i=0;i<20;i++) rx_buffer[i] = 0;}
 8000b60:	4b7d      	ldr	r3, [pc, #500]	; (8000d58 <HAL_UART_RxCpltCallback+0x20c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10c      	bne.n	8000b82 <HAL_UART_RxCpltCallback+0x36>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e006      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x30>
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	4a7a      	ldr	r2, [pc, #488]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	54d1      	strb	r1, [r2, r3]
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	2b13      	cmp	r3, #19
 8000b80:	d9f5      	bls.n	8000b6e <HAL_UART_RxCpltCallback+0x22>

				switch(rx_data) {
 8000b82:	4b77      	ldr	r3, [pc, #476]	; (8000d60 <HAL_UART_RxCpltCallback+0x214>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3b2d      	subs	r3, #45	; 0x2d
 8000b88:	2b49      	cmp	r3, #73	; 0x49
 8000b8a:	f200 80d9 	bhi.w	8000d40 <HAL_UART_RxCpltCallback+0x1f4>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <HAL_UART_RxCpltCallback+0x48>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000d1d 	.word	0x08000d1d
 8000b98:	08000d1d 	.word	0x08000d1d
 8000b9c:	08000d41 	.word	0x08000d41
 8000ba0:	08000d1d 	.word	0x08000d1d
 8000ba4:	08000d1d 	.word	0x08000d1d
 8000ba8:	08000d1d 	.word	0x08000d1d
 8000bac:	08000d1d 	.word	0x08000d1d
 8000bb0:	08000d1d 	.word	0x08000d1d
 8000bb4:	08000d1d 	.word	0x08000d1d
 8000bb8:	08000d1d 	.word	0x08000d1d
 8000bbc:	08000d1d 	.word	0x08000d1d
 8000bc0:	08000d1d 	.word	0x08000d1d
 8000bc4:	08000d1d 	.word	0x08000d1d
 8000bc8:	08000d41 	.word	0x08000d41
 8000bcc:	08000d41 	.word	0x08000d41
 8000bd0:	08000d41 	.word	0x08000d41
 8000bd4:	08000d41 	.word	0x08000d41
 8000bd8:	08000d41 	.word	0x08000d41
 8000bdc:	08000d41 	.word	0x08000d41
 8000be0:	08000d41 	.word	0x08000d41
 8000be4:	08000d41 	.word	0x08000d41
 8000be8:	08000d41 	.word	0x08000d41
 8000bec:	08000d41 	.word	0x08000d41
 8000bf0:	08000d41 	.word	0x08000d41
 8000bf4:	08000d41 	.word	0x08000d41
 8000bf8:	08000d41 	.word	0x08000d41
 8000bfc:	08000d41 	.word	0x08000d41
 8000c00:	08000d41 	.word	0x08000d41
 8000c04:	08000d41 	.word	0x08000d41
 8000c08:	08000d41 	.word	0x08000d41
 8000c0c:	08000d41 	.word	0x08000d41
 8000c10:	08000d41 	.word	0x08000d41
 8000c14:	08000d41 	.word	0x08000d41
 8000c18:	08000d41 	.word	0x08000d41
 8000c1c:	08000d41 	.word	0x08000d41
 8000c20:	08000d41 	.word	0x08000d41
 8000c24:	08000d41 	.word	0x08000d41
 8000c28:	08000d41 	.word	0x08000d41
 8000c2c:	08000d41 	.word	0x08000d41
 8000c30:	08000d41 	.word	0x08000d41
 8000c34:	08000d41 	.word	0x08000d41
 8000c38:	08000d41 	.word	0x08000d41
 8000c3c:	08000d41 	.word	0x08000d41
 8000c40:	08000d41 	.word	0x08000d41
 8000c44:	08000d41 	.word	0x08000d41
 8000c48:	08000d41 	.word	0x08000d41
 8000c4c:	08000d41 	.word	0x08000d41
 8000c50:	08000d41 	.word	0x08000d41
 8000c54:	08000d41 	.word	0x08000d41
 8000c58:	08000d41 	.word	0x08000d41
 8000c5c:	08000d41 	.word	0x08000d41
 8000c60:	08000d41 	.word	0x08000d41
 8000c64:	08000d41 	.word	0x08000d41
 8000c68:	08000d41 	.word	0x08000d41
 8000c6c:	08000d41 	.word	0x08000d41
 8000c70:	08000d41 	.word	0x08000d41
 8000c74:	08000cbd 	.word	0x08000cbd
 8000c78:	08000d41 	.word	0x08000d41
 8000c7c:	08000d41 	.word	0x08000d41
 8000c80:	08000d41 	.word	0x08000d41
 8000c84:	08000d41 	.word	0x08000d41
 8000c88:	08000d41 	.word	0x08000d41
 8000c8c:	08000ccd 	.word	0x08000ccd
 8000c90:	08000cd5 	.word	0x08000cd5
 8000c94:	08000d41 	.word	0x08000d41
 8000c98:	08000d41 	.word	0x08000d41
 8000c9c:	08000d41 	.word	0x08000d41
 8000ca0:	08000d41 	.word	0x08000d41
 8000ca4:	08000d41 	.word	0x08000d41
 8000ca8:	08000cc5 	.word	0x08000cc5
 8000cac:	08000cdd 	.word	0x08000cdd
 8000cb0:	08000d41 	.word	0x08000d41
 8000cb4:	08000d41 	.word	0x08000d41
 8000cb8:	08000cfd 	.word	0x08000cfd
		            /* dung dong co */
		            case 'e':
		                run =false;
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_UART_RxCpltCallback+0x218>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		                break;
 8000cc2:	e03e      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>

		            /* dong co chay */
		            case 'r':
		                run = true;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_UART_RxCpltCallback+0x218>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
		                break;
 8000cca:	e03a      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>
		            case 'k':
						flag = true;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <HAL_UART_RxCpltCallback+0x21c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
						break;
 8000cd2:	e036      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>
		            case 'l':
						flag = false;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_UART_RxCpltCallback+0x21c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
						break;
 8000cda:	e032      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>
		            case 'b':
		//								reset();
										break;
		            case 's':
		                DesiredPos = atoi((const char *)rx_buffer);
 8000cdc:	481f      	ldr	r0, [pc, #124]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000cde:	f004 f86b 	bl	8004db8 <atoi>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HAL_UART_RxCpltCallback+0x220>)
 8000ce8:	801a      	strh	r2, [r3, #0]
		                memset(&rx_buffer, 0, sizeof(rx_buffer));
 8000cea:	2214      	movs	r2, #20
 8000cec:	2100      	movs	r1, #0
 8000cee:	481b      	ldr	r0, [pc, #108]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000cf0:	f004 f890 	bl	8004e14 <memset>
		                rx_index = 0;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_RxCpltCallback+0x20c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
		                break;
 8000cfa:	e022      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>
		            case 'v':
		                DesiredSpeed = atoi((const char *)rx_buffer);
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000cfe:	f004 f85b 	bl	8004db8 <atoi>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_UART_RxCpltCallback+0x224>)
 8000d08:	801a      	strh	r2, [r3, #0]
		                //DesiredVel = DesiredSpeed * (pi/30);
		                memset(&rx_buffer, 0, sizeof(rx_buffer));
 8000d0a:	2214      	movs	r2, #20
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000d10:	f004 f880 	bl	8004e14 <memset>
		                rx_index = 0;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_UART_RxCpltCallback+0x20c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
		                break;
 8000d1a:	e012      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>
		            case '7':
		            case '8':
		            case '9':
		            case '.':
		            case '-':
		                rx_buffer[rx_index++] |= rx_data;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_UART_RxCpltCallback+0x20c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	b2d1      	uxtb	r1, r2
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_UART_RxCpltCallback+0x20c>)
 8000d26:	7011      	strb	r1, [r2, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000d2c:	5c51      	ldrb	r1, [r2, r1]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <HAL_UART_RxCpltCallback+0x214>)
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	ea41 0302 	orr.w	r3, r1, r2
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_UART_RxCpltCallback+0x210>)
 8000d3c:	541a      	strb	r2, [r3, r0]
		                break;
 8000d3e:	e000      	b.n	8000d42 <HAL_UART_RxCpltCallback+0x1f6>
		            default:
		                break;
 8000d40:	bf00      	nop
		        }
						HAL_UART_Receive_IT(&huart1,&rx_data,1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	4906      	ldr	r1, [pc, #24]	; (8000d60 <HAL_UART_RxCpltCallback+0x214>)
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_UART_RxCpltCallback+0x228>)
 8000d48:	f003 fa91 	bl	800426e <HAL_UART_Receive_IT>
				}
	}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013800 	.word	0x40013800
 8000d58:	20000385 	.word	0x20000385
 8000d5c:	20000370 	.word	0x20000370
 8000d60:	20000384 	.word	0x20000384
 8000d64:	20000398 	.word	0x20000398
 8000d68:	20000399 	.word	0x20000399
 8000d6c:	20000388 	.word	0x20000388
 8000d70:	2000038a 	.word	0x2000038a
 8000d74:	20000328 	.word	0x20000328

08000d78 <HAL_GPIO_EXTI_Callback>:


	/*--------------xu li ngat ngoai---------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
   * EXTI in rising and falling mode --- 4 counts for 1 pulse
   * Motor 1: channel A -> EXTI 4 ; channel B -> EXTI 5
   * Motor 2: channel A -> EXTI 6 ; channel B -> EXTI 7*/
  //// encoder motor 1 channel A

  if(GPIO_Pin == M1_A_Pin){
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	2b10      	cmp	r3, #16
 8000d86:	f040 80b4 	bne.w	8000ef2 <HAL_GPIO_EXTI_Callback+0x17a>
	  uint8_t state =0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
	  state  = HAL_GPIO_ReadPin(GPIOA, M1_A_Pin);
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000d92:	f001 fd47 	bl	8002824 <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M1_B_Pin);
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	b25c      	sxtb	r4, r3
 8000da0:	2120      	movs	r1, #32
 8000da2:	4894      	ldr	r0, [pc, #592]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000da4:	f001 fd3e 	bl	8002824 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	4323      	orrs	r3, r4
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	73fb      	strb	r3, [r7, #15]
	  state &= 0x03;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	73fb      	strb	r3, [r7, #15]
	  switch (state){
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d86b      	bhi.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000dd9 	.word	0x08000dd9
 8000dcc:	08000e09 	.word	0x08000e09
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000e69 	.word	0x08000e69
	  case 0:
		  if(prevState_1 == 1)
 8000dd8:	4b87      	ldr	r3, [pc, #540]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d109      	bne.n	8000df4 <HAL_GPIO_EXTI_Callback+0x7c>
			  cnt_pos_1 ++;
 8000de0:	4b86      	ldr	r3, [pc, #536]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	4b83      	ldr	r3, [pc, #524]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000df0:	801a      	strh	r2, [r3, #0]
		  else
			  cnt_pos_1 --;
		  break;
 8000df2:	e051      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
			  cnt_pos_1 --;
 8000df4:	4b81      	ldr	r3, [pc, #516]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	4b7e      	ldr	r3, [pc, #504]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e04:	801a      	strh	r2, [r3, #0]
		  break;
 8000e06:	e047      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
	  case 1:
	  		  if(prevState_1 == 3)
 8000e08:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d109      	bne.n	8000e24 <HAL_GPIO_EXTI_Callback+0xac>
	  			  cnt_pos_1 ++;
 8000e10:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b77      	ldr	r3, [pc, #476]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e20:	801a      	strh	r2, [r3, #0]
	  		  else
	  			  cnt_pos_1 --;
	  		break;
 8000e22:	e039      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
	  			  cnt_pos_1 --;
 8000e24:	4b75      	ldr	r3, [pc, #468]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e34:	801a      	strh	r2, [r3, #0]
	  		break;
 8000e36:	e02f      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
	  case 2:
	  		  if(prevState_1 == 0)
 8000e38:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d109      	bne.n	8000e54 <HAL_GPIO_EXTI_Callback+0xdc>
	  			  cnt_pos_1 ++;
 8000e40:	4b6e      	ldr	r3, [pc, #440]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e50:	801a      	strh	r2, [r3, #0]
	  		  else
	  			  cnt_pos_1 --;
	  		break;
 8000e52:	e021      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
	  			  cnt_pos_1 --;
 8000e54:	4b69      	ldr	r3, [pc, #420]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b66      	ldr	r3, [pc, #408]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e64:	801a      	strh	r2, [r3, #0]
	  		break;
 8000e66:	e017      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x120>
	  case 3:
	  		  if(prevState_1 == 2)
 8000e68:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d109      	bne.n	8000e84 <HAL_GPIO_EXTI_Callback+0x10c>
	  			  cnt_pos_1 ++;
 8000e70:	4b62      	ldr	r3, [pc, #392]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	4b5f      	ldr	r3, [pc, #380]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e80:	801a      	strh	r2, [r3, #0]
	  		  else
	  			  cnt_pos_1 --;
	  		break;
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_EXTI_Callback+0x11e>
	  			  cnt_pos_1 --;
 8000e84:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000e94:	801a      	strh	r2, [r3, #0]
	  		break;
 8000e96:	bf00      	nop
	  }
	  cnt_vel_1 ++;
 8000e98:	4b59      	ldr	r3, [pc, #356]	; (8001000 <HAL_GPIO_EXTI_Callback+0x288>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_GPIO_EXTI_Callback+0x288>)
 8000ea2:	801a      	strh	r2, [r3, #0]
	  prevState_1 = state;
 8000ea4:	4a54      	ldr	r2, [pc, #336]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	7013      	strb	r3, [r2, #0]
	  if(cnt_pos_1 >1495){
 8000eaa:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb0:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 8000eb4:	db0b      	blt.n	8000ece <HAL_GPIO_EXTI_Callback+0x156>
		  round_1 ++;
 8000eb6:	4b53      	ldr	r3, [pc, #332]	; (8001004 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		  cnt_pos_1 =0;
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	801a      	strh	r2, [r3, #0]
	  }
	  if(cnt_pos_1 < -1495){
 8000ece:	4b4b      	ldr	r3, [pc, #300]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 8000ed8:	dc0b      	bgt.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x17a>
		  round_1 --;
 8000eda:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b46      	ldr	r3, [pc, #280]	; (8001004 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000eea:	801a      	strh	r2, [r3, #0]
		  cnt_pos_1 =0;
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	801a      	strh	r2, [r3, #0]
	  }
  }

  //// encoder motor 1 channel B

  if(GPIO_Pin == M1_B_Pin){
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	2b20      	cmp	r3, #32
 8000ef6:	f040 80be 	bne.w	8001076 <HAL_GPIO_EXTI_Callback+0x2fe>
  	  uint8_t state =0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73bb      	strb	r3, [r7, #14]
  	  state  = HAL_GPIO_ReadPin(GPIOA, M1_A_Pin);
 8000efe:	2110      	movs	r1, #16
 8000f00:	483c      	ldr	r0, [pc, #240]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000f02:	f001 fc8f 	bl	8002824 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73bb      	strb	r3, [r7, #14]
  	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M1_B_Pin);
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	b25c      	sxtb	r4, r3
 8000f10:	2120      	movs	r1, #32
 8000f12:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000f14:	f001 fc86 	bl	8002824 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	4323      	orrs	r3, r4
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	73bb      	strb	r3, [r7, #14]
  	  state &= 0x03;
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	73bb      	strb	r3, [r7, #14]
  	  switch (state){
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d875      	bhi.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
 8000f30:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f36:	bf00      	nop
 8000f38:	08000f49 	.word	0x08000f49
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000fa9 	.word	0x08000fa9
 8000f44:	08000fd9 	.word	0x08000fd9
  	  case 0:
  		  if(prevState_1 == 1)
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d109      	bne.n	8000f64 <HAL_GPIO_EXTI_Callback+0x1ec>
  			  cnt_pos_1 ++;
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f60:	801a      	strh	r2, [r3, #0]
  		  else
  			  cnt_pos_1 --;
  		  break;
 8000f62:	e05b      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
  			  cnt_pos_1 --;
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f74:	801a      	strh	r2, [r3, #0]
  		  break;
 8000f76:	e051      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
  	  case 1:
  	  		  if(prevState_1 == 3)
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d109      	bne.n	8000f94 <HAL_GPIO_EXTI_Callback+0x21c>
  	  			  cnt_pos_1 ++;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f90:	801a      	strh	r2, [r3, #0]
  	  		  else
  	  			  cnt_pos_1 --;
  	  		break;
 8000f92:	e043      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
  	  			  cnt_pos_1 --;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000fa4:	801a      	strh	r2, [r3, #0]
  	  		break;
 8000fa6:	e039      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
  	  case 2:
  	  		  if(prevState_1 == 0)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d109      	bne.n	8000fc4 <HAL_GPIO_EXTI_Callback+0x24c>
  	  			  cnt_pos_1 ++;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000fc0:	801a      	strh	r2, [r3, #0]
  	  		  else
  	  			  cnt_pos_1 --;
  	  		break;
 8000fc2:	e02b      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
  	  			  cnt_pos_1 --;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000fd4:	801a      	strh	r2, [r3, #0]
  	  		break;
 8000fd6:	e021      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x2a4>
  	  case 3:
  	  		  if(prevState_1 == 2)
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x280>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d113      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x290>
  	  			  cnt_pos_1 ++;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x284>)
 8000ff0:	801a      	strh	r2, [r3, #0]
  	  		  else
  	  			  cnt_pos_1 --;
  	  		break;
 8000ff2:	e012      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x2a2>
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	20000386 	.word	0x20000386
 8000ffc:	20000390 	.word	0x20000390
 8001000:	2000038c 	.word	0x2000038c
 8001004:	20000394 	.word	0x20000394
  	  			  cnt_pos_1 --;
 8001008:	4b9f      	ldr	r3, [pc, #636]	; (8001288 <HAL_GPIO_EXTI_Callback+0x510>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	b29b      	uxth	r3, r3
 8001010:	3b01      	subs	r3, #1
 8001012:	b29b      	uxth	r3, r3
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b9c      	ldr	r3, [pc, #624]	; (8001288 <HAL_GPIO_EXTI_Callback+0x510>)
 8001018:	801a      	strh	r2, [r3, #0]
  	  		break;
 800101a:	bf00      	nop
  	  }
  	  cnt_vel_1 ++;
 800101c:	4b9b      	ldr	r3, [pc, #620]	; (800128c <HAL_GPIO_EXTI_Callback+0x514>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b99      	ldr	r3, [pc, #612]	; (800128c <HAL_GPIO_EXTI_Callback+0x514>)
 8001026:	801a      	strh	r2, [r3, #0]
  	  prevState_1 = state;
 8001028:	4a99      	ldr	r2, [pc, #612]	; (8001290 <HAL_GPIO_EXTI_Callback+0x518>)
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	7013      	strb	r3, [r2, #0]
  	  if(cnt_pos_1 >1495){
 800102e:	4b96      	ldr	r3, [pc, #600]	; (8001288 <HAL_GPIO_EXTI_Callback+0x510>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 8001038:	db0b      	blt.n	8001052 <HAL_GPIO_EXTI_Callback+0x2da>
  		  round_1 ++;
 800103a:	4b96      	ldr	r3, [pc, #600]	; (8001294 <HAL_GPIO_EXTI_Callback+0x51c>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	b29b      	uxth	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b92      	ldr	r3, [pc, #584]	; (8001294 <HAL_GPIO_EXTI_Callback+0x51c>)
 800104a:	801a      	strh	r2, [r3, #0]
  		  cnt_pos_1 =0;
 800104c:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <HAL_GPIO_EXTI_Callback+0x510>)
 800104e:	2200      	movs	r2, #0
 8001050:	801a      	strh	r2, [r3, #0]
  	  }
  	  if(cnt_pos_1 < -1495){
 8001052:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <HAL_GPIO_EXTI_Callback+0x510>)
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 800105c:	dc0b      	bgt.n	8001076 <HAL_GPIO_EXTI_Callback+0x2fe>
  		  round_1 --;
 800105e:	4b8d      	ldr	r3, [pc, #564]	; (8001294 <HAL_GPIO_EXTI_Callback+0x51c>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	b29b      	uxth	r3, r3
 8001066:	3b01      	subs	r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b89      	ldr	r3, [pc, #548]	; (8001294 <HAL_GPIO_EXTI_Callback+0x51c>)
 800106e:	801a      	strh	r2, [r3, #0]
  		  cnt_pos_1 =0;
 8001070:	4b85      	ldr	r3, [pc, #532]	; (8001288 <HAL_GPIO_EXTI_Callback+0x510>)
 8001072:	2200      	movs	r2, #0
 8001074:	801a      	strh	r2, [r3, #0]
  	  }
    }

  //// encoder motor 2 channel A

  if(GPIO_Pin == M2_A_Pin){
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	2b40      	cmp	r3, #64	; 0x40
 800107a:	f040 80b4 	bne.w	80011e6 <HAL_GPIO_EXTI_Callback+0x46e>
  	  uint8_t state =0;
 800107e:	2300      	movs	r3, #0
 8001080:	737b      	strb	r3, [r7, #13]
  	  state  = HAL_GPIO_ReadPin(GPIOA, M2_A_Pin);
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	4884      	ldr	r0, [pc, #528]	; (8001298 <HAL_GPIO_EXTI_Callback+0x520>)
 8001086:	f001 fbcd 	bl	8002824 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	737b      	strb	r3, [r7, #13]
  	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M2_B_Pin);
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b25c      	sxtb	r4, r3
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	4880      	ldr	r0, [pc, #512]	; (8001298 <HAL_GPIO_EXTI_Callback+0x520>)
 8001098:	f001 fbc4 	bl	8002824 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4323      	orrs	r3, r4
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	737b      	strb	r3, [r7, #13]
  	  state &= 0x03;
 80010a6:	7b7b      	ldrb	r3, [r7, #13]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	737b      	strb	r3, [r7, #13]
  	  switch (state){
 80010ae:	7b7b      	ldrb	r3, [r7, #13]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d86b      	bhi.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <HAL_GPIO_EXTI_Callback+0x344>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	080010fd 	.word	0x080010fd
 80010c4:	0800112d 	.word	0x0800112d
 80010c8:	0800115d 	.word	0x0800115d
  	  case 0:
  		  if(prevState_2 == 1)
 80010cc:	4b73      	ldr	r3, [pc, #460]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d109      	bne.n	80010e8 <HAL_GPIO_EXTI_Callback+0x370>
  			  cnt_pos_2 ++;
 80010d4:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80010e4:	801a      	strh	r2, [r3, #0]
  		  else
  			  cnt_pos_2 --;
  		  break;
 80010e6:	e051      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
  			  cnt_pos_2 --;
 80010e8:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	3b01      	subs	r3, #1
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80010f8:	801a      	strh	r2, [r3, #0]
  		  break;
 80010fa:	e047      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
  	  case 1:
  	  		  if(prevState_2 == 3)
 80010fc:	4b67      	ldr	r3, [pc, #412]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d109      	bne.n	8001118 <HAL_GPIO_EXTI_Callback+0x3a0>
  	  			  cnt_pos_2 ++;
 8001104:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	b29b      	uxth	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001114:	801a      	strh	r2, [r3, #0]
  	  		  else
  	  			  cnt_pos_2 --;
  	  		break;
 8001116:	e039      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
  	  			  cnt_pos_2 --;
 8001118:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	b29b      	uxth	r3, r3
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001128:	801a      	strh	r2, [r3, #0]
  	  		break;
 800112a:	e02f      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
  	  case 2:
  	  		  if(prevState_2 == 0)
 800112c:	4b5b      	ldr	r3, [pc, #364]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x3d0>
  	  			  cnt_pos_2 ++;
 8001134:	4b5a      	ldr	r3, [pc, #360]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	b29b      	uxth	r3, r3
 800113c:	3301      	adds	r3, #1
 800113e:	b29b      	uxth	r3, r3
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001144:	801a      	strh	r2, [r3, #0]
  	  		  else
  	  			  cnt_pos_2 --;
  	  		break;
 8001146:	e021      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
  	  			  cnt_pos_2 --;
 8001148:	4b55      	ldr	r3, [pc, #340]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	b29b      	uxth	r3, r3
 8001150:	3b01      	subs	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001158:	801a      	strh	r2, [r3, #0]
  	  		break;
 800115a:	e017      	b.n	800118c <HAL_GPIO_EXTI_Callback+0x414>
  	  case 3:
  	  		  if(prevState_2 == 2)
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d109      	bne.n	8001178 <HAL_GPIO_EXTI_Callback+0x400>
  	  			  cnt_pos_2 ++;
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116a:	b29b      	uxth	r3, r3
 800116c:	3301      	adds	r3, #1
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001174:	801a      	strh	r2, [r3, #0]
  	  		  else
  	  			  cnt_pos_2 --;
  	  		break;
 8001176:	e008      	b.n	800118a <HAL_GPIO_EXTI_Callback+0x412>
  	  			  cnt_pos_2 --;
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 800117a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117e:	b29b      	uxth	r3, r3
 8001180:	3b01      	subs	r3, #1
 8001182:	b29b      	uxth	r3, r3
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001188:	801a      	strh	r2, [r3, #0]
  	  		break;
 800118a:	bf00      	nop
  	  }
  	  cnt_vel_2 ++;
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x52c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x52c>)
 8001196:	801a      	strh	r2, [r3, #0]
  	  prevState_2 = state;
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	7013      	strb	r3, [r2, #0]
  	  if(cnt_pos_2 >1495){
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 80011a8:	db0b      	blt.n	80011c2 <HAL_GPIO_EXTI_Callback+0x44a>
  		  round_2 ++;
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x530>)
 80011ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x530>)
 80011ba:	801a      	strh	r2, [r3, #0]
  		  cnt_pos_2 =0;
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
  	  }
  	  if(cnt_pos_2 < -1495){
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 80011cc:	dc0b      	bgt.n	80011e6 <HAL_GPIO_EXTI_Callback+0x46e>
  		  round_2 --;
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x530>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x530>)
 80011de:	801a      	strh	r2, [r3, #0]
  		  cnt_pos_2 =0;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
  	  }
    }

    //// encoder motor 2 channel B

    if(GPIO_Pin == M2_B_Pin){
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	2b80      	cmp	r3, #128	; 0x80
 80011ea:	f040 80c6 	bne.w	800137a <HAL_GPIO_EXTI_Callback+0x602>
    	  uint8_t state =0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	733b      	strb	r3, [r7, #12]
    	  state  = HAL_GPIO_ReadPin(GPIOA, M2_A_Pin);
 80011f2:	2140      	movs	r1, #64	; 0x40
 80011f4:	4828      	ldr	r0, [pc, #160]	; (8001298 <HAL_GPIO_EXTI_Callback+0x520>)
 80011f6:	f001 fb15 	bl	8002824 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	733b      	strb	r3, [r7, #12]
    	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M2_B_Pin);
 80011fe:	7b3b      	ldrb	r3, [r7, #12]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	b25c      	sxtb	r4, r3
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <HAL_GPIO_EXTI_Callback+0x520>)
 8001208:	f001 fb0c 	bl	8002824 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	b25b      	sxtb	r3, r3
 8001210:	4323      	orrs	r3, r4
 8001212:	b25b      	sxtb	r3, r3
 8001214:	733b      	strb	r3, [r7, #12]
    	  state &= 0x03;
 8001216:	7b3b      	ldrb	r3, [r7, #12]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	733b      	strb	r3, [r7, #12]
    	  switch (state){
 800121e:	7b3b      	ldrb	r3, [r7, #12]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d87d      	bhi.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <HAL_GPIO_EXTI_Callback+0x4b4>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	0800123d 	.word	0x0800123d
 8001230:	0800126d 	.word	0x0800126d
 8001234:	080012c1 	.word	0x080012c1
 8001238:	080012f1 	.word	0x080012f1
    	  case 0:
    		  if(prevState_2 == 1)
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d109      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x4e0>
    			  cnt_pos_2 ++;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001254:	801a      	strh	r2, [r3, #0]
    		  else
    			  cnt_pos_2 --;
    		  break;
 8001256:	e063      	b.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
    			  cnt_pos_2 --;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001268:	801a      	strh	r2, [r3, #0]
    		  break;
 800126a:	e059      	b.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
    	  case 1:
    	  		  if(prevState_2 == 3)
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_GPIO_EXTI_Callback+0x524>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d11b      	bne.n	80012ac <HAL_GPIO_EXTI_Callback+0x534>
    	  			  cnt_pos_2 ++;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	b29b      	uxth	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b29b      	uxth	r3, r3
 8001280:	b21a      	sxth	r2, r3
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x528>)
 8001284:	801a      	strh	r2, [r3, #0]
    	  		  else
    	  			  cnt_pos_2 --;
    	  		break;
 8001286:	e04b      	b.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
 8001288:	20000390 	.word	0x20000390
 800128c:	2000038c 	.word	0x2000038c
 8001290:	20000386 	.word	0x20000386
 8001294:	20000394 	.word	0x20000394
 8001298:	40010800 	.word	0x40010800
 800129c:	20000387 	.word	0x20000387
 80012a0:	20000392 	.word	0x20000392
 80012a4:	2000038e 	.word	0x2000038e
 80012a8:	20000396 	.word	0x20000396
    	  			  cnt_pos_2 --;
 80012ac:	4b35      	ldr	r3, [pc, #212]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3b01      	subs	r3, #1
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012bc:	801a      	strh	r2, [r3, #0]
    	  		break;
 80012be:	e02f      	b.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
    	  case 2:
    	  		  if(prevState_2 == 0)
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <HAL_GPIO_EXTI_Callback+0x610>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <HAL_GPIO_EXTI_Callback+0x564>
    	  			  cnt_pos_2 ++;
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012d8:	801a      	strh	r2, [r3, #0]
    	  		  else
    	  			  cnt_pos_2 --;
    	  		break;
 80012da:	e021      	b.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
    	  			  cnt_pos_2 --;
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012ec:	801a      	strh	r2, [r3, #0]
    	  		break;
 80012ee:	e017      	b.n	8001320 <HAL_GPIO_EXTI_Callback+0x5a8>
    	  case 3:
    	  		  if(prevState_2 == 2)
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_GPIO_EXTI_Callback+0x610>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d109      	bne.n	800130c <HAL_GPIO_EXTI_Callback+0x594>
    	  			  cnt_pos_2 ++;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	b29b      	uxth	r3, r3
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001308:	801a      	strh	r2, [r3, #0]
    	  		  else
    	  			  cnt_pos_2 --;
    	  		break;
 800130a:	e008      	b.n	800131e <HAL_GPIO_EXTI_Callback+0x5a6>
    	  			  cnt_pos_2 --;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b29b      	uxth	r3, r3
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 800131c:	801a      	strh	r2, [r3, #0]
    	  		break;
 800131e:	bf00      	nop
    	  }
    	  cnt_vel_2 ++;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_GPIO_EXTI_Callback+0x614>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_GPIO_EXTI_Callback+0x614>)
 800132a:	801a      	strh	r2, [r3, #0]
    	  prevState_2 = state;
 800132c:	4a16      	ldr	r2, [pc, #88]	; (8001388 <HAL_GPIO_EXTI_Callback+0x610>)
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	7013      	strb	r3, [r2, #0]
    	  if(cnt_pos_2 >1495){
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 800133c:	db0b      	blt.n	8001356 <HAL_GPIO_EXTI_Callback+0x5de>
    		  round_2 ++;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_GPIO_EXTI_Callback+0x618>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	b29b      	uxth	r3, r3
 8001346:	3301      	adds	r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_GPIO_EXTI_Callback+0x618>)
 800134e:	801a      	strh	r2, [r3, #0]
    		  cnt_pos_2 =0;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001352:	2200      	movs	r2, #0
 8001354:	801a      	strh	r2, [r3, #0]
    	  }
    	  if(cnt_pos_2 < -1495){
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 8001360:	dc0b      	bgt.n	800137a <HAL_GPIO_EXTI_Callback+0x602>
    		  round_2 --;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_GPIO_EXTI_Callback+0x618>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	b29b      	uxth	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_GPIO_EXTI_Callback+0x618>)
 8001372:	801a      	strh	r2, [r3, #0]
    		  cnt_pos_2 =0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GPIO_EXTI_Callback+0x60c>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
    	  }
      }
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000392 	.word	0x20000392
 8001388:	20000387 	.word	0x20000387
 800138c:	2000038e 	.word	0x2000038e
 8001390:	20000396 	.word	0x20000396
 8001394:	00000000 	.word	0x00000000

08001398 <HAL_TIM_PeriodElapsedCallback>:
/**
 * Using timer callback function() to calculate position and velocity of 2 motors
 * TIM3: period 5ms --- calculate position and velocity
 * TIM4: period 1ms --- transmit data via protocol to host
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a80      	ldr	r2, [pc, #512]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f040 80e8 	bne.w	800157c <HAL_TIM_PeriodElapsedCallback+0x1e4>

		motor_1.current_Pos = round_1*rad_round + cnt_pos_1*rad_pulse; ///position motor 1: (rad)
 80013ac:	4b7f      	ldr	r3, [pc, #508]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x214>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f825 	bl	8000404 <__aeabi_i2d>
 80013ba:	a373      	add	r3, pc, #460	; (adr r3, 8001588 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f88a 	bl	80004d8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4614      	mov	r4, r2
 80013ca:	461d      	mov	r5, r3
 80013cc:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f816 	bl	8000404 <__aeabi_i2d>
 80013d8:	a36b      	add	r3, pc, #428	; (adr r3, 8001588 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f87b 	bl	80004d8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80013f0:	f7ff f99c 	bl	800072c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7fe feb6 	bl	800016c <__adddf3>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fb3e 	bl	8000a88 <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001410:	6013      	str	r3, [r2, #0]
		motor_1.real_Pos	= motor_1.current_Pos * r_Wheel; 		   /// L = (rad)*R
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f806 	bl	8000428 <__aeabi_f2d>
 800141c:	a35c      	add	r3, pc, #368	; (adr r3, 8001590 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f859 	bl	80004d8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb2b 	bl	8000a88 <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	4a60      	ldr	r2, [pc, #384]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001436:	6053      	str	r3, [r2, #4]
		motor_1.RPM 		= cnt_vel_1 * 8.02139;		 /// v = count*(1/1496)/(0.005/60) (rpm)
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ffe1 	bl	8000404 <__aeabi_i2d>
 8001442:	a355      	add	r3, pc, #340	; (adr r3, 8001598 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f846 	bl	80004d8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fb18 	bl	8000a88 <__aeabi_d2f>
 8001458:	4603      	mov	r3, r0
 800145a:	4a57      	ldr	r2, [pc, #348]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800145c:	60d3      	str	r3, [r2, #12]
		cnt_vel_1			= 0;
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001460:	2200      	movs	r2, #0
 8001462:	801a      	strh	r2, [r3, #0]
		motor_1.current_Vel	= motor_1.RPM * (pi/30); 	 /// v (rad/s)
 8001464:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffdd 	bl	8000428 <__aeabi_f2d>
 800146e:	a34c      	add	r3, pc, #304	; (adr r3, 80015a0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f830 	bl	80004d8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb02 	bl	8000a88 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001488:	6093      	str	r3, [r2, #8]

		motor_2.current_Pos = round_2*rad_round + cnt_pos_2*rad_pulse; ///position motor 1: (rad)
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffb6 	bl	8000404 <__aeabi_i2d>
 8001498:	a33b      	add	r3, pc, #236	; (adr r3, 8001588 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f81b 	bl	80004d8 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4614      	mov	r4, r2
 80014a8:	461d      	mov	r5, r3
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffa7 	bl	8000404 <__aeabi_i2d>
 80014b6:	a334      	add	r3, pc, #208	; (adr r3, 8001588 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f80c 	bl	80004d8 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014ce:	f7ff f92d 	bl	800072c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4620      	mov	r0, r4
 80014d8:	4629      	mov	r1, r5
 80014da:	f7fe fe47 	bl	800016c <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff facf 	bl	8000a88 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a36      	ldr	r2, [pc, #216]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80014ee:	6013      	str	r3, [r2, #0]
		motor_2.real_Pos	= motor_2.current_Pos * r_Wheel; 		   /// L = (rad)*R
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff97 	bl	8000428 <__aeabi_f2d>
 80014fa:	a325      	add	r3, pc, #148	; (adr r3, 8001590 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe ffea 	bl	80004d8 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fabc 	bl	8000a88 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001514:	6053      	str	r3, [r2, #4]
		motor_2.RPM 		= cnt_vel_2 * 8.02139;		 /// v = count*(1/1496)/(0.005/60) (rpm)
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff72 	bl	8000404 <__aeabi_i2d>
 8001520:	a31d      	add	r3, pc, #116	; (adr r3, 8001598 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7fe ffd7 	bl	80004d8 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff faa9 	bl	8000a88 <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800153a:	60d3      	str	r3, [r2, #12]
		cnt_vel_2			= 0;
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x234>)
 800153e:	2200      	movs	r2, #0
 8001540:	801a      	strh	r2, [r3, #0]
		motor_2.current_Vel	= motor_2.RPM * (pi/30); 	 /// v (rad/s)
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff6e 	bl	8000428 <__aeabi_f2d>
 800154c:	a314      	add	r3, pc, #80	; (adr r3, 80015a0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe ffc1 	bl	80004d8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fa93 	bl	8000a88 <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001566:	6093      	str	r3, [r2, #8]

		//if(run == true){
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 600);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001570:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 600);
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f44f 7216 	mov.w	r2, #600	; 0x258
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
//		}


	}

}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bdb0      	pop	{r4, r5, r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	51eb851f 	.word	0x51eb851f
 800158c:	40091eb8 	.word	0x40091eb8
 8001590:	0a3d70a4 	.word	0x0a3d70a4
 8001594:	3fa0a3d7 	.word	0x3fa0a3d7
 8001598:	a14cec42 	.word	0xa14cec42
 800159c:	40200af3 	.word	0x40200af3
 80015a0:	46508dff 	.word	0x46508dff
 80015a4:	3fbacb6f 	.word	0x3fbacb6f
 80015a8:	40000400 	.word	0x40000400
 80015ac:	20000394 	.word	0x20000394
 80015b0:	20000390 	.word	0x20000390
 80015b4:	40876000 	.word	0x40876000
 80015b8:	2000039c 	.word	0x2000039c
 80015bc:	2000038c 	.word	0x2000038c
 80015c0:	20000396 	.word	0x20000396
 80015c4:	20000392 	.word	0x20000392
 80015c8:	200003ac 	.word	0x200003ac
 80015cc:	2000038e 	.word	0x2000038e
 80015d0:	20000250 	.word	0x20000250

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d8:	f000 fd5a 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f850 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e0:	f000 f9f0 	bl	80019c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015e4:	f000 f8c4 	bl	8001770 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015e8:	f000 f926 	bl	8001838 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015ec:	f000 f972 	bl	80018d4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80015f0:	f000 f9be 	bl	8001970 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80015f4:	f000 f886 	bl	8001704 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /// ham khoi tao 2 kenh pwm cho 2 dong co
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80015f8:	2104      	movs	r1, #4
 80015fa:	4819      	ldr	r0, [pc, #100]	; (8001660 <main+0x8c>)
 80015fc:	f001 fef8 	bl	80033f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8001600:	2108      	movs	r1, #8
 8001602:	4817      	ldr	r0, [pc, #92]	; (8001660 <main+0x8c>)
 8001604:	f001 fef4 	bl	80033f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <main+0x90>)
 800160a:	f001 fe4f 	bl	80032ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800160e:	4816      	ldr	r0, [pc, #88]	; (8001668 <main+0x94>)
 8001610:	f001 fe4c 	bl	80032ac <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <main+0x8c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <main+0x8c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c

  /// ngat uart_rx
  HAL_UART_Receive_IT(&huart1, &rx_data,1);
 8001624:	2201      	movs	r2, #1
 8001626:	4911      	ldr	r1, [pc, #68]	; (800166c <main+0x98>)
 8001628:	4811      	ldr	r0, [pc, #68]	; (8001670 <main+0x9c>)
 800162a:	f002 fe20 	bl	800426e <HAL_UART_Receive_IT>

  /// init value of 2 motors
  motor_1.current_Pos = 0;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <main+0xa0>)
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
  motor_1.current_Vel = 0;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <main+0xa0>)
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	609a      	str	r2, [r3, #8]

  motor_2.current_Pos = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <main+0xa4>)
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
  motor_2.current_Vel = 0;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <main+0xa4>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOC,LED_Pin );
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <main+0xa8>)
 8001654:	f001 f915 	bl	8002882 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f000 fd7b 	bl	8002154 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,LED_Pin );
 800165e:	e7f6      	b.n	800164e <main+0x7a>
 8001660:	20000250 	.word	0x20000250
 8001664:	20000298 	.word	0x20000298
 8001668:	200002e0 	.word	0x200002e0
 800166c:	20000384 	.word	0x20000384
 8001670:	20000328 	.word	0x20000328
 8001674:	2000039c 	.word	0x2000039c
 8001678:	200003ac 	.word	0x200003ac
 800167c:	40011000 	.word	0x40011000

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b090      	sub	sp, #64	; 0x40
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	2228      	movs	r2, #40	; 0x28
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fbc0 	bl	8004e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a6:	2301      	movs	r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016aa:	2310      	movs	r3, #16
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 f90f 	bl	80028e4 <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016cc:	f000 fa22 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2302      	movs	r3, #2
 80016d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f001 fb7c 	bl	8002de8 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016f6:	f000 fa0d 	bl	8001b14 <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3740      	adds	r7, #64	; 0x40
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_SPI1_Init+0x64>)
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <MX_SPI1_Init+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI1_Init+0x64>)
 8001730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI1_Init+0x64>)
 8001750:	220a      	movs	r2, #10
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_SPI1_Init+0x64>)
 8001756:	f001 fcd5 	bl	8003104 <HAL_SPI_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001760:	f000 f9d8 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001f8 	.word	0x200001f8
 800176c:	40013000 	.word	0x40013000

08001770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12-1;
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <MX_TIM2_Init+0xc4>)
 800179c:	220b      	movs	r2, #11
 800179e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017bc:	f001 fdc8 	bl	8003350 <HAL_TIM_PWM_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017c6:	f000 f9a5 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	4619      	mov	r1, r3
 80017d8:	4816      	ldr	r0, [pc, #88]	; (8001834 <MX_TIM2_Init+0xc4>)
 80017da:	f002 fc05 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017e4:	f000 f996 	bl	8001b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e8:	2360      	movs	r3, #96	; 0x60
 80017ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2204      	movs	r2, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001800:	f001 ffa0 	bl	8003744 <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800180a:	f000 f983 	bl	8001b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2208      	movs	r2, #8
 8001812:	4619      	mov	r1, r3
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001816:	f001 ff95 	bl	8003744 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001820:	f000 f978 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM2_Init+0xc4>)
 8001826:	f000 fa65 	bl	8001cf4 <HAL_TIM_MspPostInit>

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000250 	.word	0x20000250

08001838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM3_Init+0x94>)
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <MX_TIM3_Init+0x98>)
 8001858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_TIM3_Init+0x94>)
 800185c:	2217      	movs	r2, #23
 800185e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM3_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_TIM3_Init+0x94>)
 8001868:	f241 3287 	movw	r2, #4999	; 0x1387
 800186c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_TIM3_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM3_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187a:	4814      	ldr	r0, [pc, #80]	; (80018cc <MX_TIM3_Init+0x94>)
 800187c:	f001 fcc6 	bl	800320c <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 f945 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_TIM3_Init+0x94>)
 8001898:	f002 f816 	bl	80038c8 <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f937 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_TIM3_Init+0x94>)
 80018b4:	f002 fb98 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018be:	f000 f929 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000298 	.word	0x20000298
 80018d0:	40000400 	.word	0x40000400

080018d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM4_Init+0x94>)
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <MX_TIM4_Init+0x98>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24-1;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM4_Init+0x94>)
 80018f8:	2217      	movs	r2, #23
 80018fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM4_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM4_Init+0x94>)
 8001904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001908:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_TIM4_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM4_Init+0x94>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <MX_TIM4_Init+0x94>)
 8001918:	f001 fc78 	bl	800320c <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001922:	f000 f8f7 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM4_Init+0x94>)
 8001934:	f001 ffc8 	bl	80038c8 <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f8e9 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM4_Init+0x94>)
 8001950:	f002 fb4a 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800195a:	f000 f8db 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002e0 	.word	0x200002e0
 800196c:	40000800 	.word	0x40000800

08001970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <MX_USART1_UART_Init+0x50>)
 8001978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 800197c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_USART1_UART_Init+0x4c>)
 80019a8:	f002 fb8e 	bl	80040c8 <HAL_UART_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019b2:	f000 f8af 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000328 	.word	0x20000328
 80019c0:	40013800 	.word	0x40013800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	4b48      	ldr	r3, [pc, #288]	; (8001afc <MX_GPIO_Init+0x138>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <MX_GPIO_Init+0x138>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b45      	ldr	r3, [pc, #276]	; (8001afc <MX_GPIO_Init+0x138>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b42      	ldr	r3, [pc, #264]	; (8001afc <MX_GPIO_Init+0x138>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a41      	ldr	r2, [pc, #260]	; (8001afc <MX_GPIO_Init+0x138>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <MX_GPIO_Init+0x138>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <MX_GPIO_Init+0x138>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <MX_GPIO_Init+0x138>)
 8001a0e:	f043 0308 	orr.w	r3, r3, #8
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <MX_GPIO_Init+0x138>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a26:	4836      	ldr	r0, [pc, #216]	; (8001b00 <MX_GPIO_Init+0x13c>)
 8001a28:	f000 ff13 	bl	8002852 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	4834      	ldr	r0, [pc, #208]	; (8001b04 <MX_GPIO_Init+0x140>)
 8001a32:	f000 ff0e 	bl	8002852 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	482c      	ldr	r0, [pc, #176]	; (8001b00 <MX_GPIO_Init+0x13c>)
 8001a50:	f000 fd64 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A_Pin M1_B_Pin M2_A_Pin M2_B_Pin */
  GPIO_InitStruct.Pin = M1_A_Pin|M1_B_Pin|M2_A_Pin|M2_B_Pin;
 8001a54:	23f0      	movs	r3, #240	; 0xf0
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <MX_GPIO_Init+0x144>)
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	4829      	ldr	r0, [pc, #164]	; (8001b0c <MX_GPIO_Init+0x148>)
 8001a68:	f000 fd58 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a6c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <MX_GPIO_Init+0x14c>)
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_GPIO_Init+0x140>)
 8001a82:	f000 fd4b 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <MX_GPIO_Init+0x14c>)
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481c      	ldr	r0, [pc, #112]	; (8001b0c <MX_GPIO_Init+0x148>)
 8001a9c:	f000 fd3e 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001aa0:	2340      	movs	r3, #64	; 0x40
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <MX_GPIO_Init+0x140>)
 8001ab4:	f000 fd32 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_GPIO_Init+0x140>)
 8001ad0:	f000 fd24 	bl	800251c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f000 fc36 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ade:	200a      	movs	r0, #10
 8001ae0:	f000 fc4f 	bl	8002382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2017      	movs	r0, #23
 8001aea:	f000 fc2e 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aee:	2017      	movs	r0, #23
 8001af0:	f000 fc47 	bl	8002382 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	10110000 	.word	0x10110000

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_MspInit+0x60>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_MspInit+0x60>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000

08001b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_SPI_MspInit+0xa4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d13d      	bne.n	8001c20 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_SPI_MspInit+0xa8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_SPI_MspInit+0xa8>)
 8001baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_SPI_MspInit+0xa8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_SPI_MspInit+0xa8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <HAL_SPI_MspInit+0xa8>)
 8001bc2:	f043 0308 	orr.w	r3, r3, #8
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_SPI_MspInit+0xa8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001bd4:	2328      	movs	r3, #40	; 0x28
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4812      	ldr	r0, [pc, #72]	; (8001c30 <HAL_SPI_MspInit+0xac>)
 8001be8:	f000 fc98 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bec:	2310      	movs	r3, #16
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <HAL_SPI_MspInit+0xac>)
 8001c00:	f000 fc8c 	bl	800251c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_SPI_MspInit+0xb0>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_SPI_MspInit+0xb0>)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013000 	.word	0x40013000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	40010000 	.word	0x40010000

08001c38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c48:	d10b      	bne.n	8001c62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_TIM_PWM_MspInit+0x34>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_TIM_PWM_MspInit+0x34>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_TIM_PWM_MspInit+0x34>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_TIM_Base_MspInit+0x78>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d114      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_TIM_Base_MspInit+0x7c>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_TIM_Base_MspInit+0x7c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_TIM_Base_MspInit+0x7c>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	201d      	movs	r0, #29
 8001ca0:	f000 fb53 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca4:	201d      	movs	r0, #29
 8001ca6:	f000 fb6c 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001caa:	e018      	b.n	8001cde <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_TIM_Base_MspInit+0x80>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d113      	bne.n	8001cde <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_TIM_Base_MspInit+0x7c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_TIM_Base_MspInit+0x7c>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_TIM_Base_MspInit+0x7c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	201e      	movs	r0, #30
 8001cd4:	f000 fb39 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cd8:	201e      	movs	r0, #30
 8001cda:	f000 fb52 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40000800 	.word	0x40000800

08001cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d12:	d117      	bne.n	8001d44 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_TIM_MspPostInit+0x58>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_TIM_MspPostInit+0x58>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_TIM_MspPostInit+0x58>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <HAL_TIM_MspPostInit+0x5c>)
 8001d40:	f000 fbec 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010800 	.word	0x40010800

08001d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <HAL_UART_MspInit+0x9c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d139      	bne.n	8001de8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_UART_MspInit+0xa0>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_UART_MspInit+0xa0>)
 8001d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_UART_MspInit+0xa0>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_UART_MspInit+0xa0>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_UART_MspInit+0xa0>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_UART_MspInit+0xa0>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4619      	mov	r1, r3
 8001db8:	480f      	ldr	r0, [pc, #60]	; (8001df8 <HAL_UART_MspInit+0xa4>)
 8001dba:	f000 fbaf 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_UART_MspInit+0xa4>)
 8001dd4:	f000 fba2 	bl	800251c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2025      	movs	r0, #37	; 0x25
 8001dde:	f000 fab4 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001de2:	2025      	movs	r0, #37	; 0x25
 8001de4:	f000 facd 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010800 	.word	0x40010800

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f96b 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_A_Pin);
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f000 fd30 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_B_Pin);
 8001e5c:	2020      	movs	r0, #32
 8001e5e:	f000 fd29 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_A_Pin);
 8001e62:	2040      	movs	r0, #64	; 0x40
 8001e64:	f000 fd26 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_B_Pin);
 8001e68:	2080      	movs	r0, #128	; 0x80
 8001e6a:	f000 fd23 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e72:	f000 fd1f 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM3_IRQHandler+0x10>)
 8001e82:	f001 fb57 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000298 	.word	0x20000298

08001e90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM4_IRQHandler+0x10>)
 8001e96:	f001 fb4d 	bl	8003534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200002e0 	.word	0x200002e0

08001ea4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <USART1_IRQHandler+0x10>)
 8001eaa:	f002 fa05 	bl	80042b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000328 	.word	0x20000328

08001eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <_kill>:

int _kill(int pid, int sig)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ed0:	f002 ff76 	bl	8004dc0 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2216      	movs	r2, #22
 8001ed8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_exit>:

void _exit (int status)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eee:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffe7 	bl	8001ec6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef8:	e7fe      	b.n	8001ef8 <_exit+0x12>

08001efa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e00a      	b.n	8001f22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0c:	f3af 8000 	nop.w
 8001f10:	4601      	mov	r1, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dbf0      	blt.n	8001f0c <_read+0x12>
  }

  return len;
 8001f2a:	687b      	ldr	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e009      	b.n	8001f5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	60ba      	str	r2, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fdea 	bl	8000b28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	dbf1      	blt.n	8001f46 <_write+0x12>
  }
  return len;
 8001f62:	687b      	ldr	r3, [r7, #4]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_close>:

int _close(int file)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f92:	605a      	str	r2, [r3, #4]
  return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <_isatty>:

int _isatty(int file)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <_sbrk+0x5c>)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <_sbrk+0x60>)
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <_sbrk+0x64>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <_sbrk+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ffc:	f002 fee0 	bl	8004dc0 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e009      	b.n	8002020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <_sbrk+0x64>)
 800201c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20005000 	.word	0x20005000
 800202c:	00000400 	.word	0x00000400
 8002030:	200003bc 	.word	0x200003bc
 8002034:	200003d8 	.word	0x200003d8

08002038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002044:	f7ff fff8 	bl	8002038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <LoopFillZerobss+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002060:	4c09      	ldr	r4, [pc, #36]	; (8002088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f002 fead 	bl	8004dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002072:	f7ff faaf 	bl	80015d4 <main>
  bx lr
 8002076:	4770      	bx	lr
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002080:	08007d74 	.word	0x08007d74
  ldr r2, =_sbss
 8002084:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002088:	200003d4 	.word	0x200003d4

0800208c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC1_2_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_Init+0x28>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_Init+0x28>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f000 f947 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f808 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ac:	f7ff fd38 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x54>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x58>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f95f 	bl	800239e <HAL_SYSTICK_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00e      	b.n	8002108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d80a      	bhi.n	8002106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f0:	2200      	movs	r2, #0
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 f927 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <HAL_InitTick+0x5c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000000 	.word	0x20000000
 8002114:	20000008 	.word	0x20000008
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_IncTick+0x1c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_IncTick+0x20>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_IncTick+0x20>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000008 	.word	0x20000008
 800213c:	200003c0 	.word	0x200003c0

08002140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <HAL_GetTick+0x10>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	200003c0 	.word	0x200003c0

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fff0 	bl	8002140 <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffe0 	bl	8002140 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4906      	ldr	r1, [pc, #24]	; (8002234 <__NVIC_EnableIRQ+0x34>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff90 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff2d 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff42 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff90 	bl	800228c <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5f 	bl	8002238 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff35 	bl	8002200 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d008      	beq.n	80023e0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2204      	movs	r2, #4
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e020      	b.n	8002422 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 020e 	bic.w	r2, r2, #14
 80023ee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d005      	beq.n	8002450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e051      	b.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a22      	ldr	r2, [pc, #136]	; (8002500 <HAL_DMA_Abort_IT+0xd4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d029      	beq.n	80024ce <HAL_DMA_Abort_IT+0xa2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_DMA_Abort_IT+0xd8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <HAL_DMA_Abort_IT+0x9e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1f      	ldr	r2, [pc, #124]	; (8002508 <HAL_DMA_Abort_IT+0xdc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01a      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x98>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_DMA_Abort_IT+0xe0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d012      	beq.n	80024be <HAL_DMA_Abort_IT+0x92>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_DMA_Abort_IT+0xe4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00a      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x8c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_DMA_Abort_IT+0xe8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_DMA_Abort_IT+0x86>
 80024ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024b0:	e00e      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b6:	e00b      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024bc:	e008      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c2:	e005      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c8:	e002      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024ca:	2310      	movs	r3, #16
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024ce:	2301      	movs	r3, #1
 80024d0:	4a11      	ldr	r2, [pc, #68]	; (8002518 <HAL_DMA_Abort_IT+0xec>)
 80024d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
    } 
  }
  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40020008 	.word	0x40020008
 8002504:	4002001c 	.word	0x4002001c
 8002508:	40020030 	.word	0x40020030
 800250c:	40020044 	.word	0x40020044
 8002510:	40020058 	.word	0x40020058
 8002514:	4002006c 	.word	0x4002006c
 8002518:	40020000 	.word	0x40020000

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b08b      	sub	sp, #44	; 0x2c
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252e:	e169      	b.n	8002804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002530:	2201      	movs	r2, #1
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 8158 	bne.w	80027fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a9a      	ldr	r2, [pc, #616]	; (80027bc <HAL_GPIO_Init+0x2a0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d05e      	beq.n	8002616 <HAL_GPIO_Init+0xfa>
 8002558:	4a98      	ldr	r2, [pc, #608]	; (80027bc <HAL_GPIO_Init+0x2a0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d875      	bhi.n	800264a <HAL_GPIO_Init+0x12e>
 800255e:	4a98      	ldr	r2, [pc, #608]	; (80027c0 <HAL_GPIO_Init+0x2a4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d058      	beq.n	8002616 <HAL_GPIO_Init+0xfa>
 8002564:	4a96      	ldr	r2, [pc, #600]	; (80027c0 <HAL_GPIO_Init+0x2a4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d86f      	bhi.n	800264a <HAL_GPIO_Init+0x12e>
 800256a:	4a96      	ldr	r2, [pc, #600]	; (80027c4 <HAL_GPIO_Init+0x2a8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d052      	beq.n	8002616 <HAL_GPIO_Init+0xfa>
 8002570:	4a94      	ldr	r2, [pc, #592]	; (80027c4 <HAL_GPIO_Init+0x2a8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d869      	bhi.n	800264a <HAL_GPIO_Init+0x12e>
 8002576:	4a94      	ldr	r2, [pc, #592]	; (80027c8 <HAL_GPIO_Init+0x2ac>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d04c      	beq.n	8002616 <HAL_GPIO_Init+0xfa>
 800257c:	4a92      	ldr	r2, [pc, #584]	; (80027c8 <HAL_GPIO_Init+0x2ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d863      	bhi.n	800264a <HAL_GPIO_Init+0x12e>
 8002582:	4a92      	ldr	r2, [pc, #584]	; (80027cc <HAL_GPIO_Init+0x2b0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d046      	beq.n	8002616 <HAL_GPIO_Init+0xfa>
 8002588:	4a90      	ldr	r2, [pc, #576]	; (80027cc <HAL_GPIO_Init+0x2b0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d85d      	bhi.n	800264a <HAL_GPIO_Init+0x12e>
 800258e:	2b12      	cmp	r3, #18
 8002590:	d82a      	bhi.n	80025e8 <HAL_GPIO_Init+0xcc>
 8002592:	2b12      	cmp	r3, #18
 8002594:	d859      	bhi.n	800264a <HAL_GPIO_Init+0x12e>
 8002596:	a201      	add	r2, pc, #4	; (adr r2, 800259c <HAL_GPIO_Init+0x80>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	08002617 	.word	0x08002617
 80025a0:	080025f1 	.word	0x080025f1
 80025a4:	08002603 	.word	0x08002603
 80025a8:	08002645 	.word	0x08002645
 80025ac:	0800264b 	.word	0x0800264b
 80025b0:	0800264b 	.word	0x0800264b
 80025b4:	0800264b 	.word	0x0800264b
 80025b8:	0800264b 	.word	0x0800264b
 80025bc:	0800264b 	.word	0x0800264b
 80025c0:	0800264b 	.word	0x0800264b
 80025c4:	0800264b 	.word	0x0800264b
 80025c8:	0800264b 	.word	0x0800264b
 80025cc:	0800264b 	.word	0x0800264b
 80025d0:	0800264b 	.word	0x0800264b
 80025d4:	0800264b 	.word	0x0800264b
 80025d8:	0800264b 	.word	0x0800264b
 80025dc:	0800264b 	.word	0x0800264b
 80025e0:	080025f9 	.word	0x080025f9
 80025e4:	0800260d 	.word	0x0800260d
 80025e8:	4a79      	ldr	r2, [pc, #484]	; (80027d0 <HAL_GPIO_Init+0x2b4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ee:	e02c      	b.n	800264a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	623b      	str	r3, [r7, #32]
          break;
 80025f6:	e029      	b.n	800264c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	3304      	adds	r3, #4
 80025fe:	623b      	str	r3, [r7, #32]
          break;
 8002600:	e024      	b.n	800264c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	3308      	adds	r3, #8
 8002608:	623b      	str	r3, [r7, #32]
          break;
 800260a:	e01f      	b.n	800264c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	330c      	adds	r3, #12
 8002612:	623b      	str	r3, [r7, #32]
          break;
 8002614:	e01a      	b.n	800264c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800261e:	2304      	movs	r3, #4
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e013      	b.n	800264c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800262c:	2308      	movs	r3, #8
 800262e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	611a      	str	r2, [r3, #16]
          break;
 8002636:	e009      	b.n	800264c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002638:	2308      	movs	r3, #8
 800263a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	615a      	str	r2, [r3, #20]
          break;
 8002642:	e003      	b.n	800264c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
          break;
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x130>
          break;
 800264a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d801      	bhi.n	8002656 <HAL_GPIO_Init+0x13a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	e001      	b.n	800265a <HAL_GPIO_Init+0x13e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d802      	bhi.n	8002668 <HAL_GPIO_Init+0x14c>
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	e002      	b.n	800266e <HAL_GPIO_Init+0x152>
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3b08      	subs	r3, #8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	210f      	movs	r1, #15
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	431a      	orrs	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80b1 	beq.w	80027fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800269c:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_GPIO_Init+0x2b8>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_GPIO_Init+0x2b8>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_GPIO_Init+0x2b8>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026b4:	4a48      	ldr	r2, [pc, #288]	; (80027d8 <HAL_GPIO_Init+0x2bc>)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a40      	ldr	r2, [pc, #256]	; (80027dc <HAL_GPIO_Init+0x2c0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_GPIO_Init+0x1ec>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3f      	ldr	r2, [pc, #252]	; (80027e0 <HAL_GPIO_Init+0x2c4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00d      	beq.n	8002704 <HAL_GPIO_Init+0x1e8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3e      	ldr	r2, [pc, #248]	; (80027e4 <HAL_GPIO_Init+0x2c8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <HAL_GPIO_Init+0x1e4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <HAL_GPIO_Init+0x2cc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_GPIO_Init+0x1e0>
 80026f8:	2303      	movs	r3, #3
 80026fa:	e006      	b.n	800270a <HAL_GPIO_Init+0x1ee>
 80026fc:	2304      	movs	r3, #4
 80026fe:	e004      	b.n	800270a <HAL_GPIO_Init+0x1ee>
 8002700:	2302      	movs	r3, #2
 8002702:	e002      	b.n	800270a <HAL_GPIO_Init+0x1ee>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_GPIO_Init+0x1ee>
 8002708:	2300      	movs	r3, #0
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	f002 0203 	and.w	r2, r2, #3
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	4093      	lsls	r3, r2
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800271a:	492f      	ldr	r1, [pc, #188]	; (80027d8 <HAL_GPIO_Init+0x2bc>)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	492c      	ldr	r1, [pc, #176]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	4928      	ldr	r1, [pc, #160]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 800274c:	4013      	ands	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	491e      	ldr	r1, [pc, #120]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 8002774:	4013      	ands	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4918      	ldr	r1, [pc, #96]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	43db      	mvns	r3, r3
 800279a:	4914      	ldr	r1, [pc, #80]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 800279c:	4013      	ands	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d021      	beq.n	80027f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <HAL_GPIO_Init+0x2d0>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e021      	b.n	80027fe <HAL_GPIO_Init+0x2e2>
 80027ba:	bf00      	nop
 80027bc:	10320000 	.word	0x10320000
 80027c0:	10310000 	.word	0x10310000
 80027c4:	10220000 	.word	0x10220000
 80027c8:	10210000 	.word	0x10210000
 80027cc:	10120000 	.word	0x10120000
 80027d0:	10110000 	.word	0x10110000
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40010800 	.word	0x40010800
 80027e0:	40010c00 	.word	0x40010c00
 80027e4:	40011000 	.word	0x40011000
 80027e8:	40011400 	.word	0x40011400
 80027ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4909      	ldr	r1, [pc, #36]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	3301      	adds	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f47f ae8e 	bne.w	8002530 <HAL_GPIO_Init+0x14>
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	372c      	adds	r7, #44	; 0x2c
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40010400 	.word	0x40010400

08002824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e001      	b.n	8002846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	807b      	strh	r3, [r7, #2]
 800285e:	4613      	mov	r3, r2
 8002860:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002862:	787b      	ldrb	r3, [r7, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002868:	887a      	ldrh	r2, [r7, #2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800286e:	e003      	b.n	8002878 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	041a      	lsls	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	041a      	lsls	r2, r3, #16
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43d9      	mvns	r1, r3
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	400b      	ands	r3, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fa50 	bl	8000d78 <HAL_GPIO_EXTI_Callback>
  }
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e272      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8087 	beq.w	8002a12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002904:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b04      	cmp	r3, #4
 800290e:	d00c      	beq.n	800292a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002910:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d112      	bne.n	8002942 <HAL_RCC_OscConfig+0x5e>
 800291c:	4b8c      	ldr	r3, [pc, #560]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d10b      	bne.n	8002942 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292a:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d06c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x12c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d168      	bne.n	8002a10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e24c      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x76>
 800294c:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a7f      	ldr	r2, [pc, #508]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	e02e      	b.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x98>
 8002962:	4b7b      	ldr	r3, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7a      	ldr	r2, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b78      	ldr	r3, [pc, #480]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a77      	ldr	r2, [pc, #476]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0xbc>
 8002986:	4b72      	ldr	r3, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a71      	ldr	r2, [pc, #452]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fbbe 	bl	8002140 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fbba 	bl	8002140 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e200      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xe4>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fbaa 	bl	8002140 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fba6 	bl	8002140 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1ec      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x10c>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x18c>
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x176>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c0      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4939      	ldr	r1, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fb5f 	bl	8002140 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff fb5b 	bl	8002140 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a1      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4927      	ldr	r1, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7ff fb3e 	bl	8002140 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fb3a 	bl	8002140 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e180      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03a      	beq.n	8002b68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_RCC_OscConfig+0x274>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7ff fb1e 	bl	8002140 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff fb1a 	bl	8002140 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e160      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f000 face 	bl	80030c8 <RCC_Delay>
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_RCC_OscConfig+0x274>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7ff fb04 	bl	8002140 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7ff fb00 	bl	8002140 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d908      	bls.n	8002b5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e146      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	42420000 	.word	0x42420000
 8002b58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	4b92      	ldr	r3, [pc, #584]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e9      	bne.n	8002b3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a6 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b8b      	ldr	r3, [pc, #556]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a87      	ldr	r2, [pc, #540]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b90:	61d3      	str	r3, [r2, #28]
 8002b92:	4b85      	ldr	r3, [pc, #532]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bae:	4b7f      	ldr	r3, [pc, #508]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7e      	ldr	r2, [pc, #504]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7ff fac1 	bl	8002140 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7ff fabd 	bl	8002140 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e103      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b75      	ldr	r3, [pc, #468]	; (8002dac <HAL_RCC_OscConfig+0x4c8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x312>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e02d      	b.n	8002c52 <HAL_RCC_OscConfig+0x36e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x334>
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a69      	ldr	r2, [pc, #420]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6213      	str	r3, [r2, #32]
 8002c0a:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	e01c      	b.n	8002c52 <HAL_RCC_OscConfig+0x36e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x356>
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	4b5e      	ldr	r3, [pc, #376]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a5d      	ldr	r2, [pc, #372]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	e00b      	b.n	8002c52 <HAL_RCC_OscConfig+0x36e>
 8002c3a:	4b5b      	ldr	r3, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4a5a      	ldr	r2, [pc, #360]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6213      	str	r3, [r2, #32]
 8002c46:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0304 	bic.w	r3, r3, #4
 8002c50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d015      	beq.n	8002c86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff fa71 	bl	8002140 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7ff fa6d 	bl	8002140 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0b1      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ee      	beq.n	8002c62 <HAL_RCC_OscConfig+0x37e>
 8002c84:	e014      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7ff fa5b 	bl	8002140 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7ff fa57 	bl	8002140 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e09b      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ee      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8087 	beq.w	8002dda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d061      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d146      	bne.n	8002d6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7ff fa2b 	bl	8002140 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7ff fa27 	bl	8002140 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e06d      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4921      	ldr	r1, [pc, #132]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a19      	ldr	r1, [r3, #32]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	491b      	ldr	r1, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7ff f9fb 	bl	8002140 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7ff f9f7 	bl	8002140 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e03d      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x46a>
 8002d6c:	e035      	b.n	8002dda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff f9e4 	bl	8002140 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff f9e0 	bl	8002140 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e026      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x498>
 8002d9a:	e01e      	b.n	8002dda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e019      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_OscConfig+0x500>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d0      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d910      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	4965      	ldr	r1, [pc, #404]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b8      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	494d      	ldr	r1, [pc, #308]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d040      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d115      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e073      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06b      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4936      	ldr	r1, [pc, #216]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7ff f932 	bl	8002140 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7ff f92e 	bl	8002140 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e053      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d210      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4922      	ldr	r1, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e032      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4916      	ldr	r1, [pc, #88]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	490e      	ldr	r1, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f76:	f000 f821 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8002f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f890 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08007960 	.word	0x08007960
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x30>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fea:	e027      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fee:	613b      	str	r3, [r7, #16]
      break;
 8002ff0:	e027      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_RCC_GetSysClockFreq+0x94>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0c5b      	lsrs	r3, r3, #17
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	4a11      	ldr	r2, [pc, #68]	; (800305c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	fb03 f202 	mul.w	r2, r3, r2
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e004      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	613b      	str	r3, [r7, #16]
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x98>)
 800303e:	613b      	str	r3, [r7, #16]
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	693b      	ldr	r3, [r7, #16]
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	007a1200 	.word	0x007a1200
 8003058:	08007978 	.word	0x08007978
 800305c:	08007988 	.word	0x08007988
 8003060:	003d0900 	.word	0x003d0900

08003064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003068:	4b02      	ldr	r3, [pc, #8]	; (8003074 <HAL_RCC_GetHCLKFreq+0x10>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000000 	.word	0x20000000

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800307c:	f7ff fff2 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	08007970 	.word	0x08007970

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030a4:	f7ff ffde 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	0adb      	lsrs	r3, r3, #11
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08007970 	.word	0x08007970

080030c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <RCC_Delay+0x34>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <RCC_Delay+0x38>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0a5b      	lsrs	r3, r3, #9
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030e4:	bf00      	nop
  }
  while (Delay --);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	60fa      	str	r2, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f9      	bne.n	80030e4 <RCC_Delay+0x1c>
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	20000000 	.word	0x20000000
 8003100:	10624dd3 	.word	0x10624dd3

08003104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e076      	b.n	8003204 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003126:	d009      	beq.n	800313c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	e005      	b.n	800313c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fd14 	bl	8001b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	ea42 0103 	orr.w	r1, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	0c1a      	lsrs	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f002 0204 	and.w	r2, r2, #4
 80031e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fd1c 	bl	8001c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fc28 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e03a      	b.n	800333a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_TIM_Base_Start_IT+0x98>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d009      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_TIM_Base_Start_IT+0x9c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x58>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_TIM_Base_Start_IT+0xa0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d010      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e007      	b.n	8003338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe fc5e 	bl	8001c38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fb86 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_TIM_PWM_Start+0x24>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e022      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b04      	cmp	r3, #4
 8003418:	d109      	bne.n	800342e <HAL_TIM_PWM_Start+0x3e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e015      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d109      	bne.n	8003448 <HAL_TIM_PWM_Start+0x58>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <HAL_TIM_PWM_Start+0x6a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e05e      	b.n	8003520 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0x82>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003470:	e013      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0x92>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	e00b      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0xa2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003490:	e003      	b.n	800349a <HAL_TIM_PWM_Start+0xaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fd7c 	bl	8003fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_TIM_PWM_Start+0x138>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d107      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_TIM_PWM_Start+0x138>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_TIM_PWM_Start+0xfa>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d009      	beq.n	80034ea <HAL_TIM_PWM_Start+0xfa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a14      	ldr	r2, [pc, #80]	; (800352c <HAL_TIM_PWM_Start+0x13c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PWM_Start+0xfa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <HAL_TIM_PWM_Start+0x140>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d010      	beq.n	800351e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	e007      	b.n	800351e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800

08003534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0202 	mvn.w	r2, #2
 8003560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa76 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa69 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa78 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0204 	mvn.w	r2, #4
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa4c 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa3f 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fa4e 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0208 	mvn.w	r2, #8
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2204      	movs	r2, #4
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa22 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa15 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa24 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b10      	cmp	r3, #16
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2208      	movs	r2, #8
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9f8 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9eb 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9fa 	bl	8003a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0201 	mvn.w	r2, #1
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fe70 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fce9 	bl	80040b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9be 	bl	8003a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	d10e      	bne.n	800373c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d107      	bne.n	800373c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0220 	mvn.w	r2, #32
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fcb4 	bl	80040a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e0ae      	b.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	f200 809f 	bhi.w	80038b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080038b1 	.word	0x080038b1
 8003780:	080038b1 	.word	0x080038b1
 8003784:	080038b1 	.word	0x080038b1
 8003788:	080037ed 	.word	0x080037ed
 800378c:	080038b1 	.word	0x080038b1
 8003790:	080038b1 	.word	0x080038b1
 8003794:	080038b1 	.word	0x080038b1
 8003798:	0800382f 	.word	0x0800382f
 800379c:	080038b1 	.word	0x080038b1
 80037a0:	080038b1 	.word	0x080038b1
 80037a4:	080038b1 	.word	0x080038b1
 80037a8:	0800386f 	.word	0x0800386f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f9d6 	bl	8003b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
      break;
 80037ea:	e064      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fa1c 	bl	8003c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6999      	ldr	r1, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
      break;
 800382c:	e043      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa65 	bl	8003d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0208 	orr.w	r2, r2, #8
 8003848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
      break;
 800386c:	e023      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 faaf 	bl	8003dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_ConfigClockSource+0x1c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0b4      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x186>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d03e      	beq.n	800399c <HAL_TIM_ConfigClockSource+0xd4>
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003922:	f200 8087 	bhi.w	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	f000 8086 	beq.w	8003a3a <HAL_TIM_ConfigClockSource+0x172>
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	d87f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d01a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xa6>
 8003938:	2b70      	cmp	r3, #112	; 0x70
 800393a:	d87b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d050      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003940:	2b60      	cmp	r3, #96	; 0x60
 8003942:	d877      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d03c      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003948:	2b50      	cmp	r3, #80	; 0x50
 800394a:	d873      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d058      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x13a>
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d86f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d064      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b30      	cmp	r3, #48	; 0x30
 800395a:	d86b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d060      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d867      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d05a      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 800396c:	e062      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f000 faf0 	bl	8003f62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
      break;
 800399a:	e04f      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f000 fad9 	bl	8003f62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039be:	609a      	str	r2, [r3, #8]
      break;
 80039c0:	e03c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fa50 	bl	8003e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2150      	movs	r1, #80	; 0x50
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 faa7 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 80039e0:	e02c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 fa6e 	bl	8003ed0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2160      	movs	r1, #96	; 0x60
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fa97 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003a00:	e01c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 fa30 	bl	8003e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa87 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 fa7e 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
	...

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <TIM_Base_SetConfig+0xb8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x30>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x30>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <TIM_Base_SetConfig+0xbc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x30>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <TIM_Base_SetConfig+0xc0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <TIM_Base_SetConfig+0xb8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x62>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x62>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <TIM_Base_SetConfig+0xbc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <TIM_Base_SetConfig+0xc0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <TIM_Base_SetConfig+0xb8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800

08003b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0201 	bic.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 0302 	bic.w	r3, r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <TIM_OC1_SetConfig+0xc8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10c      	bne.n	8003bda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0308 	bic.w	r3, r3, #8
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <TIM_OC1_SetConfig+0xc8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d111      	bne.n	8003c06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	621a      	str	r2, [r3, #32]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00

08003c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 0210 	bic.w	r2, r3, #16
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0320 	bic.w	r3, r3, #32
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <TIM_OC2_SetConfig+0xd0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10d      	bne.n	8003cac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <TIM_OC2_SetConfig+0xd0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d113      	bne.n	8003cdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	40012c00 	.word	0x40012c00

08003d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <TIM_OC3_SetConfig+0xd0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10d      	bne.n	8003d7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <TIM_OC3_SetConfig+0xd0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d113      	bne.n	8003dae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	621a      	str	r2, [r3, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40012c00 	.word	0x40012c00

08003dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	031b      	lsls	r3, r3, #12
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <TIM_OC4_SetConfig+0x98>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d109      	bne.n	8003e4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr
 8003e70:	40012c00 	.word	0x40012c00

08003e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f023 0201 	bic.w	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 030a 	bic.w	r3, r3, #10
 8003eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f023 0210 	bic.w	r2, r3, #16
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	031b      	lsls	r3, r3, #12
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f043 0307 	orr.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	021a      	lsls	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	609a      	str	r2, [r3, #8]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e046      	b.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a16      	ldr	r2, [pc, #88]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d009      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a10      	ldr	r2, [pc, #64]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10c      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800

080040a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e042      	b.n	8004160 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd fe30 	bl	8001d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800410a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fdc5 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	d16d      	bne.n	8004264 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_UART_Transmit+0x2c>
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e066      	b.n	8004266 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2221      	movs	r2, #33	; 0x21
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a6:	f7fd ffcb 	bl	8002140 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c0:	d108      	bne.n	80041d4 <HAL_UART_Transmit+0x6c>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	e003      	b.n	80041dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041dc:	e02a      	b.n	8004234 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb14 	bl	8004816 <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e036      	b.n	8004266 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800420c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	3302      	adds	r3, #2
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	e007      	b.n	8004226 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1cf      	bne.n	80041de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	2140      	movs	r1, #64	; 0x40
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fae4 	bl	8004816 <UART_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e006      	b.n	8004266 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	4613      	mov	r3, r2
 800427a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b20      	cmp	r3, #32
 8004286:	d112      	bne.n	80042ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_UART_Receive_IT+0x26>
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e00b      	b.n	80042b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	461a      	mov	r2, r3
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fb24 	bl	80048f2 <UART_Start_Receive_IT>
 80042aa:	4603      	mov	r3, r0
 80042ac:	e000      	b.n	80042b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b0ba      	sub	sp, #232	; 0xe8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_UART_IRQHandler+0x66>
 800430a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fc01 	bl	8004b1e <UART_Receive_IT>
      return;
 800431c:	e25b      	b.n	80047d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800431e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80de 	beq.w	80044e4 <HAL_UART_IRQHandler+0x22c>
 8004328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004338:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80d1 	beq.w	80044e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_UART_IRQHandler+0xae>
 800434e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_UART_IRQHandler+0xd2>
 8004372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f043 0202 	orr.w	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_UART_IRQHandler+0xf6>
 8004396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d011      	beq.n	80043de <HAL_UART_IRQHandler+0x126>
 80043ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f043 0208 	orr.w	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 81f2 	beq.w	80047cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_UART_IRQHandler+0x14e>
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fb8c 	bl	8004b1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_UART_IRQHandler+0x17a>
 800442a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d04f      	beq.n	80044d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa96 	bl	8004964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d041      	beq.n	80044ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800445c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800447e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800448a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1d9      	bne.n	8004446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d013      	beq.n	80044c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	4a7e      	ldr	r2, [pc, #504]	; (8004698 <HAL_UART_IRQHandler+0x3e0>)
 80044a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd ffc0 	bl	800242c <HAL_DMA_Abort_IT>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044bc:	4610      	mov	r0, r2
 80044be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	e00e      	b.n	80044e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f993 	bl	80047ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	e00a      	b.n	80044e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f98f 	bl	80047ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	e006      	b.n	80044e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f98b 	bl	80047ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044de:	e175      	b.n	80047cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	bf00      	nop
    return;
 80044e2:	e173      	b.n	80047cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	f040 814f 	bne.w	800478c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8148 	beq.w	800478c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8141 	beq.w	800478c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80b6 	beq.w	800469c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800453c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8145 	beq.w	80047d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800454a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800454e:	429a      	cmp	r2, r3
 8004550:	f080 813e 	bcs.w	80047d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800455a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b20      	cmp	r3, #32
 8004564:	f000 8088 	beq.w	8004678 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800457e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004586:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004594:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1d9      	bne.n	8004568 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e1      	bne.n	80045b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004614:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800461a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e3      	bne.n	80045f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004648:	f023 0310 	bic.w	r3, r3, #16
 800464c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800465a:	65ba      	str	r2, [r7, #88]	; 0x58
 800465c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e3      	bne.n	8004636 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fe9f 	bl	80023b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004686:	b29b      	uxth	r3, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8b6 	bl	8004800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004694:	e09c      	b.n	80047d0 <HAL_UART_IRQHandler+0x518>
 8004696:	bf00      	nop
 8004698:	08004a29 	.word	0x08004a29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 808e 	beq.w	80047d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8089 	beq.w	80047d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046e6:	647a      	str	r2, [r7, #68]	; 0x44
 80046e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e3      	bne.n	80046c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	623b      	str	r3, [r7, #32]
   return(result);
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800471e:	633a      	str	r2, [r7, #48]	; 0x30
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0310 	bic.w	r3, r3, #16
 8004756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004764:	61fa      	str	r2, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	617b      	str	r3, [r7, #20]
   return(result);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e3      	bne.n	8004740 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800477e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004782:	4619      	mov	r1, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f83b 	bl	8004800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800478a:	e023      	b.n	80047d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_UART_IRQHandler+0x4f4>
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f953 	bl	8004a50 <UART_Transmit_IT>
    return;
 80047aa:	e014      	b.n	80047d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00e      	beq.n	80047d6 <HAL_UART_IRQHandler+0x51e>
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f992 	bl	8004aee <UART_EndTransmit_IT>
    return;
 80047ca:	e004      	b.n	80047d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80047cc:	bf00      	nop
 80047ce:	e002      	b.n	80047d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047d4:	bf00      	nop
  }
}
 80047d6:	37e8      	adds	r7, #232	; 0xe8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b090      	sub	sp, #64	; 0x40
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004826:	e050      	b.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d04c      	beq.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0x30>
 8004836:	f7fd fc83 	bl	8002140 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004842:	429a      	cmp	r2, r3
 8004844:	d241      	bcs.n	80048ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004866:	637a      	str	r2, [r7, #52]	; 0x34
 8004868:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800486c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	613b      	str	r3, [r7, #16]
   return(result);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3314      	adds	r3, #20
 8004898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489a:	623a      	str	r2, [r7, #32]
 800489c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	69f9      	ldr	r1, [r7, #28]
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e00f      	b.n	80048ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d09f      	beq.n	8004828 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3740      	adds	r7, #64	; 0x40
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2222      	movs	r2, #34	; 0x22
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004936:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0220 	orr.w	r2, r2, #32
 8004956:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b095      	sub	sp, #84	; 0x54
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498c:	643a      	str	r2, [r7, #64]	; 0x40
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e5      	bne.n	800496c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3314      	adds	r3, #20
 80049be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d119      	bne.n	8004a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f023 0310 	bic.w	r3, r3, #16
 80049f2:	647b      	str	r3, [r7, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049fc:	61ba      	str	r2, [r7, #24]
 80049fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6979      	ldr	r1, [r7, #20]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a1e:	bf00      	nop
 8004a20:	3754      	adds	r7, #84	; 0x54
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff fed3 	bl	80047ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b21      	cmp	r3, #33	; 0x21
 8004a62:	d13e      	bne.n	8004ae2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d114      	bne.n	8004a98 <UART_Transmit_IT+0x48>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d110      	bne.n	8004a98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	621a      	str	r2, [r3, #32]
 8004a96:	e008      	b.n	8004aaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	1c59      	adds	r1, r3, #1
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6211      	str	r1, [r2, #32]
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10f      	bne.n	8004ade <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004acc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004adc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e000      	b.n	8004ae4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ae2:	2302      	movs	r3, #2
  }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fe64 	bl	80047dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b08c      	sub	sp, #48	; 0x30
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b22      	cmp	r3, #34	; 0x22
 8004b30:	f040 80ae 	bne.w	8004c90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d117      	bne.n	8004b6e <UART_Receive_IT+0x50>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d113      	bne.n	8004b6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	1c9a      	adds	r2, r3, #2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b6c:	e026      	b.n	8004bbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b80:	d007      	beq.n	8004b92 <UART_Receive_IT+0x74>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <UART_Receive_IT+0x82>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e008      	b.n	8004bb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d15d      	bne.n	8004c8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0220 	bic.w	r2, r2, #32
 8004bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d135      	bne.n	8004c82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 0310 	bic.w	r3, r3, #16
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	623a      	str	r2, [r7, #32]
 8004c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	6a3a      	ldr	r2, [r7, #32]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d10a      	bne.n	8004c74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fdc0 	bl	8004800 <HAL_UARTEx_RxEventCallback>
 8004c80:	e002      	b.n	8004c88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fb ff62 	bl	8000b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e002      	b.n	8004c92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3730      	adds	r7, #48	; 0x30
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cd6:	f023 030c 	bic.w	r3, r3, #12
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <UART_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7fe f9cc 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	e002      	b.n	8004d12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fe f9b4 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8004d10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009a      	lsls	r2, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <UART_SetConfig+0x118>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	0119      	lsls	r1, r3, #4
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009a      	lsls	r2, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d48:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <UART_SetConfig+0x118>)
 8004d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2064      	movs	r0, #100	; 0x64
 8004d52:	fb00 f303 	mul.w	r3, r0, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	3332      	adds	r3, #50	; 0x32
 8004d5c:	4a15      	ldr	r2, [pc, #84]	; (8004db4 <UART_SetConfig+0x118>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d68:	4419      	add	r1, r3
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009a      	lsls	r2, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <UART_SetConfig+0x118>)
 8004d82:	fba3 0302 	umull	r0, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2064      	movs	r0, #100	; 0x64
 8004d8a:	fb00 f303 	mul.w	r3, r0, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	; 0x32
 8004d94:	4a07      	ldr	r2, [pc, #28]	; (8004db4 <UART_SetConfig+0x118>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	440a      	add	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40013800 	.word	0x40013800
 8004db4:	51eb851f 	.word	0x51eb851f

08004db8 <atoi>:
 8004db8:	220a      	movs	r2, #10
 8004dba:	2100      	movs	r1, #0
 8004dbc:	f000 bd0e 	b.w	80057dc <strtol>

08004dc0 <__errno>:
 8004dc0:	4b01      	ldr	r3, [pc, #4]	; (8004dc8 <__errno+0x8>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c

08004dcc <__libc_init_array>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	2600      	movs	r6, #0
 8004dd0:	4d0c      	ldr	r5, [pc, #48]	; (8004e04 <__libc_init_array+0x38>)
 8004dd2:	4c0d      	ldr	r4, [pc, #52]	; (8004e08 <__libc_init_array+0x3c>)
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	42a6      	cmp	r6, r4
 8004dda:	d109      	bne.n	8004df0 <__libc_init_array+0x24>
 8004ddc:	f002 fdb4 	bl	8007948 <_init>
 8004de0:	2600      	movs	r6, #0
 8004de2:	4d0a      	ldr	r5, [pc, #40]	; (8004e0c <__libc_init_array+0x40>)
 8004de4:	4c0a      	ldr	r4, [pc, #40]	; (8004e10 <__libc_init_array+0x44>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	d105      	bne.n	8004dfa <__libc_init_array+0x2e>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df4:	4798      	blx	r3
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7ee      	b.n	8004dd8 <__libc_init_array+0xc>
 8004dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfe:	4798      	blx	r3
 8004e00:	3601      	adds	r6, #1
 8004e02:	e7f2      	b.n	8004dea <__libc_init_array+0x1e>
 8004e04:	08007d6c 	.word	0x08007d6c
 8004e08:	08007d6c 	.word	0x08007d6c
 8004e0c:	08007d6c 	.word	0x08007d6c
 8004e10:	08007d70 	.word	0x08007d70

08004e14 <memset>:
 8004e14:	4603      	mov	r3, r0
 8004e16:	4402      	add	r2, r0
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <memset+0xa>
 8004e1c:	4770      	bx	lr
 8004e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e22:	e7f9      	b.n	8004e18 <memset+0x4>

08004e24 <__cvt>:
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2a:	461f      	mov	r7, r3
 8004e2c:	bfbb      	ittet	lt
 8004e2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e32:	461f      	movlt	r7, r3
 8004e34:	2300      	movge	r3, #0
 8004e36:	232d      	movlt	r3, #45	; 0x2d
 8004e38:	b088      	sub	sp, #32
 8004e3a:	4614      	mov	r4, r2
 8004e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004e40:	7013      	strb	r3, [r2, #0]
 8004e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004e48:	f023 0820 	bic.w	r8, r3, #32
 8004e4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e50:	d005      	beq.n	8004e5e <__cvt+0x3a>
 8004e52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e56:	d100      	bne.n	8004e5a <__cvt+0x36>
 8004e58:	3501      	adds	r5, #1
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e000      	b.n	8004e60 <__cvt+0x3c>
 8004e5e:	2303      	movs	r3, #3
 8004e60:	aa07      	add	r2, sp, #28
 8004e62:	9204      	str	r2, [sp, #16]
 8004e64:	aa06      	add	r2, sp, #24
 8004e66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e6a:	e9cd 3500 	strd	r3, r5, [sp]
 8004e6e:	4622      	mov	r2, r4
 8004e70:	463b      	mov	r3, r7
 8004e72:	f000 fd49 	bl	8005908 <_dtoa_r>
 8004e76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	d102      	bne.n	8004e84 <__cvt+0x60>
 8004e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e80:	07db      	lsls	r3, r3, #31
 8004e82:	d522      	bpl.n	8004eca <__cvt+0xa6>
 8004e84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e88:	eb06 0905 	add.w	r9, r6, r5
 8004e8c:	d110      	bne.n	8004eb0 <__cvt+0x8c>
 8004e8e:	7833      	ldrb	r3, [r6, #0]
 8004e90:	2b30      	cmp	r3, #48	; 0x30
 8004e92:	d10a      	bne.n	8004eaa <__cvt+0x86>
 8004e94:	2200      	movs	r2, #0
 8004e96:	2300      	movs	r3, #0
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea0:	b918      	cbnz	r0, 8004eaa <__cvt+0x86>
 8004ea2:	f1c5 0501 	rsb	r5, r5, #1
 8004ea6:	f8ca 5000 	str.w	r5, [sl]
 8004eaa:	f8da 3000 	ldr.w	r3, [sl]
 8004eae:	4499      	add	r9, r3
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	f7fb fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8004ebc:	b108      	cbz	r0, 8004ec2 <__cvt+0x9e>
 8004ebe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ec2:	2230      	movs	r2, #48	; 0x30
 8004ec4:	9b07      	ldr	r3, [sp, #28]
 8004ec6:	454b      	cmp	r3, r9
 8004ec8:	d307      	bcc.n	8004eda <__cvt+0xb6>
 8004eca:	4630      	mov	r0, r6
 8004ecc:	9b07      	ldr	r3, [sp, #28]
 8004ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ed0:	1b9b      	subs	r3, r3, r6
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	b008      	add	sp, #32
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	9107      	str	r1, [sp, #28]
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e7f0      	b.n	8004ec4 <__cvt+0xa0>

08004ee2 <__exponent>:
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ee6:	2900      	cmp	r1, #0
 8004ee8:	f803 2b02 	strb.w	r2, [r3], #2
 8004eec:	bfb6      	itet	lt
 8004eee:	222d      	movlt	r2, #45	; 0x2d
 8004ef0:	222b      	movge	r2, #43	; 0x2b
 8004ef2:	4249      	neglt	r1, r1
 8004ef4:	2909      	cmp	r1, #9
 8004ef6:	7042      	strb	r2, [r0, #1]
 8004ef8:	dd2b      	ble.n	8004f52 <__exponent+0x70>
 8004efa:	f10d 0407 	add.w	r4, sp, #7
 8004efe:	46a4      	mov	ip, r4
 8004f00:	270a      	movs	r7, #10
 8004f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f06:	460a      	mov	r2, r1
 8004f08:	46a6      	mov	lr, r4
 8004f0a:	fb07 1516 	mls	r5, r7, r6, r1
 8004f0e:	2a63      	cmp	r2, #99	; 0x63
 8004f10:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004f14:	4631      	mov	r1, r6
 8004f16:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f1e:	dcf0      	bgt.n	8004f02 <__exponent+0x20>
 8004f20:	3130      	adds	r1, #48	; 0x30
 8004f22:	f1ae 0502 	sub.w	r5, lr, #2
 8004f26:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	1c44      	adds	r4, r0, #1
 8004f2e:	4561      	cmp	r1, ip
 8004f30:	d30a      	bcc.n	8004f48 <__exponent+0x66>
 8004f32:	f10d 0209 	add.w	r2, sp, #9
 8004f36:	eba2 020e 	sub.w	r2, r2, lr
 8004f3a:	4565      	cmp	r5, ip
 8004f3c:	bf88      	it	hi
 8004f3e:	2200      	movhi	r2, #0
 8004f40:	4413      	add	r3, r2
 8004f42:	1a18      	subs	r0, r3, r0
 8004f44:	b003      	add	sp, #12
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f4c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f50:	e7ed      	b.n	8004f2e <__exponent+0x4c>
 8004f52:	2330      	movs	r3, #48	; 0x30
 8004f54:	3130      	adds	r1, #48	; 0x30
 8004f56:	7083      	strb	r3, [r0, #2]
 8004f58:	70c1      	strb	r1, [r0, #3]
 8004f5a:	1d03      	adds	r3, r0, #4
 8004f5c:	e7f1      	b.n	8004f42 <__exponent+0x60>
	...

08004f60 <_printf_float>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b091      	sub	sp, #68	; 0x44
 8004f66:	460c      	mov	r4, r1
 8004f68:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	461f      	mov	r7, r3
 8004f70:	4605      	mov	r5, r0
 8004f72:	f001 fab7 	bl	80064e4 <_localeconv_r>
 8004f76:	6803      	ldr	r3, [r0, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7c:	f7fb f8e8 	bl	8000150 <strlen>
 8004f80:	2300      	movs	r3, #0
 8004f82:	930e      	str	r3, [sp, #56]	; 0x38
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	900a      	str	r0, [sp, #40]	; 0x28
 8004f8a:	3307      	adds	r3, #7
 8004f8c:	f023 0307 	bic.w	r3, r3, #7
 8004f90:	f103 0208 	add.w	r2, r3, #8
 8004f94:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f98:	f8d4 b000 	ldr.w	fp, [r4]
 8004f9c:	f8c8 2000 	str.w	r2, [r8]
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fa8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004fac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	4b9c      	ldr	r3, [pc, #624]	; (800522c <_printf_float+0x2cc>)
 8004fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fbc:	f7fb fd26 	bl	8000a0c <__aeabi_dcmpun>
 8004fc0:	bb70      	cbnz	r0, 8005020 <_printf_float+0xc0>
 8004fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4b98      	ldr	r3, [pc, #608]	; (800522c <_printf_float+0x2cc>)
 8004fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fcc:	f7fb fd00 	bl	80009d0 <__aeabi_dcmple>
 8004fd0:	bb30      	cbnz	r0, 8005020 <_printf_float+0xc0>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4651      	mov	r1, sl
 8004fda:	f7fb fcef 	bl	80009bc <__aeabi_dcmplt>
 8004fde:	b110      	cbz	r0, 8004fe6 <_printf_float+0x86>
 8004fe0:	232d      	movs	r3, #45	; 0x2d
 8004fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe6:	4b92      	ldr	r3, [pc, #584]	; (8005230 <_printf_float+0x2d0>)
 8004fe8:	4892      	ldr	r0, [pc, #584]	; (8005234 <_printf_float+0x2d4>)
 8004fea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004fee:	bf94      	ite	ls
 8004ff0:	4698      	movls	r8, r3
 8004ff2:	4680      	movhi	r8, r0
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	f04f 0a00 	mov.w	sl, #0
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	f02b 0304 	bic.w	r3, fp, #4
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	4633      	mov	r3, r6
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	9700      	str	r7, [sp, #0]
 800500a:	aa0f      	add	r2, sp, #60	; 0x3c
 800500c:	f000 f9d4 	bl	80053b8 <_printf_common>
 8005010:	3001      	adds	r0, #1
 8005012:	f040 8090 	bne.w	8005136 <_printf_float+0x1d6>
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	b011      	add	sp, #68	; 0x44
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005020:	4642      	mov	r2, r8
 8005022:	4653      	mov	r3, sl
 8005024:	4640      	mov	r0, r8
 8005026:	4651      	mov	r1, sl
 8005028:	f7fb fcf0 	bl	8000a0c <__aeabi_dcmpun>
 800502c:	b148      	cbz	r0, 8005042 <_printf_float+0xe2>
 800502e:	f1ba 0f00 	cmp.w	sl, #0
 8005032:	bfb8      	it	lt
 8005034:	232d      	movlt	r3, #45	; 0x2d
 8005036:	4880      	ldr	r0, [pc, #512]	; (8005238 <_printf_float+0x2d8>)
 8005038:	bfb8      	it	lt
 800503a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800503e:	4b7f      	ldr	r3, [pc, #508]	; (800523c <_printf_float+0x2dc>)
 8005040:	e7d3      	b.n	8004fea <_printf_float+0x8a>
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	d142      	bne.n	80050d2 <_printf_float+0x172>
 800504c:	2306      	movs	r3, #6
 800504e:	6063      	str	r3, [r4, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	9206      	str	r2, [sp, #24]
 8005054:	aa0e      	add	r2, sp, #56	; 0x38
 8005056:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800505a:	aa0d      	add	r2, sp, #52	; 0x34
 800505c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005060:	9203      	str	r2, [sp, #12]
 8005062:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005066:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	4642      	mov	r2, r8
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	4628      	mov	r0, r5
 8005074:	4653      	mov	r3, sl
 8005076:	910b      	str	r1, [sp, #44]	; 0x2c
 8005078:	f7ff fed4 	bl	8004e24 <__cvt>
 800507c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800507e:	4680      	mov	r8, r0
 8005080:	2947      	cmp	r1, #71	; 0x47
 8005082:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005084:	d108      	bne.n	8005098 <_printf_float+0x138>
 8005086:	1cc8      	adds	r0, r1, #3
 8005088:	db02      	blt.n	8005090 <_printf_float+0x130>
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	4299      	cmp	r1, r3
 800508e:	dd40      	ble.n	8005112 <_printf_float+0x1b2>
 8005090:	f1a9 0902 	sub.w	r9, r9, #2
 8005094:	fa5f f989 	uxtb.w	r9, r9
 8005098:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800509c:	d81f      	bhi.n	80050de <_printf_float+0x17e>
 800509e:	464a      	mov	r2, r9
 80050a0:	3901      	subs	r1, #1
 80050a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050a6:	910d      	str	r1, [sp, #52]	; 0x34
 80050a8:	f7ff ff1b 	bl	8004ee2 <__exponent>
 80050ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ae:	4682      	mov	sl, r0
 80050b0:	1813      	adds	r3, r2, r0
 80050b2:	2a01      	cmp	r2, #1
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	dc02      	bgt.n	80050be <_printf_float+0x15e>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	07d2      	lsls	r2, r2, #31
 80050bc:	d501      	bpl.n	80050c2 <_printf_float+0x162>
 80050be:	3301      	adds	r3, #1
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d09b      	beq.n	8005002 <_printf_float+0xa2>
 80050ca:	232d      	movs	r3, #45	; 0x2d
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	e797      	b.n	8005002 <_printf_float+0xa2>
 80050d2:	2947      	cmp	r1, #71	; 0x47
 80050d4:	d1bc      	bne.n	8005050 <_printf_float+0xf0>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ba      	bne.n	8005050 <_printf_float+0xf0>
 80050da:	2301      	movs	r3, #1
 80050dc:	e7b7      	b.n	800504e <_printf_float+0xee>
 80050de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80050e2:	d118      	bne.n	8005116 <_printf_float+0x1b6>
 80050e4:	2900      	cmp	r1, #0
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	dd0b      	ble.n	8005102 <_printf_float+0x1a2>
 80050ea:	6121      	str	r1, [r4, #16]
 80050ec:	b913      	cbnz	r3, 80050f4 <_printf_float+0x194>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	07d0      	lsls	r0, r2, #31
 80050f2:	d502      	bpl.n	80050fa <_printf_float+0x19a>
 80050f4:	3301      	adds	r3, #1
 80050f6:	440b      	add	r3, r1
 80050f8:	6123      	str	r3, [r4, #16]
 80050fa:	f04f 0a00 	mov.w	sl, #0
 80050fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005100:	e7df      	b.n	80050c2 <_printf_float+0x162>
 8005102:	b913      	cbnz	r3, 800510a <_printf_float+0x1aa>
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	07d2      	lsls	r2, r2, #31
 8005108:	d501      	bpl.n	800510e <_printf_float+0x1ae>
 800510a:	3302      	adds	r3, #2
 800510c:	e7f4      	b.n	80050f8 <_printf_float+0x198>
 800510e:	2301      	movs	r3, #1
 8005110:	e7f2      	b.n	80050f8 <_printf_float+0x198>
 8005112:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005118:	4299      	cmp	r1, r3
 800511a:	db05      	blt.n	8005128 <_printf_float+0x1c8>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	6121      	str	r1, [r4, #16]
 8005120:	07d8      	lsls	r0, r3, #31
 8005122:	d5ea      	bpl.n	80050fa <_printf_float+0x19a>
 8005124:	1c4b      	adds	r3, r1, #1
 8005126:	e7e7      	b.n	80050f8 <_printf_float+0x198>
 8005128:	2900      	cmp	r1, #0
 800512a:	bfcc      	ite	gt
 800512c:	2201      	movgt	r2, #1
 800512e:	f1c1 0202 	rsble	r2, r1, #2
 8005132:	4413      	add	r3, r2
 8005134:	e7e0      	b.n	80050f8 <_printf_float+0x198>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	055a      	lsls	r2, r3, #21
 800513a:	d407      	bmi.n	800514c <_printf_float+0x1ec>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	4642      	mov	r2, r8
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	d12b      	bne.n	80051a2 <_printf_float+0x242>
 800514a:	e764      	b.n	8005016 <_printf_float+0xb6>
 800514c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005150:	f240 80dd 	bls.w	800530e <_printf_float+0x3ae>
 8005154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005158:	2200      	movs	r2, #0
 800515a:	2300      	movs	r3, #0
 800515c:	f7fb fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8005160:	2800      	cmp	r0, #0
 8005162:	d033      	beq.n	80051cc <_printf_float+0x26c>
 8005164:	2301      	movs	r3, #1
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	4a35      	ldr	r2, [pc, #212]	; (8005240 <_printf_float+0x2e0>)
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	f43f af51 	beq.w	8005016 <_printf_float+0xb6>
 8005174:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005178:	429a      	cmp	r2, r3
 800517a:	db02      	blt.n	8005182 <_printf_float+0x222>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	07d8      	lsls	r0, r3, #31
 8005180:	d50f      	bpl.n	80051a2 <_printf_float+0x242>
 8005182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f af42 	beq.w	8005016 <_printf_float+0xb6>
 8005192:	f04f 0800 	mov.w	r8, #0
 8005196:	f104 091a 	add.w	r9, r4, #26
 800519a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800519c:	3b01      	subs	r3, #1
 800519e:	4543      	cmp	r3, r8
 80051a0:	dc09      	bgt.n	80051b6 <_printf_float+0x256>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	079b      	lsls	r3, r3, #30
 80051a6:	f100 8102 	bmi.w	80053ae <_printf_float+0x44e>
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051ae:	4298      	cmp	r0, r3
 80051b0:	bfb8      	it	lt
 80051b2:	4618      	movlt	r0, r3
 80051b4:	e731      	b.n	800501a <_printf_float+0xba>
 80051b6:	2301      	movs	r3, #1
 80051b8:	464a      	mov	r2, r9
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f af28 	beq.w	8005016 <_printf_float+0xb6>
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	e7e6      	b.n	800519a <_printf_float+0x23a>
 80051cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	dc38      	bgt.n	8005244 <_printf_float+0x2e4>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	4a19      	ldr	r2, [pc, #100]	; (8005240 <_printf_float+0x2e0>)
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f af1a 	beq.w	8005016 <_printf_float+0xb6>
 80051e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051e6:	4313      	orrs	r3, r2
 80051e8:	d102      	bne.n	80051f0 <_printf_float+0x290>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	07d9      	lsls	r1, r3, #31
 80051ee:	d5d8      	bpl.n	80051a2 <_printf_float+0x242>
 80051f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	f43f af0b 	beq.w	8005016 <_printf_float+0xb6>
 8005200:	f04f 0900 	mov.w	r9, #0
 8005204:	f104 0a1a 	add.w	sl, r4, #26
 8005208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800520a:	425b      	negs	r3, r3
 800520c:	454b      	cmp	r3, r9
 800520e:	dc01      	bgt.n	8005214 <_printf_float+0x2b4>
 8005210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005212:	e794      	b.n	800513e <_printf_float+0x1de>
 8005214:	2301      	movs	r3, #1
 8005216:	4652      	mov	r2, sl
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f aef9 	beq.w	8005016 <_printf_float+0xb6>
 8005224:	f109 0901 	add.w	r9, r9, #1
 8005228:	e7ee      	b.n	8005208 <_printf_float+0x2a8>
 800522a:	bf00      	nop
 800522c:	7fefffff 	.word	0x7fefffff
 8005230:	08007990 	.word	0x08007990
 8005234:	08007994 	.word	0x08007994
 8005238:	0800799c 	.word	0x0800799c
 800523c:	08007998 	.word	0x08007998
 8005240:	080079a0 	.word	0x080079a0
 8005244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005248:	429a      	cmp	r2, r3
 800524a:	bfa8      	it	ge
 800524c:	461a      	movge	r2, r3
 800524e:	2a00      	cmp	r2, #0
 8005250:	4691      	mov	r9, r2
 8005252:	dc37      	bgt.n	80052c4 <_printf_float+0x364>
 8005254:	f04f 0b00 	mov.w	fp, #0
 8005258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800525c:	f104 021a 	add.w	r2, r4, #26
 8005260:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005264:	ebaa 0309 	sub.w	r3, sl, r9
 8005268:	455b      	cmp	r3, fp
 800526a:	dc33      	bgt.n	80052d4 <_printf_float+0x374>
 800526c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005270:	429a      	cmp	r2, r3
 8005272:	db3b      	blt.n	80052ec <_printf_float+0x38c>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07da      	lsls	r2, r3, #31
 8005278:	d438      	bmi.n	80052ec <_printf_float+0x38c>
 800527a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800527c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800527e:	eba3 020a 	sub.w	r2, r3, sl
 8005282:	eba3 0901 	sub.w	r9, r3, r1
 8005286:	4591      	cmp	r9, r2
 8005288:	bfa8      	it	ge
 800528a:	4691      	movge	r9, r2
 800528c:	f1b9 0f00 	cmp.w	r9, #0
 8005290:	dc34      	bgt.n	80052fc <_printf_float+0x39c>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529a:	f104 0a1a 	add.w	sl, r4, #26
 800529e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	eba3 0309 	sub.w	r3, r3, r9
 80052a8:	4543      	cmp	r3, r8
 80052aa:	f77f af7a 	ble.w	80051a2 <_printf_float+0x242>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4652      	mov	r2, sl
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f aeac 	beq.w	8005016 <_printf_float+0xb6>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	e7ec      	b.n	800529e <_printf_float+0x33e>
 80052c4:	4613      	mov	r3, r2
 80052c6:	4631      	mov	r1, r6
 80052c8:	4642      	mov	r2, r8
 80052ca:	4628      	mov	r0, r5
 80052cc:	47b8      	blx	r7
 80052ce:	3001      	adds	r0, #1
 80052d0:	d1c0      	bne.n	8005254 <_printf_float+0x2f4>
 80052d2:	e6a0      	b.n	8005016 <_printf_float+0xb6>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	920b      	str	r2, [sp, #44]	; 0x2c
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f ae99 	beq.w	8005016 <_printf_float+0xb6>
 80052e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052e6:	f10b 0b01 	add.w	fp, fp, #1
 80052ea:	e7b9      	b.n	8005260 <_printf_float+0x300>
 80052ec:	4631      	mov	r1, r6
 80052ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b8      	blx	r7
 80052f6:	3001      	adds	r0, #1
 80052f8:	d1bf      	bne.n	800527a <_printf_float+0x31a>
 80052fa:	e68c      	b.n	8005016 <_printf_float+0xb6>
 80052fc:	464b      	mov	r3, r9
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	eb08 020a 	add.w	r2, r8, sl
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	d1c2      	bne.n	8005292 <_printf_float+0x332>
 800530c:	e683      	b.n	8005016 <_printf_float+0xb6>
 800530e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005310:	2a01      	cmp	r2, #1
 8005312:	dc01      	bgt.n	8005318 <_printf_float+0x3b8>
 8005314:	07db      	lsls	r3, r3, #31
 8005316:	d537      	bpl.n	8005388 <_printf_float+0x428>
 8005318:	2301      	movs	r3, #1
 800531a:	4642      	mov	r2, r8
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f ae77 	beq.w	8005016 <_printf_float+0xb6>
 8005328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532c:	4631      	mov	r1, r6
 800532e:	4628      	mov	r0, r5
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	f43f ae6f 	beq.w	8005016 <_printf_float+0xb6>
 8005338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800533c:	2200      	movs	r2, #0
 800533e:	2300      	movs	r3, #0
 8005340:	f7fb fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8005344:	b9d8      	cbnz	r0, 800537e <_printf_float+0x41e>
 8005346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005348:	f108 0201 	add.w	r2, r8, #1
 800534c:	3b01      	subs	r3, #1
 800534e:	4631      	mov	r1, r6
 8005350:	4628      	mov	r0, r5
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	d10e      	bne.n	8005376 <_printf_float+0x416>
 8005358:	e65d      	b.n	8005016 <_printf_float+0xb6>
 800535a:	2301      	movs	r3, #1
 800535c:	464a      	mov	r2, r9
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae56 	beq.w	8005016 <_printf_float+0xb6>
 800536a:	f108 0801 	add.w	r8, r8, #1
 800536e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005370:	3b01      	subs	r3, #1
 8005372:	4543      	cmp	r3, r8
 8005374:	dcf1      	bgt.n	800535a <_printf_float+0x3fa>
 8005376:	4653      	mov	r3, sl
 8005378:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800537c:	e6e0      	b.n	8005140 <_printf_float+0x1e0>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	f104 091a 	add.w	r9, r4, #26
 8005386:	e7f2      	b.n	800536e <_printf_float+0x40e>
 8005388:	2301      	movs	r3, #1
 800538a:	4642      	mov	r2, r8
 800538c:	e7df      	b.n	800534e <_printf_float+0x3ee>
 800538e:	2301      	movs	r3, #1
 8005390:	464a      	mov	r2, r9
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f ae3c 	beq.w	8005016 <_printf_float+0xb6>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80053a6:	1a5b      	subs	r3, r3, r1
 80053a8:	4543      	cmp	r3, r8
 80053aa:	dcf0      	bgt.n	800538e <_printf_float+0x42e>
 80053ac:	e6fd      	b.n	80051aa <_printf_float+0x24a>
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	f104 0919 	add.w	r9, r4, #25
 80053b6:	e7f4      	b.n	80053a2 <_printf_float+0x442>

080053b8 <_printf_common>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	4616      	mov	r6, r2
 80053be:	4699      	mov	r9, r3
 80053c0:	688a      	ldr	r2, [r1, #8]
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4607      	mov	r7, r0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bfb8      	it	lt
 80053ca:	4613      	movlt	r3, r2
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053d2:	460c      	mov	r4, r1
 80053d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d8:	b10a      	cbz	r2, 80053de <_printf_common+0x26>
 80053da:	3301      	adds	r3, #1
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	0699      	lsls	r1, r3, #26
 80053e2:	bf42      	ittt	mi
 80053e4:	6833      	ldrmi	r3, [r6, #0]
 80053e6:	3302      	addmi	r3, #2
 80053e8:	6033      	strmi	r3, [r6, #0]
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	f015 0506 	ands.w	r5, r5, #6
 80053f0:	d106      	bne.n	8005400 <_printf_common+0x48>
 80053f2:	f104 0a19 	add.w	sl, r4, #25
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	6832      	ldr	r2, [r6, #0]
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dc28      	bgt.n	8005452 <_printf_common+0x9a>
 8005400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005404:	1e13      	subs	r3, r2, #0
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	bf18      	it	ne
 800540a:	2301      	movne	r3, #1
 800540c:	0692      	lsls	r2, r2, #26
 800540e:	d42d      	bmi.n	800546c <_printf_common+0xb4>
 8005410:	4649      	mov	r1, r9
 8005412:	4638      	mov	r0, r7
 8005414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d020      	beq.n	8005460 <_printf_common+0xa8>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	68e5      	ldr	r5, [r4, #12]
 8005422:	f003 0306 	and.w	r3, r3, #6
 8005426:	2b04      	cmp	r3, #4
 8005428:	bf18      	it	ne
 800542a:	2500      	movne	r5, #0
 800542c:	6832      	ldr	r2, [r6, #0]
 800542e:	f04f 0600 	mov.w	r6, #0
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	bf08      	it	eq
 8005436:	1aad      	subeq	r5, r5, r2
 8005438:	6922      	ldr	r2, [r4, #16]
 800543a:	bf08      	it	eq
 800543c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005440:	4293      	cmp	r3, r2
 8005442:	bfc4      	itt	gt
 8005444:	1a9b      	subgt	r3, r3, r2
 8005446:	18ed      	addgt	r5, r5, r3
 8005448:	341a      	adds	r4, #26
 800544a:	42b5      	cmp	r5, r6
 800544c:	d11a      	bne.n	8005484 <_printf_common+0xcc>
 800544e:	2000      	movs	r0, #0
 8005450:	e008      	b.n	8005464 <_printf_common+0xac>
 8005452:	2301      	movs	r3, #1
 8005454:	4652      	mov	r2, sl
 8005456:	4649      	mov	r1, r9
 8005458:	4638      	mov	r0, r7
 800545a:	47c0      	blx	r8
 800545c:	3001      	adds	r0, #1
 800545e:	d103      	bne.n	8005468 <_printf_common+0xb0>
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	3501      	adds	r5, #1
 800546a:	e7c4      	b.n	80053f6 <_printf_common+0x3e>
 800546c:	2030      	movs	r0, #48	; 0x30
 800546e:	18e1      	adds	r1, r4, r3
 8005470:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800547a:	4422      	add	r2, r4
 800547c:	3302      	adds	r3, #2
 800547e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005482:	e7c5      	b.n	8005410 <_printf_common+0x58>
 8005484:	2301      	movs	r3, #1
 8005486:	4622      	mov	r2, r4
 8005488:	4649      	mov	r1, r9
 800548a:	4638      	mov	r0, r7
 800548c:	47c0      	blx	r8
 800548e:	3001      	adds	r0, #1
 8005490:	d0e6      	beq.n	8005460 <_printf_common+0xa8>
 8005492:	3601      	adds	r6, #1
 8005494:	e7d9      	b.n	800544a <_printf_common+0x92>
	...

08005498 <_printf_i>:
 8005498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800549c:	7e0f      	ldrb	r7, [r1, #24]
 800549e:	4691      	mov	r9, r2
 80054a0:	2f78      	cmp	r7, #120	; 0x78
 80054a2:	4680      	mov	r8, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	469a      	mov	sl, r3
 80054a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ae:	d807      	bhi.n	80054c0 <_printf_i+0x28>
 80054b0:	2f62      	cmp	r7, #98	; 0x62
 80054b2:	d80a      	bhi.n	80054ca <_printf_i+0x32>
 80054b4:	2f00      	cmp	r7, #0
 80054b6:	f000 80d9 	beq.w	800566c <_printf_i+0x1d4>
 80054ba:	2f58      	cmp	r7, #88	; 0x58
 80054bc:	f000 80a4 	beq.w	8005608 <_printf_i+0x170>
 80054c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054c8:	e03a      	b.n	8005540 <_printf_i+0xa8>
 80054ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ce:	2b15      	cmp	r3, #21
 80054d0:	d8f6      	bhi.n	80054c0 <_printf_i+0x28>
 80054d2:	a101      	add	r1, pc, #4	; (adr r1, 80054d8 <_printf_i+0x40>)
 80054d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054d8:	08005531 	.word	0x08005531
 80054dc:	08005545 	.word	0x08005545
 80054e0:	080054c1 	.word	0x080054c1
 80054e4:	080054c1 	.word	0x080054c1
 80054e8:	080054c1 	.word	0x080054c1
 80054ec:	080054c1 	.word	0x080054c1
 80054f0:	08005545 	.word	0x08005545
 80054f4:	080054c1 	.word	0x080054c1
 80054f8:	080054c1 	.word	0x080054c1
 80054fc:	080054c1 	.word	0x080054c1
 8005500:	080054c1 	.word	0x080054c1
 8005504:	08005653 	.word	0x08005653
 8005508:	08005575 	.word	0x08005575
 800550c:	08005635 	.word	0x08005635
 8005510:	080054c1 	.word	0x080054c1
 8005514:	080054c1 	.word	0x080054c1
 8005518:	08005675 	.word	0x08005675
 800551c:	080054c1 	.word	0x080054c1
 8005520:	08005575 	.word	0x08005575
 8005524:	080054c1 	.word	0x080054c1
 8005528:	080054c1 	.word	0x080054c1
 800552c:	0800563d 	.word	0x0800563d
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	1d1a      	adds	r2, r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	602a      	str	r2, [r5, #0]
 8005538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800553c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005540:	2301      	movs	r3, #1
 8005542:	e0a4      	b.n	800568e <_printf_i+0x1f6>
 8005544:	6820      	ldr	r0, [r4, #0]
 8005546:	6829      	ldr	r1, [r5, #0]
 8005548:	0606      	lsls	r6, r0, #24
 800554a:	f101 0304 	add.w	r3, r1, #4
 800554e:	d50a      	bpl.n	8005566 <_printf_i+0xce>
 8005550:	680e      	ldr	r6, [r1, #0]
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	2e00      	cmp	r6, #0
 8005556:	da03      	bge.n	8005560 <_printf_i+0xc8>
 8005558:	232d      	movs	r3, #45	; 0x2d
 800555a:	4276      	negs	r6, r6
 800555c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005560:	230a      	movs	r3, #10
 8005562:	485e      	ldr	r0, [pc, #376]	; (80056dc <_printf_i+0x244>)
 8005564:	e019      	b.n	800559a <_printf_i+0x102>
 8005566:	680e      	ldr	r6, [r1, #0]
 8005568:	f010 0f40 	tst.w	r0, #64	; 0x40
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	bf18      	it	ne
 8005570:	b236      	sxthne	r6, r6
 8005572:	e7ef      	b.n	8005554 <_printf_i+0xbc>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	1d19      	adds	r1, r3, #4
 800557a:	6029      	str	r1, [r5, #0]
 800557c:	0601      	lsls	r1, r0, #24
 800557e:	d501      	bpl.n	8005584 <_printf_i+0xec>
 8005580:	681e      	ldr	r6, [r3, #0]
 8005582:	e002      	b.n	800558a <_printf_i+0xf2>
 8005584:	0646      	lsls	r6, r0, #25
 8005586:	d5fb      	bpl.n	8005580 <_printf_i+0xe8>
 8005588:	881e      	ldrh	r6, [r3, #0]
 800558a:	2f6f      	cmp	r7, #111	; 0x6f
 800558c:	bf0c      	ite	eq
 800558e:	2308      	moveq	r3, #8
 8005590:	230a      	movne	r3, #10
 8005592:	4852      	ldr	r0, [pc, #328]	; (80056dc <_printf_i+0x244>)
 8005594:	2100      	movs	r1, #0
 8005596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800559a:	6865      	ldr	r5, [r4, #4]
 800559c:	2d00      	cmp	r5, #0
 800559e:	bfa8      	it	ge
 80055a0:	6821      	ldrge	r1, [r4, #0]
 80055a2:	60a5      	str	r5, [r4, #8]
 80055a4:	bfa4      	itt	ge
 80055a6:	f021 0104 	bicge.w	r1, r1, #4
 80055aa:	6021      	strge	r1, [r4, #0]
 80055ac:	b90e      	cbnz	r6, 80055b2 <_printf_i+0x11a>
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	d04d      	beq.n	800564e <_printf_i+0x1b6>
 80055b2:	4615      	mov	r5, r2
 80055b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80055b8:	fb03 6711 	mls	r7, r3, r1, r6
 80055bc:	5dc7      	ldrb	r7, [r0, r7]
 80055be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055c2:	4637      	mov	r7, r6
 80055c4:	42bb      	cmp	r3, r7
 80055c6:	460e      	mov	r6, r1
 80055c8:	d9f4      	bls.n	80055b4 <_printf_i+0x11c>
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d10b      	bne.n	80055e6 <_printf_i+0x14e>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	07de      	lsls	r6, r3, #31
 80055d2:	d508      	bpl.n	80055e6 <_printf_i+0x14e>
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	6861      	ldr	r1, [r4, #4]
 80055d8:	4299      	cmp	r1, r3
 80055da:	bfde      	ittt	le
 80055dc:	2330      	movle	r3, #48	; 0x30
 80055de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055e6:	1b52      	subs	r2, r2, r5
 80055e8:	6122      	str	r2, [r4, #16]
 80055ea:	464b      	mov	r3, r9
 80055ec:	4621      	mov	r1, r4
 80055ee:	4640      	mov	r0, r8
 80055f0:	f8cd a000 	str.w	sl, [sp]
 80055f4:	aa03      	add	r2, sp, #12
 80055f6:	f7ff fedf 	bl	80053b8 <_printf_common>
 80055fa:	3001      	adds	r0, #1
 80055fc:	d14c      	bne.n	8005698 <_printf_i+0x200>
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005602:	b004      	add	sp, #16
 8005604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005608:	4834      	ldr	r0, [pc, #208]	; (80056dc <_printf_i+0x244>)
 800560a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800560e:	6829      	ldr	r1, [r5, #0]
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f851 6b04 	ldr.w	r6, [r1], #4
 8005616:	6029      	str	r1, [r5, #0]
 8005618:	061d      	lsls	r5, r3, #24
 800561a:	d514      	bpl.n	8005646 <_printf_i+0x1ae>
 800561c:	07df      	lsls	r7, r3, #31
 800561e:	bf44      	itt	mi
 8005620:	f043 0320 	orrmi.w	r3, r3, #32
 8005624:	6023      	strmi	r3, [r4, #0]
 8005626:	b91e      	cbnz	r6, 8005630 <_printf_i+0x198>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f023 0320 	bic.w	r3, r3, #32
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	2310      	movs	r3, #16
 8005632:	e7af      	b.n	8005594 <_printf_i+0xfc>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	f043 0320 	orr.w	r3, r3, #32
 800563a:	6023      	str	r3, [r4, #0]
 800563c:	2378      	movs	r3, #120	; 0x78
 800563e:	4828      	ldr	r0, [pc, #160]	; (80056e0 <_printf_i+0x248>)
 8005640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005644:	e7e3      	b.n	800560e <_printf_i+0x176>
 8005646:	0659      	lsls	r1, r3, #25
 8005648:	bf48      	it	mi
 800564a:	b2b6      	uxthmi	r6, r6
 800564c:	e7e6      	b.n	800561c <_printf_i+0x184>
 800564e:	4615      	mov	r5, r2
 8005650:	e7bb      	b.n	80055ca <_printf_i+0x132>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	6826      	ldr	r6, [r4, #0]
 8005656:	1d18      	adds	r0, r3, #4
 8005658:	6961      	ldr	r1, [r4, #20]
 800565a:	6028      	str	r0, [r5, #0]
 800565c:	0635      	lsls	r5, r6, #24
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	d501      	bpl.n	8005666 <_printf_i+0x1ce>
 8005662:	6019      	str	r1, [r3, #0]
 8005664:	e002      	b.n	800566c <_printf_i+0x1d4>
 8005666:	0670      	lsls	r0, r6, #25
 8005668:	d5fb      	bpl.n	8005662 <_printf_i+0x1ca>
 800566a:	8019      	strh	r1, [r3, #0]
 800566c:	2300      	movs	r3, #0
 800566e:	4615      	mov	r5, r2
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	e7ba      	b.n	80055ea <_printf_i+0x152>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	2100      	movs	r1, #0
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	602a      	str	r2, [r5, #0]
 800567c:	681d      	ldr	r5, [r3, #0]
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	4628      	mov	r0, r5
 8005682:	f000 ff3b 	bl	80064fc <memchr>
 8005686:	b108      	cbz	r0, 800568c <_printf_i+0x1f4>
 8005688:	1b40      	subs	r0, r0, r5
 800568a:	6060      	str	r0, [r4, #4]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	2300      	movs	r3, #0
 8005692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005696:	e7a8      	b.n	80055ea <_printf_i+0x152>
 8005698:	462a      	mov	r2, r5
 800569a:	4649      	mov	r1, r9
 800569c:	4640      	mov	r0, r8
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	47d0      	blx	sl
 80056a2:	3001      	adds	r0, #1
 80056a4:	d0ab      	beq.n	80055fe <_printf_i+0x166>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	079b      	lsls	r3, r3, #30
 80056aa:	d413      	bmi.n	80056d4 <_printf_i+0x23c>
 80056ac:	68e0      	ldr	r0, [r4, #12]
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	4298      	cmp	r0, r3
 80056b2:	bfb8      	it	lt
 80056b4:	4618      	movlt	r0, r3
 80056b6:	e7a4      	b.n	8005602 <_printf_i+0x16a>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4632      	mov	r2, r6
 80056bc:	4649      	mov	r1, r9
 80056be:	4640      	mov	r0, r8
 80056c0:	47d0      	blx	sl
 80056c2:	3001      	adds	r0, #1
 80056c4:	d09b      	beq.n	80055fe <_printf_i+0x166>
 80056c6:	3501      	adds	r5, #1
 80056c8:	68e3      	ldr	r3, [r4, #12]
 80056ca:	9903      	ldr	r1, [sp, #12]
 80056cc:	1a5b      	subs	r3, r3, r1
 80056ce:	42ab      	cmp	r3, r5
 80056d0:	dcf2      	bgt.n	80056b8 <_printf_i+0x220>
 80056d2:	e7eb      	b.n	80056ac <_printf_i+0x214>
 80056d4:	2500      	movs	r5, #0
 80056d6:	f104 0619 	add.w	r6, r4, #25
 80056da:	e7f5      	b.n	80056c8 <_printf_i+0x230>
 80056dc:	080079a2 	.word	0x080079a2
 80056e0:	080079b3 	.word	0x080079b3

080056e4 <_strtol_l.constprop.0>:
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ea:	4680      	mov	r8, r0
 80056ec:	d001      	beq.n	80056f2 <_strtol_l.constprop.0+0xe>
 80056ee:	2b24      	cmp	r3, #36	; 0x24
 80056f0:	d906      	bls.n	8005700 <_strtol_l.constprop.0+0x1c>
 80056f2:	f7ff fb65 	bl	8004dc0 <__errno>
 80056f6:	2316      	movs	r3, #22
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	2000      	movs	r0, #0
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	460d      	mov	r5, r1
 8005702:	4f35      	ldr	r7, [pc, #212]	; (80057d8 <_strtol_l.constprop.0+0xf4>)
 8005704:	4628      	mov	r0, r5
 8005706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800570a:	5de6      	ldrb	r6, [r4, r7]
 800570c:	f016 0608 	ands.w	r6, r6, #8
 8005710:	d1f8      	bne.n	8005704 <_strtol_l.constprop.0+0x20>
 8005712:	2c2d      	cmp	r4, #45	; 0x2d
 8005714:	d12f      	bne.n	8005776 <_strtol_l.constprop.0+0x92>
 8005716:	2601      	movs	r6, #1
 8005718:	782c      	ldrb	r4, [r5, #0]
 800571a:	1c85      	adds	r5, r0, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d057      	beq.n	80057d0 <_strtol_l.constprop.0+0xec>
 8005720:	2b10      	cmp	r3, #16
 8005722:	d109      	bne.n	8005738 <_strtol_l.constprop.0+0x54>
 8005724:	2c30      	cmp	r4, #48	; 0x30
 8005726:	d107      	bne.n	8005738 <_strtol_l.constprop.0+0x54>
 8005728:	7828      	ldrb	r0, [r5, #0]
 800572a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800572e:	2858      	cmp	r0, #88	; 0x58
 8005730:	d149      	bne.n	80057c6 <_strtol_l.constprop.0+0xe2>
 8005732:	2310      	movs	r3, #16
 8005734:	786c      	ldrb	r4, [r5, #1]
 8005736:	3502      	adds	r5, #2
 8005738:	2700      	movs	r7, #0
 800573a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800573e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005742:	fbbe f9f3 	udiv	r9, lr, r3
 8005746:	4638      	mov	r0, r7
 8005748:	fb03 ea19 	mls	sl, r3, r9, lr
 800574c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005750:	f1bc 0f09 	cmp.w	ip, #9
 8005754:	d814      	bhi.n	8005780 <_strtol_l.constprop.0+0x9c>
 8005756:	4664      	mov	r4, ip
 8005758:	42a3      	cmp	r3, r4
 800575a:	dd22      	ble.n	80057a2 <_strtol_l.constprop.0+0xbe>
 800575c:	2f00      	cmp	r7, #0
 800575e:	db1d      	blt.n	800579c <_strtol_l.constprop.0+0xb8>
 8005760:	4581      	cmp	r9, r0
 8005762:	d31b      	bcc.n	800579c <_strtol_l.constprop.0+0xb8>
 8005764:	d101      	bne.n	800576a <_strtol_l.constprop.0+0x86>
 8005766:	45a2      	cmp	sl, r4
 8005768:	db18      	blt.n	800579c <_strtol_l.constprop.0+0xb8>
 800576a:	2701      	movs	r7, #1
 800576c:	fb00 4003 	mla	r0, r0, r3, r4
 8005770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005774:	e7ea      	b.n	800574c <_strtol_l.constprop.0+0x68>
 8005776:	2c2b      	cmp	r4, #43	; 0x2b
 8005778:	bf04      	itt	eq
 800577a:	782c      	ldrbeq	r4, [r5, #0]
 800577c:	1c85      	addeq	r5, r0, #2
 800577e:	e7cd      	b.n	800571c <_strtol_l.constprop.0+0x38>
 8005780:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005784:	f1bc 0f19 	cmp.w	ip, #25
 8005788:	d801      	bhi.n	800578e <_strtol_l.constprop.0+0xaa>
 800578a:	3c37      	subs	r4, #55	; 0x37
 800578c:	e7e4      	b.n	8005758 <_strtol_l.constprop.0+0x74>
 800578e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005792:	f1bc 0f19 	cmp.w	ip, #25
 8005796:	d804      	bhi.n	80057a2 <_strtol_l.constprop.0+0xbe>
 8005798:	3c57      	subs	r4, #87	; 0x57
 800579a:	e7dd      	b.n	8005758 <_strtol_l.constprop.0+0x74>
 800579c:	f04f 37ff 	mov.w	r7, #4294967295
 80057a0:	e7e6      	b.n	8005770 <_strtol_l.constprop.0+0x8c>
 80057a2:	2f00      	cmp	r7, #0
 80057a4:	da07      	bge.n	80057b6 <_strtol_l.constprop.0+0xd2>
 80057a6:	2322      	movs	r3, #34	; 0x22
 80057a8:	4670      	mov	r0, lr
 80057aa:	f8c8 3000 	str.w	r3, [r8]
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d0a4      	beq.n	80056fc <_strtol_l.constprop.0+0x18>
 80057b2:	1e69      	subs	r1, r5, #1
 80057b4:	e005      	b.n	80057c2 <_strtol_l.constprop.0+0xde>
 80057b6:	b106      	cbz	r6, 80057ba <_strtol_l.constprop.0+0xd6>
 80057b8:	4240      	negs	r0, r0
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d09e      	beq.n	80056fc <_strtol_l.constprop.0+0x18>
 80057be:	2f00      	cmp	r7, #0
 80057c0:	d1f7      	bne.n	80057b2 <_strtol_l.constprop.0+0xce>
 80057c2:	6011      	str	r1, [r2, #0]
 80057c4:	e79a      	b.n	80056fc <_strtol_l.constprop.0+0x18>
 80057c6:	2430      	movs	r4, #48	; 0x30
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1b5      	bne.n	8005738 <_strtol_l.constprop.0+0x54>
 80057cc:	2308      	movs	r3, #8
 80057ce:	e7b3      	b.n	8005738 <_strtol_l.constprop.0+0x54>
 80057d0:	2c30      	cmp	r4, #48	; 0x30
 80057d2:	d0a9      	beq.n	8005728 <_strtol_l.constprop.0+0x44>
 80057d4:	230a      	movs	r3, #10
 80057d6:	e7af      	b.n	8005738 <_strtol_l.constprop.0+0x54>
 80057d8:	080079c5 	.word	0x080079c5

080057dc <strtol>:
 80057dc:	4613      	mov	r3, r2
 80057de:	460a      	mov	r2, r1
 80057e0:	4601      	mov	r1, r0
 80057e2:	4802      	ldr	r0, [pc, #8]	; (80057ec <strtol+0x10>)
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f7ff bf7d 	b.w	80056e4 <_strtol_l.constprop.0>
 80057ea:	bf00      	nop
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <quorem>:
 80057f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	6903      	ldr	r3, [r0, #16]
 80057f6:	690c      	ldr	r4, [r1, #16]
 80057f8:	4607      	mov	r7, r0
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	f2c0 8082 	blt.w	8005904 <quorem+0x114>
 8005800:	3c01      	subs	r4, #1
 8005802:	f100 0514 	add.w	r5, r0, #20
 8005806:	f101 0814 	add.w	r8, r1, #20
 800580a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005814:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005818:	3301      	adds	r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005820:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005828:	d331      	bcc.n	800588e <quorem+0x9e>
 800582a:	f04f 0e00 	mov.w	lr, #0
 800582e:	4640      	mov	r0, r8
 8005830:	46ac      	mov	ip, r5
 8005832:	46f2      	mov	sl, lr
 8005834:	f850 2b04 	ldr.w	r2, [r0], #4
 8005838:	b293      	uxth	r3, r2
 800583a:	fb06 e303 	mla	r3, r6, r3, lr
 800583e:	0c12      	lsrs	r2, r2, #16
 8005840:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005844:	b29b      	uxth	r3, r3
 8005846:	fb06 e202 	mla	r2, r6, r2, lr
 800584a:	ebaa 0303 	sub.w	r3, sl, r3
 800584e:	f8dc a000 	ldr.w	sl, [ip]
 8005852:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005856:	fa1f fa8a 	uxth.w	sl, sl
 800585a:	4453      	add	r3, sl
 800585c:	f8dc a000 	ldr.w	sl, [ip]
 8005860:	b292      	uxth	r2, r2
 8005862:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005866:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800586a:	b29b      	uxth	r3, r3
 800586c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005870:	4581      	cmp	r9, r0
 8005872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005876:	f84c 3b04 	str.w	r3, [ip], #4
 800587a:	d2db      	bcs.n	8005834 <quorem+0x44>
 800587c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005880:	b92b      	cbnz	r3, 800588e <quorem+0x9e>
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	3b04      	subs	r3, #4
 8005886:	429d      	cmp	r5, r3
 8005888:	461a      	mov	r2, r3
 800588a:	d32f      	bcc.n	80058ec <quorem+0xfc>
 800588c:	613c      	str	r4, [r7, #16]
 800588e:	4638      	mov	r0, r7
 8005890:	f001 f8ce 	bl	8006a30 <__mcmp>
 8005894:	2800      	cmp	r0, #0
 8005896:	db25      	blt.n	80058e4 <quorem+0xf4>
 8005898:	4628      	mov	r0, r5
 800589a:	f04f 0c00 	mov.w	ip, #0
 800589e:	3601      	adds	r6, #1
 80058a0:	f858 1b04 	ldr.w	r1, [r8], #4
 80058a4:	f8d0 e000 	ldr.w	lr, [r0]
 80058a8:	b28b      	uxth	r3, r1
 80058aa:	ebac 0303 	sub.w	r3, ip, r3
 80058ae:	fa1f f28e 	uxth.w	r2, lr
 80058b2:	4413      	add	r3, r2
 80058b4:	0c0a      	lsrs	r2, r1, #16
 80058b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058be:	b29b      	uxth	r3, r3
 80058c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058c4:	45c1      	cmp	r9, r8
 80058c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058ca:	f840 3b04 	str.w	r3, [r0], #4
 80058ce:	d2e7      	bcs.n	80058a0 <quorem+0xb0>
 80058d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058d8:	b922      	cbnz	r2, 80058e4 <quorem+0xf4>
 80058da:	3b04      	subs	r3, #4
 80058dc:	429d      	cmp	r5, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	d30a      	bcc.n	80058f8 <quorem+0x108>
 80058e2:	613c      	str	r4, [r7, #16]
 80058e4:	4630      	mov	r0, r6
 80058e6:	b003      	add	sp, #12
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	3b04      	subs	r3, #4
 80058f0:	2a00      	cmp	r2, #0
 80058f2:	d1cb      	bne.n	800588c <quorem+0x9c>
 80058f4:	3c01      	subs	r4, #1
 80058f6:	e7c6      	b.n	8005886 <quorem+0x96>
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	3b04      	subs	r3, #4
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	d1f0      	bne.n	80058e2 <quorem+0xf2>
 8005900:	3c01      	subs	r4, #1
 8005902:	e7eb      	b.n	80058dc <quorem+0xec>
 8005904:	2000      	movs	r0, #0
 8005906:	e7ee      	b.n	80058e6 <quorem+0xf6>

08005908 <_dtoa_r>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	4616      	mov	r6, r2
 800590e:	461f      	mov	r7, r3
 8005910:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005912:	b099      	sub	sp, #100	; 0x64
 8005914:	4605      	mov	r5, r0
 8005916:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800591a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800591e:	b974      	cbnz	r4, 800593e <_dtoa_r+0x36>
 8005920:	2010      	movs	r0, #16
 8005922:	f000 fde3 	bl	80064ec <malloc>
 8005926:	4602      	mov	r2, r0
 8005928:	6268      	str	r0, [r5, #36]	; 0x24
 800592a:	b920      	cbnz	r0, 8005936 <_dtoa_r+0x2e>
 800592c:	21ea      	movs	r1, #234	; 0xea
 800592e:	4ba8      	ldr	r3, [pc, #672]	; (8005bd0 <_dtoa_r+0x2c8>)
 8005930:	48a8      	ldr	r0, [pc, #672]	; (8005bd4 <_dtoa_r+0x2cc>)
 8005932:	f001 fa81 	bl	8006e38 <__assert_func>
 8005936:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800593a:	6004      	str	r4, [r0, #0]
 800593c:	60c4      	str	r4, [r0, #12]
 800593e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	b151      	cbz	r1, 800595a <_dtoa_r+0x52>
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	2301      	movs	r3, #1
 8005948:	4093      	lsls	r3, r2
 800594a:	604a      	str	r2, [r1, #4]
 800594c:	608b      	str	r3, [r1, #8]
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fe30 	bl	80065b4 <_Bfree>
 8005954:	2200      	movs	r2, #0
 8005956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	1e3b      	subs	r3, r7, #0
 800595c:	bfaf      	iteee	ge
 800595e:	2300      	movge	r3, #0
 8005960:	2201      	movlt	r2, #1
 8005962:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005966:	9305      	strlt	r3, [sp, #20]
 8005968:	bfa8      	it	ge
 800596a:	f8c8 3000 	strge.w	r3, [r8]
 800596e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005972:	4b99      	ldr	r3, [pc, #612]	; (8005bd8 <_dtoa_r+0x2d0>)
 8005974:	bfb8      	it	lt
 8005976:	f8c8 2000 	strlt.w	r2, [r8]
 800597a:	ea33 0309 	bics.w	r3, r3, r9
 800597e:	d119      	bne.n	80059b4 <_dtoa_r+0xac>
 8005980:	f242 730f 	movw	r3, #9999	; 0x270f
 8005984:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800598c:	4333      	orrs	r3, r6
 800598e:	f000 857f 	beq.w	8006490 <_dtoa_r+0xb88>
 8005992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005994:	b953      	cbnz	r3, 80059ac <_dtoa_r+0xa4>
 8005996:	4b91      	ldr	r3, [pc, #580]	; (8005bdc <_dtoa_r+0x2d4>)
 8005998:	e022      	b.n	80059e0 <_dtoa_r+0xd8>
 800599a:	4b91      	ldr	r3, [pc, #580]	; (8005be0 <_dtoa_r+0x2d8>)
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	3308      	adds	r3, #8
 80059a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	9803      	ldr	r0, [sp, #12]
 80059a6:	b019      	add	sp, #100	; 0x64
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	4b8b      	ldr	r3, [pc, #556]	; (8005bdc <_dtoa_r+0x2d4>)
 80059ae:	9303      	str	r3, [sp, #12]
 80059b0:	3303      	adds	r3, #3
 80059b2:	e7f5      	b.n	80059a0 <_dtoa_r+0x98>
 80059b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80059bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	f7fa fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80059c8:	4680      	mov	r8, r0
 80059ca:	b158      	cbz	r0, 80059e4 <_dtoa_r+0xdc>
 80059cc:	2301      	movs	r3, #1
 80059ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8558 	beq.w	800648a <_dtoa_r+0xb82>
 80059da:	4882      	ldr	r0, [pc, #520]	; (8005be4 <_dtoa_r+0x2dc>)
 80059dc:	6018      	str	r0, [r3, #0]
 80059de:	1e43      	subs	r3, r0, #1
 80059e0:	9303      	str	r3, [sp, #12]
 80059e2:	e7df      	b.n	80059a4 <_dtoa_r+0x9c>
 80059e4:	ab16      	add	r3, sp, #88	; 0x58
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	ab17      	add	r3, sp, #92	; 0x5c
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4628      	mov	r0, r5
 80059ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059f2:	f001 f8c5 	bl	8006b80 <__d2b>
 80059f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80059fa:	4683      	mov	fp, r0
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	d07f      	beq.n	8005b00 <_dtoa_r+0x1f8>
 8005a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <_dtoa_r+0x2e0>)
 8005a1e:	f7fa fba3 	bl	8000168 <__aeabi_dsub>
 8005a22:	a365      	add	r3, pc, #404	; (adr r3, 8005bb8 <_dtoa_r+0x2b0>)
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f7fa fd56 	bl	80004d8 <__aeabi_dmul>
 8005a2c:	a364      	add	r3, pc, #400	; (adr r3, 8005bc0 <_dtoa_r+0x2b8>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fb9b 	bl	800016c <__adddf3>
 8005a36:	4606      	mov	r6, r0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	460f      	mov	r7, r1
 8005a3c:	f7fa fce2 	bl	8000404 <__aeabi_i2d>
 8005a40:	a361      	add	r3, pc, #388	; (adr r3, 8005bc8 <_dtoa_r+0x2c0>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f7fa fd47 	bl	80004d8 <__aeabi_dmul>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fb8b 	bl	800016c <__adddf3>
 8005a56:	4606      	mov	r6, r0
 8005a58:	460f      	mov	r7, r1
 8005a5a:	f7fa ffed 	bl	8000a38 <__aeabi_d2iz>
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4682      	mov	sl, r0
 8005a62:	2300      	movs	r3, #0
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	f7fa ffa8 	bl	80009bc <__aeabi_dcmplt>
 8005a6c:	b148      	cbz	r0, 8005a82 <_dtoa_r+0x17a>
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f7fa fcc8 	bl	8000404 <__aeabi_i2d>
 8005a74:	4632      	mov	r2, r6
 8005a76:	463b      	mov	r3, r7
 8005a78:	f7fa ff96 	bl	80009a8 <__aeabi_dcmpeq>
 8005a7c:	b908      	cbnz	r0, 8005a82 <_dtoa_r+0x17a>
 8005a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a82:	f1ba 0f16 	cmp.w	sl, #22
 8005a86:	d858      	bhi.n	8005b3a <_dtoa_r+0x232>
 8005a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a8c:	4b57      	ldr	r3, [pc, #348]	; (8005bec <_dtoa_r+0x2e4>)
 8005a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f7fa ff91 	bl	80009bc <__aeabi_dcmplt>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d04f      	beq.n	8005b3e <_dtoa_r+0x236>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005aa8:	1b1c      	subs	r4, r3, r4
 8005aaa:	1e63      	subs	r3, r4, #1
 8005aac:	9309      	str	r3, [sp, #36]	; 0x24
 8005aae:	bf49      	itett	mi
 8005ab0:	f1c4 0301 	rsbmi	r3, r4, #1
 8005ab4:	2300      	movpl	r3, #0
 8005ab6:	9306      	strmi	r3, [sp, #24]
 8005ab8:	2300      	movmi	r3, #0
 8005aba:	bf54      	ite	pl
 8005abc:	9306      	strpl	r3, [sp, #24]
 8005abe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ac0:	f1ba 0f00 	cmp.w	sl, #0
 8005ac4:	db3d      	blt.n	8005b42 <_dtoa_r+0x23a>
 8005ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005acc:	4453      	add	r3, sl
 8005ace:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	f200 808c 	bhi.w	8005bf4 <_dtoa_r+0x2ec>
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	bfc4      	itt	gt
 8005ae0:	3b04      	subgt	r3, #4
 8005ae2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ae6:	bfc8      	it	gt
 8005ae8:	2400      	movgt	r4, #0
 8005aea:	f1a3 0302 	sub.w	r3, r3, #2
 8005aee:	bfd8      	it	le
 8005af0:	2401      	movle	r4, #1
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	f200 808a 	bhi.w	8005c0c <_dtoa_r+0x304>
 8005af8:	e8df f003 	tbb	[pc, r3]
 8005afc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005b00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b04:	441c      	add	r4, r3
 8005b06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	bfc3      	ittte	gt
 8005b0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b12:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005b16:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b1a:	f1c3 0320 	rsble	r3, r3, #32
 8005b1e:	bfc6      	itte	gt
 8005b20:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b24:	4318      	orrgt	r0, r3
 8005b26:	fa06 f003 	lslle.w	r0, r6, r3
 8005b2a:	f7fa fc5b 	bl	80003e4 <__aeabi_ui2d>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005b34:	3c01      	subs	r4, #1
 8005b36:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b38:	e76f      	b.n	8005a1a <_dtoa_r+0x112>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7b2      	b.n	8005aa4 <_dtoa_r+0x19c>
 8005b3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b40:	e7b1      	b.n	8005aa6 <_dtoa_r+0x19e>
 8005b42:	9b06      	ldr	r3, [sp, #24]
 8005b44:	eba3 030a 	sub.w	r3, r3, sl
 8005b48:	9306      	str	r3, [sp, #24]
 8005b4a:	f1ca 0300 	rsb	r3, sl, #0
 8005b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b50:	2300      	movs	r3, #0
 8005b52:	930e      	str	r3, [sp, #56]	; 0x38
 8005b54:	e7be      	b.n	8005ad4 <_dtoa_r+0x1cc>
 8005b56:	2300      	movs	r3, #0
 8005b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dc58      	bgt.n	8005c12 <_dtoa_r+0x30a>
 8005b60:	f04f 0901 	mov.w	r9, #1
 8005b64:	464b      	mov	r3, r9
 8005b66:	f8cd 9020 	str.w	r9, [sp, #32]
 8005b6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005b6e:	2200      	movs	r2, #0
 8005b70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005b72:	6042      	str	r2, [r0, #4]
 8005b74:	2204      	movs	r2, #4
 8005b76:	f102 0614 	add.w	r6, r2, #20
 8005b7a:	429e      	cmp	r6, r3
 8005b7c:	6841      	ldr	r1, [r0, #4]
 8005b7e:	d94e      	bls.n	8005c1e <_dtoa_r+0x316>
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 fcd7 	bl	8006534 <_Balloc>
 8005b86:	9003      	str	r0, [sp, #12]
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d14c      	bne.n	8005c26 <_dtoa_r+0x31e>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b92:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <_dtoa_r+0x2e8>)
 8005b94:	e6cc      	b.n	8005930 <_dtoa_r+0x28>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e7de      	b.n	8005b58 <_dtoa_r+0x250>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ba0:	eb0a 0903 	add.w	r9, sl, r3
 8005ba4:	f109 0301 	add.w	r3, r9, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	9308      	str	r3, [sp, #32]
 8005bac:	bfb8      	it	lt
 8005bae:	2301      	movlt	r3, #1
 8005bb0:	e7dd      	b.n	8005b6e <_dtoa_r+0x266>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7f2      	b.n	8005b9c <_dtoa_r+0x294>
 8005bb6:	bf00      	nop
 8005bb8:	636f4361 	.word	0x636f4361
 8005bbc:	3fd287a7 	.word	0x3fd287a7
 8005bc0:	8b60c8b3 	.word	0x8b60c8b3
 8005bc4:	3fc68a28 	.word	0x3fc68a28
 8005bc8:	509f79fb 	.word	0x509f79fb
 8005bcc:	3fd34413 	.word	0x3fd34413
 8005bd0:	08007ad2 	.word	0x08007ad2
 8005bd4:	08007ae9 	.word	0x08007ae9
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	08007ace 	.word	0x08007ace
 8005be0:	08007ac5 	.word	0x08007ac5
 8005be4:	080079a1 	.word	0x080079a1
 8005be8:	3ff80000 	.word	0x3ff80000
 8005bec:	08007be0 	.word	0x08007be0
 8005bf0:	08007b44 	.word	0x08007b44
 8005bf4:	2401      	movs	r4, #1
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005bfa:	9322      	str	r3, [sp, #136]	; 0x88
 8005bfc:	f04f 39ff 	mov.w	r9, #4294967295
 8005c00:	2200      	movs	r2, #0
 8005c02:	2312      	movs	r3, #18
 8005c04:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c08:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c0a:	e7b0      	b.n	8005b6e <_dtoa_r+0x266>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c10:	e7f4      	b.n	8005bfc <_dtoa_r+0x2f4>
 8005c12:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005c16:	464b      	mov	r3, r9
 8005c18:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c1c:	e7a7      	b.n	8005b6e <_dtoa_r+0x266>
 8005c1e:	3101      	adds	r1, #1
 8005c20:	6041      	str	r1, [r0, #4]
 8005c22:	0052      	lsls	r2, r2, #1
 8005c24:	e7a7      	b.n	8005b76 <_dtoa_r+0x26e>
 8005c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c28:	9a03      	ldr	r2, [sp, #12]
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	2b0e      	cmp	r3, #14
 8005c30:	f200 80a8 	bhi.w	8005d84 <_dtoa_r+0x47c>
 8005c34:	2c00      	cmp	r4, #0
 8005c36:	f000 80a5 	beq.w	8005d84 <_dtoa_r+0x47c>
 8005c3a:	f1ba 0f00 	cmp.w	sl, #0
 8005c3e:	dd34      	ble.n	8005caa <_dtoa_r+0x3a2>
 8005c40:	4a9a      	ldr	r2, [pc, #616]	; (8005eac <_dtoa_r+0x5a4>)
 8005c42:	f00a 030f 	and.w	r3, sl, #15
 8005c46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c56:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005c5a:	d016      	beq.n	8005c8a <_dtoa_r+0x382>
 8005c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c60:	4b93      	ldr	r3, [pc, #588]	; (8005eb0 <_dtoa_r+0x5a8>)
 8005c62:	2703      	movs	r7, #3
 8005c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c68:	f7fa fd60 	bl	800072c <__aeabi_ddiv>
 8005c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c70:	f004 040f 	and.w	r4, r4, #15
 8005c74:	4e8e      	ldr	r6, [pc, #568]	; (8005eb0 <_dtoa_r+0x5a8>)
 8005c76:	b954      	cbnz	r4, 8005c8e <_dtoa_r+0x386>
 8005c78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c80:	f7fa fd54 	bl	800072c <__aeabi_ddiv>
 8005c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c88:	e029      	b.n	8005cde <_dtoa_r+0x3d6>
 8005c8a:	2702      	movs	r7, #2
 8005c8c:	e7f2      	b.n	8005c74 <_dtoa_r+0x36c>
 8005c8e:	07e1      	lsls	r1, r4, #31
 8005c90:	d508      	bpl.n	8005ca4 <_dtoa_r+0x39c>
 8005c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_dmul>
 8005c9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ca2:	3701      	adds	r7, #1
 8005ca4:	1064      	asrs	r4, r4, #1
 8005ca6:	3608      	adds	r6, #8
 8005ca8:	e7e5      	b.n	8005c76 <_dtoa_r+0x36e>
 8005caa:	f000 80a5 	beq.w	8005df8 <_dtoa_r+0x4f0>
 8005cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cb2:	f1ca 0400 	rsb	r4, sl, #0
 8005cb6:	4b7d      	ldr	r3, [pc, #500]	; (8005eac <_dtoa_r+0x5a4>)
 8005cb8:	f004 020f 	and.w	r2, r4, #15
 8005cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f7fa fc08 	bl	80004d8 <__aeabi_dmul>
 8005cc8:	2702      	movs	r7, #2
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd0:	4e77      	ldr	r6, [pc, #476]	; (8005eb0 <_dtoa_r+0x5a8>)
 8005cd2:	1124      	asrs	r4, r4, #4
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	f040 8084 	bne.w	8005de2 <_dtoa_r+0x4da>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1d2      	bne.n	8005c84 <_dtoa_r+0x37c>
 8005cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 808b 	beq.w	8005dfc <_dtoa_r+0x4f4>
 8005ce6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005cea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005cee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4b6f      	ldr	r3, [pc, #444]	; (8005eb4 <_dtoa_r+0x5ac>)
 8005cf6:	f7fa fe61 	bl	80009bc <__aeabi_dcmplt>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d07e      	beq.n	8005dfc <_dtoa_r+0x4f4>
 8005cfe:	9b08      	ldr	r3, [sp, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d07b      	beq.n	8005dfc <_dtoa_r+0x4f4>
 8005d04:	f1b9 0f00 	cmp.w	r9, #0
 8005d08:	dd38      	ble.n	8005d7c <_dtoa_r+0x474>
 8005d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4b69      	ldr	r3, [pc, #420]	; (8005eb8 <_dtoa_r+0x5b0>)
 8005d12:	f7fa fbe1 	bl	80004d8 <__aeabi_dmul>
 8005d16:	464c      	mov	r4, r9
 8005d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d1c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005d20:	3701      	adds	r7, #1
 8005d22:	4638      	mov	r0, r7
 8005d24:	f7fa fb6e 	bl	8000404 <__aeabi_i2d>
 8005d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d2c:	f7fa fbd4 	bl	80004d8 <__aeabi_dmul>
 8005d30:	2200      	movs	r2, #0
 8005d32:	4b62      	ldr	r3, [pc, #392]	; (8005ebc <_dtoa_r+0x5b4>)
 8005d34:	f7fa fa1a 	bl	800016c <__adddf3>
 8005d38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d40:	9611      	str	r6, [sp, #68]	; 0x44
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	d15d      	bne.n	8005e02 <_dtoa_r+0x4fa>
 8005d46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	4b5c      	ldr	r3, [pc, #368]	; (8005ec0 <_dtoa_r+0x5b8>)
 8005d4e:	f7fa fa0b 	bl	8000168 <__aeabi_dsub>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d5a:	4633      	mov	r3, r6
 8005d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d5e:	f7fa fe4b 	bl	80009f8 <__aeabi_dcmpgt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f040 829c 	bne.w	80062a0 <_dtoa_r+0x998>
 8005d68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d72:	f7fa fe23 	bl	80009bc <__aeabi_dcmplt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f040 8290 	bne.w	800629c <_dtoa_r+0x994>
 8005d7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f2c0 8152 	blt.w	8006030 <_dtoa_r+0x728>
 8005d8c:	f1ba 0f0e 	cmp.w	sl, #14
 8005d90:	f300 814e 	bgt.w	8006030 <_dtoa_r+0x728>
 8005d94:	4b45      	ldr	r3, [pc, #276]	; (8005eac <_dtoa_r+0x5a4>)
 8005d96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005da2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f280 80db 	bge.w	8005f60 <_dtoa_r+0x658>
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f300 80d7 	bgt.w	8005f60 <_dtoa_r+0x658>
 8005db2:	f040 8272 	bne.w	800629a <_dtoa_r+0x992>
 8005db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <_dtoa_r+0x5b8>)
 8005dbe:	f7fa fb8b 	bl	80004d8 <__aeabi_dmul>
 8005dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dc6:	f7fa fe0d 	bl	80009e4 <__aeabi_dcmpge>
 8005dca:	9c08      	ldr	r4, [sp, #32]
 8005dcc:	4626      	mov	r6, r4
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f040 8248 	bne.w	8006264 <_dtoa_r+0x95c>
 8005dd4:	2331      	movs	r3, #49	; 0x31
 8005dd6:	9f03      	ldr	r7, [sp, #12]
 8005dd8:	f10a 0a01 	add.w	sl, sl, #1
 8005ddc:	f807 3b01 	strb.w	r3, [r7], #1
 8005de0:	e244      	b.n	800626c <_dtoa_r+0x964>
 8005de2:	07e2      	lsls	r2, r4, #31
 8005de4:	d505      	bpl.n	8005df2 <_dtoa_r+0x4ea>
 8005de6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005dea:	f7fa fb75 	bl	80004d8 <__aeabi_dmul>
 8005dee:	2301      	movs	r3, #1
 8005df0:	3701      	adds	r7, #1
 8005df2:	1064      	asrs	r4, r4, #1
 8005df4:	3608      	adds	r6, #8
 8005df6:	e76d      	b.n	8005cd4 <_dtoa_r+0x3cc>
 8005df8:	2702      	movs	r7, #2
 8005dfa:	e770      	b.n	8005cde <_dtoa_r+0x3d6>
 8005dfc:	46d0      	mov	r8, sl
 8005dfe:	9c08      	ldr	r4, [sp, #32]
 8005e00:	e78f      	b.n	8005d22 <_dtoa_r+0x41a>
 8005e02:	9903      	ldr	r1, [sp, #12]
 8005e04:	4b29      	ldr	r3, [pc, #164]	; (8005eac <_dtoa_r+0x5a4>)
 8005e06:	4421      	add	r1, r4
 8005e08:	9112      	str	r1, [sp, #72]	; 0x48
 8005e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	d055      	beq.n	8005ec8 <_dtoa_r+0x5c0>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4929      	ldr	r1, [pc, #164]	; (8005ec4 <_dtoa_r+0x5bc>)
 8005e20:	f7fa fc84 	bl	800072c <__aeabi_ddiv>
 8005e24:	463b      	mov	r3, r7
 8005e26:	4632      	mov	r2, r6
 8005e28:	f7fa f99e 	bl	8000168 <__aeabi_dsub>
 8005e2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e30:	9f03      	ldr	r7, [sp, #12]
 8005e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e36:	f7fa fdff 	bl	8000a38 <__aeabi_d2iz>
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	f7fa fae2 	bl	8000404 <__aeabi_i2d>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e48:	f7fa f98e 	bl	8000168 <__aeabi_dsub>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	3430      	adds	r4, #48	; 0x30
 8005e52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e5a:	f807 4b01 	strb.w	r4, [r7], #1
 8005e5e:	f7fa fdad 	bl	80009bc <__aeabi_dcmplt>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d174      	bne.n	8005f50 <_dtoa_r+0x648>
 8005e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	4911      	ldr	r1, [pc, #68]	; (8005eb4 <_dtoa_r+0x5ac>)
 8005e6e:	f7fa f97b 	bl	8000168 <__aeabi_dsub>
 8005e72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e76:	f7fa fda1 	bl	80009bc <__aeabi_dcmplt>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f040 80b7 	bne.w	8005fee <_dtoa_r+0x6e6>
 8005e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e82:	429f      	cmp	r7, r3
 8005e84:	f43f af7a 	beq.w	8005d7c <_dtoa_r+0x474>
 8005e88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <_dtoa_r+0x5b0>)
 8005e90:	f7fa fb22 	bl	80004d8 <__aeabi_dmul>
 8005e94:	2200      	movs	r2, #0
 8005e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <_dtoa_r+0x5b0>)
 8005ea0:	f7fa fb1a 	bl	80004d8 <__aeabi_dmul>
 8005ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ea8:	e7c3      	b.n	8005e32 <_dtoa_r+0x52a>
 8005eaa:	bf00      	nop
 8005eac:	08007be0 	.word	0x08007be0
 8005eb0:	08007bb8 	.word	0x08007bb8
 8005eb4:	3ff00000 	.word	0x3ff00000
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	401c0000 	.word	0x401c0000
 8005ec0:	40140000 	.word	0x40140000
 8005ec4:	3fe00000 	.word	0x3fe00000
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa fb04 	bl	80004d8 <__aeabi_dmul>
 8005ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ed2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ed6:	9c03      	ldr	r4, [sp, #12]
 8005ed8:	9314      	str	r3, [sp, #80]	; 0x50
 8005eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ede:	f7fa fdab 	bl	8000a38 <__aeabi_d2iz>
 8005ee2:	9015      	str	r0, [sp, #84]	; 0x54
 8005ee4:	f7fa fa8e 	bl	8000404 <__aeabi_i2d>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef0:	f7fa f93a 	bl	8000168 <__aeabi_dsub>
 8005ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	3330      	adds	r3, #48	; 0x30
 8005efa:	f804 3b01 	strb.w	r3, [r4], #1
 8005efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f00:	460f      	mov	r7, r1
 8005f02:	429c      	cmp	r4, r3
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	d124      	bne.n	8005f54 <_dtoa_r+0x64c>
 8005f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f0e:	4bb0      	ldr	r3, [pc, #704]	; (80061d0 <_dtoa_r+0x8c8>)
 8005f10:	f7fa f92c 	bl	800016c <__adddf3>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa fd6c 	bl	80009f8 <__aeabi_dcmpgt>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d163      	bne.n	8005fec <_dtoa_r+0x6e4>
 8005f24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f28:	2000      	movs	r0, #0
 8005f2a:	49a9      	ldr	r1, [pc, #676]	; (80061d0 <_dtoa_r+0x8c8>)
 8005f2c:	f7fa f91c 	bl	8000168 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4630      	mov	r0, r6
 8005f36:	4639      	mov	r1, r7
 8005f38:	f7fa fd40 	bl	80009bc <__aeabi_dcmplt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f43f af1d 	beq.w	8005d7c <_dtoa_r+0x474>
 8005f42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f44:	1e7b      	subs	r3, r7, #1
 8005f46:	9314      	str	r3, [sp, #80]	; 0x50
 8005f48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f4c:	2b30      	cmp	r3, #48	; 0x30
 8005f4e:	d0f8      	beq.n	8005f42 <_dtoa_r+0x63a>
 8005f50:	46c2      	mov	sl, r8
 8005f52:	e03b      	b.n	8005fcc <_dtoa_r+0x6c4>
 8005f54:	4b9f      	ldr	r3, [pc, #636]	; (80061d4 <_dtoa_r+0x8cc>)
 8005f56:	f7fa fabf 	bl	80004d8 <__aeabi_dmul>
 8005f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f5e:	e7bc      	b.n	8005eda <_dtoa_r+0x5d2>
 8005f60:	9f03      	ldr	r7, [sp, #12]
 8005f62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fa fbdd 	bl	800072c <__aeabi_ddiv>
 8005f72:	f7fa fd61 	bl	8000a38 <__aeabi_d2iz>
 8005f76:	4604      	mov	r4, r0
 8005f78:	f7fa fa44 	bl	8000404 <__aeabi_i2d>
 8005f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f80:	f7fa faaa 	bl	80004d8 <__aeabi_dmul>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4640      	mov	r0, r8
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	f7fa f8ec 	bl	8000168 <__aeabi_dsub>
 8005f90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f94:	f807 6b01 	strb.w	r6, [r7], #1
 8005f98:	9e03      	ldr	r6, [sp, #12]
 8005f9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005f9e:	1bbe      	subs	r6, r7, r6
 8005fa0:	45b4      	cmp	ip, r6
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	d136      	bne.n	8006016 <_dtoa_r+0x70e>
 8005fa8:	f7fa f8e0 	bl	800016c <__adddf3>
 8005fac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4689      	mov	r9, r1
 8005fb4:	f7fa fd20 	bl	80009f8 <__aeabi_dcmpgt>
 8005fb8:	bb58      	cbnz	r0, 8006012 <_dtoa_r+0x70a>
 8005fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	f7fa fcf1 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc6:	b108      	cbz	r0, 8005fcc <_dtoa_r+0x6c4>
 8005fc8:	07e1      	lsls	r1, r4, #31
 8005fca:	d422      	bmi.n	8006012 <_dtoa_r+0x70a>
 8005fcc:	4628      	mov	r0, r5
 8005fce:	4659      	mov	r1, fp
 8005fd0:	f000 faf0 	bl	80065b4 <_Bfree>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	703b      	strb	r3, [r7, #0]
 8005fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fda:	f10a 0001 	add.w	r0, sl, #1
 8005fde:	6018      	str	r0, [r3, #0]
 8005fe0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f43f acde 	beq.w	80059a4 <_dtoa_r+0x9c>
 8005fe8:	601f      	str	r7, [r3, #0]
 8005fea:	e4db      	b.n	80059a4 <_dtoa_r+0x9c>
 8005fec:	4627      	mov	r7, r4
 8005fee:	463b      	mov	r3, r7
 8005ff0:	461f      	mov	r7, r3
 8005ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff6:	2a39      	cmp	r2, #57	; 0x39
 8005ff8:	d107      	bne.n	800600a <_dtoa_r+0x702>
 8005ffa:	9a03      	ldr	r2, [sp, #12]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d1f7      	bne.n	8005ff0 <_dtoa_r+0x6e8>
 8006000:	2230      	movs	r2, #48	; 0x30
 8006002:	9903      	ldr	r1, [sp, #12]
 8006004:	f108 0801 	add.w	r8, r8, #1
 8006008:	700a      	strb	r2, [r1, #0]
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	3201      	adds	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	e79e      	b.n	8005f50 <_dtoa_r+0x648>
 8006012:	46d0      	mov	r8, sl
 8006014:	e7eb      	b.n	8005fee <_dtoa_r+0x6e6>
 8006016:	2200      	movs	r2, #0
 8006018:	4b6e      	ldr	r3, [pc, #440]	; (80061d4 <_dtoa_r+0x8cc>)
 800601a:	f7fa fa5d 	bl	80004d8 <__aeabi_dmul>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4680      	mov	r8, r0
 8006024:	4689      	mov	r9, r1
 8006026:	f7fa fcbf 	bl	80009a8 <__aeabi_dcmpeq>
 800602a:	2800      	cmp	r0, #0
 800602c:	d09b      	beq.n	8005f66 <_dtoa_r+0x65e>
 800602e:	e7cd      	b.n	8005fcc <_dtoa_r+0x6c4>
 8006030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006032:	2a00      	cmp	r2, #0
 8006034:	f000 80d0 	beq.w	80061d8 <_dtoa_r+0x8d0>
 8006038:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800603a:	2a01      	cmp	r2, #1
 800603c:	f300 80ae 	bgt.w	800619c <_dtoa_r+0x894>
 8006040:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006042:	2a00      	cmp	r2, #0
 8006044:	f000 80a6 	beq.w	8006194 <_dtoa_r+0x88c>
 8006048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800604c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800604e:	9f06      	ldr	r7, [sp, #24]
 8006050:	9a06      	ldr	r2, [sp, #24]
 8006052:	2101      	movs	r1, #1
 8006054:	441a      	add	r2, r3
 8006056:	9206      	str	r2, [sp, #24]
 8006058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605a:	4628      	mov	r0, r5
 800605c:	441a      	add	r2, r3
 800605e:	9209      	str	r2, [sp, #36]	; 0x24
 8006060:	f000 fb5e 	bl	8006720 <__i2b>
 8006064:	4606      	mov	r6, r0
 8006066:	2f00      	cmp	r7, #0
 8006068:	dd0c      	ble.n	8006084 <_dtoa_r+0x77c>
 800606a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	dd09      	ble.n	8006084 <_dtoa_r+0x77c>
 8006070:	42bb      	cmp	r3, r7
 8006072:	bfa8      	it	ge
 8006074:	463b      	movge	r3, r7
 8006076:	9a06      	ldr	r2, [sp, #24]
 8006078:	1aff      	subs	r7, r7, r3
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	9206      	str	r2, [sp, #24]
 800607e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	9309      	str	r3, [sp, #36]	; 0x24
 8006084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006086:	b1f3      	cbz	r3, 80060c6 <_dtoa_r+0x7be>
 8006088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80a8 	beq.w	80061e0 <_dtoa_r+0x8d8>
 8006090:	2c00      	cmp	r4, #0
 8006092:	dd10      	ble.n	80060b6 <_dtoa_r+0x7ae>
 8006094:	4631      	mov	r1, r6
 8006096:	4622      	mov	r2, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f000 fbff 	bl	800689c <__pow5mult>
 800609e:	465a      	mov	r2, fp
 80060a0:	4601      	mov	r1, r0
 80060a2:	4606      	mov	r6, r0
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 fb51 	bl	800674c <__multiply>
 80060aa:	4680      	mov	r8, r0
 80060ac:	4659      	mov	r1, fp
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 fa80 	bl	80065b4 <_Bfree>
 80060b4:	46c3      	mov	fp, r8
 80060b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b8:	1b1a      	subs	r2, r3, r4
 80060ba:	d004      	beq.n	80060c6 <_dtoa_r+0x7be>
 80060bc:	4659      	mov	r1, fp
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fbec 	bl	800689c <__pow5mult>
 80060c4:	4683      	mov	fp, r0
 80060c6:	2101      	movs	r1, #1
 80060c8:	4628      	mov	r0, r5
 80060ca:	f000 fb29 	bl	8006720 <__i2b>
 80060ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060d0:	4604      	mov	r4, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f340 8086 	ble.w	80061e4 <_dtoa_r+0x8dc>
 80060d8:	461a      	mov	r2, r3
 80060da:	4601      	mov	r1, r0
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 fbdd 	bl	800689c <__pow5mult>
 80060e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060e4:	4604      	mov	r4, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	dd7f      	ble.n	80061ea <_dtoa_r+0x8e2>
 80060ea:	f04f 0800 	mov.w	r8, #0
 80060ee:	6923      	ldr	r3, [r4, #16]
 80060f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060f4:	6918      	ldr	r0, [r3, #16]
 80060f6:	f000 fac5 	bl	8006684 <__hi0bits>
 80060fa:	f1c0 0020 	rsb	r0, r0, #32
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	4418      	add	r0, r3
 8006102:	f010 001f 	ands.w	r0, r0, #31
 8006106:	f000 8092 	beq.w	800622e <_dtoa_r+0x926>
 800610a:	f1c0 0320 	rsb	r3, r0, #32
 800610e:	2b04      	cmp	r3, #4
 8006110:	f340 808a 	ble.w	8006228 <_dtoa_r+0x920>
 8006114:	f1c0 001c 	rsb	r0, r0, #28
 8006118:	9b06      	ldr	r3, [sp, #24]
 800611a:	4407      	add	r7, r0
 800611c:	4403      	add	r3, r0
 800611e:	9306      	str	r3, [sp, #24]
 8006120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006122:	4403      	add	r3, r0
 8006124:	9309      	str	r3, [sp, #36]	; 0x24
 8006126:	9b06      	ldr	r3, [sp, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	dd05      	ble.n	8006138 <_dtoa_r+0x830>
 800612c:	4659      	mov	r1, fp
 800612e:	461a      	mov	r2, r3
 8006130:	4628      	mov	r0, r5
 8006132:	f000 fc0d 	bl	8006950 <__lshift>
 8006136:	4683      	mov	fp, r0
 8006138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	dd05      	ble.n	800614a <_dtoa_r+0x842>
 800613e:	4621      	mov	r1, r4
 8006140:	461a      	mov	r2, r3
 8006142:	4628      	mov	r0, r5
 8006144:	f000 fc04 	bl	8006950 <__lshift>
 8006148:	4604      	mov	r4, r0
 800614a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d070      	beq.n	8006232 <_dtoa_r+0x92a>
 8006150:	4621      	mov	r1, r4
 8006152:	4658      	mov	r0, fp
 8006154:	f000 fc6c 	bl	8006a30 <__mcmp>
 8006158:	2800      	cmp	r0, #0
 800615a:	da6a      	bge.n	8006232 <_dtoa_r+0x92a>
 800615c:	2300      	movs	r3, #0
 800615e:	4659      	mov	r1, fp
 8006160:	220a      	movs	r2, #10
 8006162:	4628      	mov	r0, r5
 8006164:	f000 fa48 	bl	80065f8 <__multadd>
 8006168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616a:	4683      	mov	fp, r0
 800616c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8194 	beq.w	800649e <_dtoa_r+0xb96>
 8006176:	4631      	mov	r1, r6
 8006178:	2300      	movs	r3, #0
 800617a:	220a      	movs	r2, #10
 800617c:	4628      	mov	r0, r5
 800617e:	f000 fa3b 	bl	80065f8 <__multadd>
 8006182:	f1b9 0f00 	cmp.w	r9, #0
 8006186:	4606      	mov	r6, r0
 8006188:	f300 8093 	bgt.w	80062b2 <_dtoa_r+0x9aa>
 800618c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618e:	2b02      	cmp	r3, #2
 8006190:	dc57      	bgt.n	8006242 <_dtoa_r+0x93a>
 8006192:	e08e      	b.n	80062b2 <_dtoa_r+0x9aa>
 8006194:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800619a:	e757      	b.n	800604c <_dtoa_r+0x744>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	1e5c      	subs	r4, r3, #1
 80061a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	bfb7      	itett	lt
 80061a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061a8:	1b1c      	subge	r4, r3, r4
 80061aa:	1ae2      	sublt	r2, r4, r3
 80061ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80061ae:	bfbe      	ittt	lt
 80061b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80061b2:	189b      	addlt	r3, r3, r2
 80061b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80061b6:	9b08      	ldr	r3, [sp, #32]
 80061b8:	bfb8      	it	lt
 80061ba:	2400      	movlt	r4, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfbb      	ittet	lt
 80061c0:	9b06      	ldrlt	r3, [sp, #24]
 80061c2:	9a08      	ldrlt	r2, [sp, #32]
 80061c4:	9f06      	ldrge	r7, [sp, #24]
 80061c6:	1a9f      	sublt	r7, r3, r2
 80061c8:	bfac      	ite	ge
 80061ca:	9b08      	ldrge	r3, [sp, #32]
 80061cc:	2300      	movlt	r3, #0
 80061ce:	e73f      	b.n	8006050 <_dtoa_r+0x748>
 80061d0:	3fe00000 	.word	0x3fe00000
 80061d4:	40240000 	.word	0x40240000
 80061d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061da:	9f06      	ldr	r7, [sp, #24]
 80061dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80061de:	e742      	b.n	8006066 <_dtoa_r+0x75e>
 80061e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061e2:	e76b      	b.n	80060bc <_dtoa_r+0x7b4>
 80061e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	dc19      	bgt.n	800621e <_dtoa_r+0x916>
 80061ea:	9b04      	ldr	r3, [sp, #16]
 80061ec:	b9bb      	cbnz	r3, 800621e <_dtoa_r+0x916>
 80061ee:	9b05      	ldr	r3, [sp, #20]
 80061f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f4:	b99b      	cbnz	r3, 800621e <_dtoa_r+0x916>
 80061f6:	9b05      	ldr	r3, [sp, #20]
 80061f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	0d1b      	lsrs	r3, r3, #20
 80061fe:	051b      	lsls	r3, r3, #20
 8006200:	b183      	cbz	r3, 8006224 <_dtoa_r+0x91c>
 8006202:	f04f 0801 	mov.w	r8, #1
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	3301      	adds	r3, #1
 800620a:	9306      	str	r3, [sp, #24]
 800620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620e:	3301      	adds	r3, #1
 8006210:	9309      	str	r3, [sp, #36]	; 0x24
 8006212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	f47f af6a 	bne.w	80060ee <_dtoa_r+0x7e6>
 800621a:	2001      	movs	r0, #1
 800621c:	e76f      	b.n	80060fe <_dtoa_r+0x7f6>
 800621e:	f04f 0800 	mov.w	r8, #0
 8006222:	e7f6      	b.n	8006212 <_dtoa_r+0x90a>
 8006224:	4698      	mov	r8, r3
 8006226:	e7f4      	b.n	8006212 <_dtoa_r+0x90a>
 8006228:	f43f af7d 	beq.w	8006126 <_dtoa_r+0x81e>
 800622c:	4618      	mov	r0, r3
 800622e:	301c      	adds	r0, #28
 8006230:	e772      	b.n	8006118 <_dtoa_r+0x810>
 8006232:	9b08      	ldr	r3, [sp, #32]
 8006234:	2b00      	cmp	r3, #0
 8006236:	dc36      	bgt.n	80062a6 <_dtoa_r+0x99e>
 8006238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623a:	2b02      	cmp	r3, #2
 800623c:	dd33      	ble.n	80062a6 <_dtoa_r+0x99e>
 800623e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006242:	f1b9 0f00 	cmp.w	r9, #0
 8006246:	d10d      	bne.n	8006264 <_dtoa_r+0x95c>
 8006248:	4621      	mov	r1, r4
 800624a:	464b      	mov	r3, r9
 800624c:	2205      	movs	r2, #5
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f9d2 	bl	80065f8 <__multadd>
 8006254:	4601      	mov	r1, r0
 8006256:	4604      	mov	r4, r0
 8006258:	4658      	mov	r0, fp
 800625a:	f000 fbe9 	bl	8006a30 <__mcmp>
 800625e:	2800      	cmp	r0, #0
 8006260:	f73f adb8 	bgt.w	8005dd4 <_dtoa_r+0x4cc>
 8006264:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006266:	9f03      	ldr	r7, [sp, #12]
 8006268:	ea6f 0a03 	mvn.w	sl, r3
 800626c:	f04f 0800 	mov.w	r8, #0
 8006270:	4621      	mov	r1, r4
 8006272:	4628      	mov	r0, r5
 8006274:	f000 f99e 	bl	80065b4 <_Bfree>
 8006278:	2e00      	cmp	r6, #0
 800627a:	f43f aea7 	beq.w	8005fcc <_dtoa_r+0x6c4>
 800627e:	f1b8 0f00 	cmp.w	r8, #0
 8006282:	d005      	beq.n	8006290 <_dtoa_r+0x988>
 8006284:	45b0      	cmp	r8, r6
 8006286:	d003      	beq.n	8006290 <_dtoa_r+0x988>
 8006288:	4641      	mov	r1, r8
 800628a:	4628      	mov	r0, r5
 800628c:	f000 f992 	bl	80065b4 <_Bfree>
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	f000 f98e 	bl	80065b4 <_Bfree>
 8006298:	e698      	b.n	8005fcc <_dtoa_r+0x6c4>
 800629a:	2400      	movs	r4, #0
 800629c:	4626      	mov	r6, r4
 800629e:	e7e1      	b.n	8006264 <_dtoa_r+0x95c>
 80062a0:	46c2      	mov	sl, r8
 80062a2:	4626      	mov	r6, r4
 80062a4:	e596      	b.n	8005dd4 <_dtoa_r+0x4cc>
 80062a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80fd 	beq.w	80064ac <_dtoa_r+0xba4>
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	dd05      	ble.n	80062c2 <_dtoa_r+0x9ba>
 80062b6:	4631      	mov	r1, r6
 80062b8:	463a      	mov	r2, r7
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 fb48 	bl	8006950 <__lshift>
 80062c0:	4606      	mov	r6, r0
 80062c2:	f1b8 0f00 	cmp.w	r8, #0
 80062c6:	d05c      	beq.n	8006382 <_dtoa_r+0xa7a>
 80062c8:	4628      	mov	r0, r5
 80062ca:	6871      	ldr	r1, [r6, #4]
 80062cc:	f000 f932 	bl	8006534 <_Balloc>
 80062d0:	4607      	mov	r7, r0
 80062d2:	b928      	cbnz	r0, 80062e0 <_dtoa_r+0x9d8>
 80062d4:	4602      	mov	r2, r0
 80062d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062da:	4b7f      	ldr	r3, [pc, #508]	; (80064d8 <_dtoa_r+0xbd0>)
 80062dc:	f7ff bb28 	b.w	8005930 <_dtoa_r+0x28>
 80062e0:	6932      	ldr	r2, [r6, #16]
 80062e2:	f106 010c 	add.w	r1, r6, #12
 80062e6:	3202      	adds	r2, #2
 80062e8:	0092      	lsls	r2, r2, #2
 80062ea:	300c      	adds	r0, #12
 80062ec:	f000 f914 	bl	8006518 <memcpy>
 80062f0:	2201      	movs	r2, #1
 80062f2:	4639      	mov	r1, r7
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 fb2b 	bl	8006950 <__lshift>
 80062fa:	46b0      	mov	r8, r6
 80062fc:	4606      	mov	r6, r0
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	9308      	str	r3, [sp, #32]
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	444b      	add	r3, r9
 8006308:	930a      	str	r3, [sp, #40]	; 0x28
 800630a:	9b04      	ldr	r3, [sp, #16]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	9309      	str	r3, [sp, #36]	; 0x24
 8006312:	9b08      	ldr	r3, [sp, #32]
 8006314:	4621      	mov	r1, r4
 8006316:	3b01      	subs	r3, #1
 8006318:	4658      	mov	r0, fp
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	f7ff fa68 	bl	80057f0 <quorem>
 8006320:	4603      	mov	r3, r0
 8006322:	4641      	mov	r1, r8
 8006324:	3330      	adds	r3, #48	; 0x30
 8006326:	9006      	str	r0, [sp, #24]
 8006328:	4658      	mov	r0, fp
 800632a:	930b      	str	r3, [sp, #44]	; 0x2c
 800632c:	f000 fb80 	bl	8006a30 <__mcmp>
 8006330:	4632      	mov	r2, r6
 8006332:	4681      	mov	r9, r0
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fb96 	bl	8006a68 <__mdiff>
 800633c:	68c2      	ldr	r2, [r0, #12]
 800633e:	4607      	mov	r7, r0
 8006340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006342:	bb02      	cbnz	r2, 8006386 <_dtoa_r+0xa7e>
 8006344:	4601      	mov	r1, r0
 8006346:	4658      	mov	r0, fp
 8006348:	f000 fb72 	bl	8006a30 <__mcmp>
 800634c:	4602      	mov	r2, r0
 800634e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006350:	4639      	mov	r1, r7
 8006352:	4628      	mov	r0, r5
 8006354:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006358:	f000 f92c 	bl	80065b4 <_Bfree>
 800635c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800635e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006360:	9f08      	ldr	r7, [sp, #32]
 8006362:	ea43 0102 	orr.w	r1, r3, r2
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	430b      	orrs	r3, r1
 800636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636c:	d10d      	bne.n	800638a <_dtoa_r+0xa82>
 800636e:	2b39      	cmp	r3, #57	; 0x39
 8006370:	d029      	beq.n	80063c6 <_dtoa_r+0xabe>
 8006372:	f1b9 0f00 	cmp.w	r9, #0
 8006376:	dd01      	ble.n	800637c <_dtoa_r+0xa74>
 8006378:	9b06      	ldr	r3, [sp, #24]
 800637a:	3331      	adds	r3, #49	; 0x31
 800637c:	9a04      	ldr	r2, [sp, #16]
 800637e:	7013      	strb	r3, [r2, #0]
 8006380:	e776      	b.n	8006270 <_dtoa_r+0x968>
 8006382:	4630      	mov	r0, r6
 8006384:	e7b9      	b.n	80062fa <_dtoa_r+0x9f2>
 8006386:	2201      	movs	r2, #1
 8006388:	e7e2      	b.n	8006350 <_dtoa_r+0xa48>
 800638a:	f1b9 0f00 	cmp.w	r9, #0
 800638e:	db06      	blt.n	800639e <_dtoa_r+0xa96>
 8006390:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006392:	ea41 0909 	orr.w	r9, r1, r9
 8006396:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006398:	ea59 0101 	orrs.w	r1, r9, r1
 800639c:	d120      	bne.n	80063e0 <_dtoa_r+0xad8>
 800639e:	2a00      	cmp	r2, #0
 80063a0:	ddec      	ble.n	800637c <_dtoa_r+0xa74>
 80063a2:	4659      	mov	r1, fp
 80063a4:	2201      	movs	r2, #1
 80063a6:	4628      	mov	r0, r5
 80063a8:	9308      	str	r3, [sp, #32]
 80063aa:	f000 fad1 	bl	8006950 <__lshift>
 80063ae:	4621      	mov	r1, r4
 80063b0:	4683      	mov	fp, r0
 80063b2:	f000 fb3d 	bl	8006a30 <__mcmp>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	9b08      	ldr	r3, [sp, #32]
 80063ba:	dc02      	bgt.n	80063c2 <_dtoa_r+0xaba>
 80063bc:	d1de      	bne.n	800637c <_dtoa_r+0xa74>
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d5dc      	bpl.n	800637c <_dtoa_r+0xa74>
 80063c2:	2b39      	cmp	r3, #57	; 0x39
 80063c4:	d1d8      	bne.n	8006378 <_dtoa_r+0xa70>
 80063c6:	2339      	movs	r3, #57	; 0x39
 80063c8:	9a04      	ldr	r2, [sp, #16]
 80063ca:	7013      	strb	r3, [r2, #0]
 80063cc:	463b      	mov	r3, r7
 80063ce:	461f      	mov	r7, r3
 80063d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	2a39      	cmp	r2, #57	; 0x39
 80063d8:	d050      	beq.n	800647c <_dtoa_r+0xb74>
 80063da:	3201      	adds	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e747      	b.n	8006270 <_dtoa_r+0x968>
 80063e0:	2a00      	cmp	r2, #0
 80063e2:	dd03      	ble.n	80063ec <_dtoa_r+0xae4>
 80063e4:	2b39      	cmp	r3, #57	; 0x39
 80063e6:	d0ee      	beq.n	80063c6 <_dtoa_r+0xabe>
 80063e8:	3301      	adds	r3, #1
 80063ea:	e7c7      	b.n	800637c <_dtoa_r+0xa74>
 80063ec:	9a08      	ldr	r2, [sp, #32]
 80063ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063f4:	428a      	cmp	r2, r1
 80063f6:	d02a      	beq.n	800644e <_dtoa_r+0xb46>
 80063f8:	4659      	mov	r1, fp
 80063fa:	2300      	movs	r3, #0
 80063fc:	220a      	movs	r2, #10
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 f8fa 	bl	80065f8 <__multadd>
 8006404:	45b0      	cmp	r8, r6
 8006406:	4683      	mov	fp, r0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	f04f 020a 	mov.w	r2, #10
 8006410:	4641      	mov	r1, r8
 8006412:	4628      	mov	r0, r5
 8006414:	d107      	bne.n	8006426 <_dtoa_r+0xb1e>
 8006416:	f000 f8ef 	bl	80065f8 <__multadd>
 800641a:	4680      	mov	r8, r0
 800641c:	4606      	mov	r6, r0
 800641e:	9b08      	ldr	r3, [sp, #32]
 8006420:	3301      	adds	r3, #1
 8006422:	9308      	str	r3, [sp, #32]
 8006424:	e775      	b.n	8006312 <_dtoa_r+0xa0a>
 8006426:	f000 f8e7 	bl	80065f8 <__multadd>
 800642a:	4631      	mov	r1, r6
 800642c:	4680      	mov	r8, r0
 800642e:	2300      	movs	r3, #0
 8006430:	220a      	movs	r2, #10
 8006432:	4628      	mov	r0, r5
 8006434:	f000 f8e0 	bl	80065f8 <__multadd>
 8006438:	4606      	mov	r6, r0
 800643a:	e7f0      	b.n	800641e <_dtoa_r+0xb16>
 800643c:	f1b9 0f00 	cmp.w	r9, #0
 8006440:	bfcc      	ite	gt
 8006442:	464f      	movgt	r7, r9
 8006444:	2701      	movle	r7, #1
 8006446:	f04f 0800 	mov.w	r8, #0
 800644a:	9a03      	ldr	r2, [sp, #12]
 800644c:	4417      	add	r7, r2
 800644e:	4659      	mov	r1, fp
 8006450:	2201      	movs	r2, #1
 8006452:	4628      	mov	r0, r5
 8006454:	9308      	str	r3, [sp, #32]
 8006456:	f000 fa7b 	bl	8006950 <__lshift>
 800645a:	4621      	mov	r1, r4
 800645c:	4683      	mov	fp, r0
 800645e:	f000 fae7 	bl	8006a30 <__mcmp>
 8006462:	2800      	cmp	r0, #0
 8006464:	dcb2      	bgt.n	80063cc <_dtoa_r+0xac4>
 8006466:	d102      	bne.n	800646e <_dtoa_r+0xb66>
 8006468:	9b08      	ldr	r3, [sp, #32]
 800646a:	07db      	lsls	r3, r3, #31
 800646c:	d4ae      	bmi.n	80063cc <_dtoa_r+0xac4>
 800646e:	463b      	mov	r3, r7
 8006470:	461f      	mov	r7, r3
 8006472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006476:	2a30      	cmp	r2, #48	; 0x30
 8006478:	d0fa      	beq.n	8006470 <_dtoa_r+0xb68>
 800647a:	e6f9      	b.n	8006270 <_dtoa_r+0x968>
 800647c:	9a03      	ldr	r2, [sp, #12]
 800647e:	429a      	cmp	r2, r3
 8006480:	d1a5      	bne.n	80063ce <_dtoa_r+0xac6>
 8006482:	2331      	movs	r3, #49	; 0x31
 8006484:	f10a 0a01 	add.w	sl, sl, #1
 8006488:	e779      	b.n	800637e <_dtoa_r+0xa76>
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <_dtoa_r+0xbd4>)
 800648c:	f7ff baa8 	b.w	80059e0 <_dtoa_r+0xd8>
 8006490:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006492:	2b00      	cmp	r3, #0
 8006494:	f47f aa81 	bne.w	800599a <_dtoa_r+0x92>
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <_dtoa_r+0xbd8>)
 800649a:	f7ff baa1 	b.w	80059e0 <_dtoa_r+0xd8>
 800649e:	f1b9 0f00 	cmp.w	r9, #0
 80064a2:	dc03      	bgt.n	80064ac <_dtoa_r+0xba4>
 80064a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	f73f aecb 	bgt.w	8006242 <_dtoa_r+0x93a>
 80064ac:	9f03      	ldr	r7, [sp, #12]
 80064ae:	4621      	mov	r1, r4
 80064b0:	4658      	mov	r0, fp
 80064b2:	f7ff f99d 	bl	80057f0 <quorem>
 80064b6:	9a03      	ldr	r2, [sp, #12]
 80064b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064bc:	f807 3b01 	strb.w	r3, [r7], #1
 80064c0:	1aba      	subs	r2, r7, r2
 80064c2:	4591      	cmp	r9, r2
 80064c4:	ddba      	ble.n	800643c <_dtoa_r+0xb34>
 80064c6:	4659      	mov	r1, fp
 80064c8:	2300      	movs	r3, #0
 80064ca:	220a      	movs	r2, #10
 80064cc:	4628      	mov	r0, r5
 80064ce:	f000 f893 	bl	80065f8 <__multadd>
 80064d2:	4683      	mov	fp, r0
 80064d4:	e7eb      	b.n	80064ae <_dtoa_r+0xba6>
 80064d6:	bf00      	nop
 80064d8:	08007b44 	.word	0x08007b44
 80064dc:	080079a0 	.word	0x080079a0
 80064e0:	08007ac5 	.word	0x08007ac5

080064e4 <_localeconv_r>:
 80064e4:	4800      	ldr	r0, [pc, #0]	; (80064e8 <_localeconv_r+0x4>)
 80064e6:	4770      	bx	lr
 80064e8:	20000160 	.word	0x20000160

080064ec <malloc>:
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <malloc+0xc>)
 80064ee:	4601      	mov	r1, r0
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f000 bc1d 	b.w	8006d30 <_malloc_r>
 80064f6:	bf00      	nop
 80064f8:	2000000c 	.word	0x2000000c

080064fc <memchr>:
 80064fc:	4603      	mov	r3, r0
 80064fe:	b510      	push	{r4, lr}
 8006500:	b2c9      	uxtb	r1, r1
 8006502:	4402      	add	r2, r0
 8006504:	4293      	cmp	r3, r2
 8006506:	4618      	mov	r0, r3
 8006508:	d101      	bne.n	800650e <memchr+0x12>
 800650a:	2000      	movs	r0, #0
 800650c:	e003      	b.n	8006516 <memchr+0x1a>
 800650e:	7804      	ldrb	r4, [r0, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	428c      	cmp	r4, r1
 8006514:	d1f6      	bne.n	8006504 <memchr+0x8>
 8006516:	bd10      	pop	{r4, pc}

08006518 <memcpy>:
 8006518:	440a      	add	r2, r1
 800651a:	4291      	cmp	r1, r2
 800651c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006520:	d100      	bne.n	8006524 <memcpy+0xc>
 8006522:	4770      	bx	lr
 8006524:	b510      	push	{r4, lr}
 8006526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652a:	4291      	cmp	r1, r2
 800652c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006530:	d1f9      	bne.n	8006526 <memcpy+0xe>
 8006532:	bd10      	pop	{r4, pc}

08006534 <_Balloc>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	b976      	cbnz	r6, 800655c <_Balloc+0x28>
 800653e:	2010      	movs	r0, #16
 8006540:	f7ff ffd4 	bl	80064ec <malloc>
 8006544:	4602      	mov	r2, r0
 8006546:	6260      	str	r0, [r4, #36]	; 0x24
 8006548:	b920      	cbnz	r0, 8006554 <_Balloc+0x20>
 800654a:	2166      	movs	r1, #102	; 0x66
 800654c:	4b17      	ldr	r3, [pc, #92]	; (80065ac <_Balloc+0x78>)
 800654e:	4818      	ldr	r0, [pc, #96]	; (80065b0 <_Balloc+0x7c>)
 8006550:	f000 fc72 	bl	8006e38 <__assert_func>
 8006554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006558:	6006      	str	r6, [r0, #0]
 800655a:	60c6      	str	r6, [r0, #12]
 800655c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800655e:	68f3      	ldr	r3, [r6, #12]
 8006560:	b183      	cbz	r3, 8006584 <_Balloc+0x50>
 8006562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800656a:	b9b8      	cbnz	r0, 800659c <_Balloc+0x68>
 800656c:	2101      	movs	r1, #1
 800656e:	fa01 f605 	lsl.w	r6, r1, r5
 8006572:	1d72      	adds	r2, r6, #5
 8006574:	4620      	mov	r0, r4
 8006576:	0092      	lsls	r2, r2, #2
 8006578:	f000 fb5e 	bl	8006c38 <_calloc_r>
 800657c:	b160      	cbz	r0, 8006598 <_Balloc+0x64>
 800657e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006582:	e00e      	b.n	80065a2 <_Balloc+0x6e>
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	2104      	movs	r1, #4
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fb55 	bl	8006c38 <_calloc_r>
 800658e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006590:	60f0      	str	r0, [r6, #12]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e4      	bne.n	8006562 <_Balloc+0x2e>
 8006598:	2000      	movs	r0, #0
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	6802      	ldr	r2, [r0, #0]
 800659e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065a2:	2300      	movs	r3, #0
 80065a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065a8:	e7f7      	b.n	800659a <_Balloc+0x66>
 80065aa:	bf00      	nop
 80065ac:	08007ad2 	.word	0x08007ad2
 80065b0:	08007b55 	.word	0x08007b55

080065b4 <_Bfree>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065b8:	4605      	mov	r5, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	b976      	cbnz	r6, 80065dc <_Bfree+0x28>
 80065be:	2010      	movs	r0, #16
 80065c0:	f7ff ff94 	bl	80064ec <malloc>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6268      	str	r0, [r5, #36]	; 0x24
 80065c8:	b920      	cbnz	r0, 80065d4 <_Bfree+0x20>
 80065ca:	218a      	movs	r1, #138	; 0x8a
 80065cc:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <_Bfree+0x3c>)
 80065ce:	4809      	ldr	r0, [pc, #36]	; (80065f4 <_Bfree+0x40>)
 80065d0:	f000 fc32 	bl	8006e38 <__assert_func>
 80065d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065d8:	6006      	str	r6, [r0, #0]
 80065da:	60c6      	str	r6, [r0, #12]
 80065dc:	b13c      	cbz	r4, 80065ee <_Bfree+0x3a>
 80065de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065e0:	6862      	ldr	r2, [r4, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e8:	6021      	str	r1, [r4, #0]
 80065ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	08007ad2 	.word	0x08007ad2
 80065f4:	08007b55 	.word	0x08007b55

080065f8 <__multadd>:
 80065f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fc:	4607      	mov	r7, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	461e      	mov	r6, r3
 8006602:	2000      	movs	r0, #0
 8006604:	690d      	ldr	r5, [r1, #16]
 8006606:	f101 0c14 	add.w	ip, r1, #20
 800660a:	f8dc 3000 	ldr.w	r3, [ip]
 800660e:	3001      	adds	r0, #1
 8006610:	b299      	uxth	r1, r3
 8006612:	fb02 6101 	mla	r1, r2, r1, r6
 8006616:	0c1e      	lsrs	r6, r3, #16
 8006618:	0c0b      	lsrs	r3, r1, #16
 800661a:	fb02 3306 	mla	r3, r2, r6, r3
 800661e:	b289      	uxth	r1, r1
 8006620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006624:	4285      	cmp	r5, r0
 8006626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800662a:	f84c 1b04 	str.w	r1, [ip], #4
 800662e:	dcec      	bgt.n	800660a <__multadd+0x12>
 8006630:	b30e      	cbz	r6, 8006676 <__multadd+0x7e>
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	42ab      	cmp	r3, r5
 8006636:	dc19      	bgt.n	800666c <__multadd+0x74>
 8006638:	6861      	ldr	r1, [r4, #4]
 800663a:	4638      	mov	r0, r7
 800663c:	3101      	adds	r1, #1
 800663e:	f7ff ff79 	bl	8006534 <_Balloc>
 8006642:	4680      	mov	r8, r0
 8006644:	b928      	cbnz	r0, 8006652 <__multadd+0x5a>
 8006646:	4602      	mov	r2, r0
 8006648:	21b5      	movs	r1, #181	; 0xb5
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <__multadd+0x84>)
 800664c:	480c      	ldr	r0, [pc, #48]	; (8006680 <__multadd+0x88>)
 800664e:	f000 fbf3 	bl	8006e38 <__assert_func>
 8006652:	6922      	ldr	r2, [r4, #16]
 8006654:	f104 010c 	add.w	r1, r4, #12
 8006658:	3202      	adds	r2, #2
 800665a:	0092      	lsls	r2, r2, #2
 800665c:	300c      	adds	r0, #12
 800665e:	f7ff ff5b 	bl	8006518 <memcpy>
 8006662:	4621      	mov	r1, r4
 8006664:	4638      	mov	r0, r7
 8006666:	f7ff ffa5 	bl	80065b4 <_Bfree>
 800666a:	4644      	mov	r4, r8
 800666c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006670:	3501      	adds	r5, #1
 8006672:	615e      	str	r6, [r3, #20]
 8006674:	6125      	str	r5, [r4, #16]
 8006676:	4620      	mov	r0, r4
 8006678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800667c:	08007b44 	.word	0x08007b44
 8006680:	08007b55 	.word	0x08007b55

08006684 <__hi0bits>:
 8006684:	0c02      	lsrs	r2, r0, #16
 8006686:	0412      	lsls	r2, r2, #16
 8006688:	4603      	mov	r3, r0
 800668a:	b9ca      	cbnz	r2, 80066c0 <__hi0bits+0x3c>
 800668c:	0403      	lsls	r3, r0, #16
 800668e:	2010      	movs	r0, #16
 8006690:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006694:	bf04      	itt	eq
 8006696:	021b      	lsleq	r3, r3, #8
 8006698:	3008      	addeq	r0, #8
 800669a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800669e:	bf04      	itt	eq
 80066a0:	011b      	lsleq	r3, r3, #4
 80066a2:	3004      	addeq	r0, #4
 80066a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066a8:	bf04      	itt	eq
 80066aa:	009b      	lsleq	r3, r3, #2
 80066ac:	3002      	addeq	r0, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	db05      	blt.n	80066be <__hi0bits+0x3a>
 80066b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066b6:	f100 0001 	add.w	r0, r0, #1
 80066ba:	bf08      	it	eq
 80066bc:	2020      	moveq	r0, #32
 80066be:	4770      	bx	lr
 80066c0:	2000      	movs	r0, #0
 80066c2:	e7e5      	b.n	8006690 <__hi0bits+0xc>

080066c4 <__lo0bits>:
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	4602      	mov	r2, r0
 80066c8:	f013 0007 	ands.w	r0, r3, #7
 80066cc:	d00b      	beq.n	80066e6 <__lo0bits+0x22>
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	d421      	bmi.n	8006716 <__lo0bits+0x52>
 80066d2:	0798      	lsls	r0, r3, #30
 80066d4:	bf49      	itett	mi
 80066d6:	085b      	lsrmi	r3, r3, #1
 80066d8:	089b      	lsrpl	r3, r3, #2
 80066da:	2001      	movmi	r0, #1
 80066dc:	6013      	strmi	r3, [r2, #0]
 80066de:	bf5c      	itt	pl
 80066e0:	2002      	movpl	r0, #2
 80066e2:	6013      	strpl	r3, [r2, #0]
 80066e4:	4770      	bx	lr
 80066e6:	b299      	uxth	r1, r3
 80066e8:	b909      	cbnz	r1, 80066ee <__lo0bits+0x2a>
 80066ea:	2010      	movs	r0, #16
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	b2d9      	uxtb	r1, r3
 80066f0:	b909      	cbnz	r1, 80066f6 <__lo0bits+0x32>
 80066f2:	3008      	adds	r0, #8
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	0719      	lsls	r1, r3, #28
 80066f8:	bf04      	itt	eq
 80066fa:	091b      	lsreq	r3, r3, #4
 80066fc:	3004      	addeq	r0, #4
 80066fe:	0799      	lsls	r1, r3, #30
 8006700:	bf04      	itt	eq
 8006702:	089b      	lsreq	r3, r3, #2
 8006704:	3002      	addeq	r0, #2
 8006706:	07d9      	lsls	r1, r3, #31
 8006708:	d403      	bmi.n	8006712 <__lo0bits+0x4e>
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	f100 0001 	add.w	r0, r0, #1
 8006710:	d003      	beq.n	800671a <__lo0bits+0x56>
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	4770      	bx	lr
 8006716:	2000      	movs	r0, #0
 8006718:	4770      	bx	lr
 800671a:	2020      	movs	r0, #32
 800671c:	4770      	bx	lr
	...

08006720 <__i2b>:
 8006720:	b510      	push	{r4, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	2101      	movs	r1, #1
 8006726:	f7ff ff05 	bl	8006534 <_Balloc>
 800672a:	4602      	mov	r2, r0
 800672c:	b928      	cbnz	r0, 800673a <__i2b+0x1a>
 800672e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006732:	4b04      	ldr	r3, [pc, #16]	; (8006744 <__i2b+0x24>)
 8006734:	4804      	ldr	r0, [pc, #16]	; (8006748 <__i2b+0x28>)
 8006736:	f000 fb7f 	bl	8006e38 <__assert_func>
 800673a:	2301      	movs	r3, #1
 800673c:	6144      	str	r4, [r0, #20]
 800673e:	6103      	str	r3, [r0, #16]
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	08007b44 	.word	0x08007b44
 8006748:	08007b55 	.word	0x08007b55

0800674c <__multiply>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	4691      	mov	r9, r2
 8006752:	690a      	ldr	r2, [r1, #16]
 8006754:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006758:	460c      	mov	r4, r1
 800675a:	429a      	cmp	r2, r3
 800675c:	bfbe      	ittt	lt
 800675e:	460b      	movlt	r3, r1
 8006760:	464c      	movlt	r4, r9
 8006762:	4699      	movlt	r9, r3
 8006764:	6927      	ldr	r7, [r4, #16]
 8006766:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800676a:	68a3      	ldr	r3, [r4, #8]
 800676c:	6861      	ldr	r1, [r4, #4]
 800676e:	eb07 060a 	add.w	r6, r7, sl
 8006772:	42b3      	cmp	r3, r6
 8006774:	b085      	sub	sp, #20
 8006776:	bfb8      	it	lt
 8006778:	3101      	addlt	r1, #1
 800677a:	f7ff fedb 	bl	8006534 <_Balloc>
 800677e:	b930      	cbnz	r0, 800678e <__multiply+0x42>
 8006780:	4602      	mov	r2, r0
 8006782:	f240 115d 	movw	r1, #349	; 0x15d
 8006786:	4b43      	ldr	r3, [pc, #268]	; (8006894 <__multiply+0x148>)
 8006788:	4843      	ldr	r0, [pc, #268]	; (8006898 <__multiply+0x14c>)
 800678a:	f000 fb55 	bl	8006e38 <__assert_func>
 800678e:	f100 0514 	add.w	r5, r0, #20
 8006792:	462b      	mov	r3, r5
 8006794:	2200      	movs	r2, #0
 8006796:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800679a:	4543      	cmp	r3, r8
 800679c:	d321      	bcc.n	80067e2 <__multiply+0x96>
 800679e:	f104 0314 	add.w	r3, r4, #20
 80067a2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067a6:	f109 0314 	add.w	r3, r9, #20
 80067aa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067ae:	9202      	str	r2, [sp, #8]
 80067b0:	1b3a      	subs	r2, r7, r4
 80067b2:	3a15      	subs	r2, #21
 80067b4:	f022 0203 	bic.w	r2, r2, #3
 80067b8:	3204      	adds	r2, #4
 80067ba:	f104 0115 	add.w	r1, r4, #21
 80067be:	428f      	cmp	r7, r1
 80067c0:	bf38      	it	cc
 80067c2:	2204      	movcc	r2, #4
 80067c4:	9201      	str	r2, [sp, #4]
 80067c6:	9a02      	ldr	r2, [sp, #8]
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d80c      	bhi.n	80067e8 <__multiply+0x9c>
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	dd03      	ble.n	80067da <__multiply+0x8e>
 80067d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d059      	beq.n	800688e <__multiply+0x142>
 80067da:	6106      	str	r6, [r0, #16]
 80067dc:	b005      	add	sp, #20
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	f843 2b04 	str.w	r2, [r3], #4
 80067e6:	e7d8      	b.n	800679a <__multiply+0x4e>
 80067e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80067ec:	f1ba 0f00 	cmp.w	sl, #0
 80067f0:	d023      	beq.n	800683a <__multiply+0xee>
 80067f2:	46a9      	mov	r9, r5
 80067f4:	f04f 0c00 	mov.w	ip, #0
 80067f8:	f104 0e14 	add.w	lr, r4, #20
 80067fc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006800:	f8d9 1000 	ldr.w	r1, [r9]
 8006804:	fa1f fb82 	uxth.w	fp, r2
 8006808:	b289      	uxth	r1, r1
 800680a:	fb0a 110b 	mla	r1, sl, fp, r1
 800680e:	4461      	add	r1, ip
 8006810:	f8d9 c000 	ldr.w	ip, [r9]
 8006814:	0c12      	lsrs	r2, r2, #16
 8006816:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800681a:	fb0a c202 	mla	r2, sl, r2, ip
 800681e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006822:	b289      	uxth	r1, r1
 8006824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006828:	4577      	cmp	r7, lr
 800682a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800682e:	f849 1b04 	str.w	r1, [r9], #4
 8006832:	d8e3      	bhi.n	80067fc <__multiply+0xb0>
 8006834:	9a01      	ldr	r2, [sp, #4]
 8006836:	f845 c002 	str.w	ip, [r5, r2]
 800683a:	9a03      	ldr	r2, [sp, #12]
 800683c:	3304      	adds	r3, #4
 800683e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006842:	f1b9 0f00 	cmp.w	r9, #0
 8006846:	d020      	beq.n	800688a <__multiply+0x13e>
 8006848:	46ae      	mov	lr, r5
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	6829      	ldr	r1, [r5, #0]
 8006850:	f104 0c14 	add.w	ip, r4, #20
 8006854:	f8bc b000 	ldrh.w	fp, [ip]
 8006858:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800685c:	b289      	uxth	r1, r1
 800685e:	fb09 220b 	mla	r2, r9, fp, r2
 8006862:	4492      	add	sl, r2
 8006864:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006868:	f84e 1b04 	str.w	r1, [lr], #4
 800686c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006870:	f8be 1000 	ldrh.w	r1, [lr]
 8006874:	0c12      	lsrs	r2, r2, #16
 8006876:	fb09 1102 	mla	r1, r9, r2, r1
 800687a:	4567      	cmp	r7, ip
 800687c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006880:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006884:	d8e6      	bhi.n	8006854 <__multiply+0x108>
 8006886:	9a01      	ldr	r2, [sp, #4]
 8006888:	50a9      	str	r1, [r5, r2]
 800688a:	3504      	adds	r5, #4
 800688c:	e79b      	b.n	80067c6 <__multiply+0x7a>
 800688e:	3e01      	subs	r6, #1
 8006890:	e79d      	b.n	80067ce <__multiply+0x82>
 8006892:	bf00      	nop
 8006894:	08007b44 	.word	0x08007b44
 8006898:	08007b55 	.word	0x08007b55

0800689c <__pow5mult>:
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	4615      	mov	r5, r2
 80068a2:	f012 0203 	ands.w	r2, r2, #3
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	d007      	beq.n	80068bc <__pow5mult+0x20>
 80068ac:	4c25      	ldr	r4, [pc, #148]	; (8006944 <__pow5mult+0xa8>)
 80068ae:	3a01      	subs	r2, #1
 80068b0:	2300      	movs	r3, #0
 80068b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068b6:	f7ff fe9f 	bl	80065f8 <__multadd>
 80068ba:	4607      	mov	r7, r0
 80068bc:	10ad      	asrs	r5, r5, #2
 80068be:	d03d      	beq.n	800693c <__pow5mult+0xa0>
 80068c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068c2:	b97c      	cbnz	r4, 80068e4 <__pow5mult+0x48>
 80068c4:	2010      	movs	r0, #16
 80068c6:	f7ff fe11 	bl	80064ec <malloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6270      	str	r0, [r6, #36]	; 0x24
 80068ce:	b928      	cbnz	r0, 80068dc <__pow5mult+0x40>
 80068d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068d4:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <__pow5mult+0xac>)
 80068d6:	481d      	ldr	r0, [pc, #116]	; (800694c <__pow5mult+0xb0>)
 80068d8:	f000 faae 	bl	8006e38 <__assert_func>
 80068dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068e0:	6004      	str	r4, [r0, #0]
 80068e2:	60c4      	str	r4, [r0, #12]
 80068e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068ec:	b94c      	cbnz	r4, 8006902 <__pow5mult+0x66>
 80068ee:	f240 2171 	movw	r1, #625	; 0x271
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ff14 	bl	8006720 <__i2b>
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	f04f 0900 	mov.w	r9, #0
 8006906:	07eb      	lsls	r3, r5, #31
 8006908:	d50a      	bpl.n	8006920 <__pow5mult+0x84>
 800690a:	4639      	mov	r1, r7
 800690c:	4622      	mov	r2, r4
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff ff1c 	bl	800674c <__multiply>
 8006914:	4680      	mov	r8, r0
 8006916:	4639      	mov	r1, r7
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff fe4b 	bl	80065b4 <_Bfree>
 800691e:	4647      	mov	r7, r8
 8006920:	106d      	asrs	r5, r5, #1
 8006922:	d00b      	beq.n	800693c <__pow5mult+0xa0>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	b938      	cbnz	r0, 8006938 <__pow5mult+0x9c>
 8006928:	4622      	mov	r2, r4
 800692a:	4621      	mov	r1, r4
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ff0d 	bl	800674c <__multiply>
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	f8c0 9000 	str.w	r9, [r0]
 8006938:	4604      	mov	r4, r0
 800693a:	e7e4      	b.n	8006906 <__pow5mult+0x6a>
 800693c:	4638      	mov	r0, r7
 800693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006942:	bf00      	nop
 8006944:	08007ca8 	.word	0x08007ca8
 8006948:	08007ad2 	.word	0x08007ad2
 800694c:	08007b55 	.word	0x08007b55

08006950 <__lshift>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	4607      	mov	r7, r0
 8006958:	4691      	mov	r9, r2
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	6849      	ldr	r1, [r1, #4]
 800695e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006962:	68a3      	ldr	r3, [r4, #8]
 8006964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006968:	f108 0601 	add.w	r6, r8, #1
 800696c:	42b3      	cmp	r3, r6
 800696e:	db0b      	blt.n	8006988 <__lshift+0x38>
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff fddf 	bl	8006534 <_Balloc>
 8006976:	4605      	mov	r5, r0
 8006978:	b948      	cbnz	r0, 800698e <__lshift+0x3e>
 800697a:	4602      	mov	r2, r0
 800697c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006980:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <__lshift+0xd8>)
 8006982:	482a      	ldr	r0, [pc, #168]	; (8006a2c <__lshift+0xdc>)
 8006984:	f000 fa58 	bl	8006e38 <__assert_func>
 8006988:	3101      	adds	r1, #1
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	e7ee      	b.n	800696c <__lshift+0x1c>
 800698e:	2300      	movs	r3, #0
 8006990:	f100 0114 	add.w	r1, r0, #20
 8006994:	f100 0210 	add.w	r2, r0, #16
 8006998:	4618      	mov	r0, r3
 800699a:	4553      	cmp	r3, sl
 800699c:	db37      	blt.n	8006a0e <__lshift+0xbe>
 800699e:	6920      	ldr	r0, [r4, #16]
 80069a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069a4:	f104 0314 	add.w	r3, r4, #20
 80069a8:	f019 091f 	ands.w	r9, r9, #31
 80069ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80069b4:	d02f      	beq.n	8006a16 <__lshift+0xc6>
 80069b6:	468a      	mov	sl, r1
 80069b8:	f04f 0c00 	mov.w	ip, #0
 80069bc:	f1c9 0e20 	rsb	lr, r9, #32
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	fa02 f209 	lsl.w	r2, r2, r9
 80069c6:	ea42 020c 	orr.w	r2, r2, ip
 80069ca:	f84a 2b04 	str.w	r2, [sl], #4
 80069ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d2:	4298      	cmp	r0, r3
 80069d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80069d8:	d8f2      	bhi.n	80069c0 <__lshift+0x70>
 80069da:	1b03      	subs	r3, r0, r4
 80069dc:	3b15      	subs	r3, #21
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	3304      	adds	r3, #4
 80069e4:	f104 0215 	add.w	r2, r4, #21
 80069e8:	4290      	cmp	r0, r2
 80069ea:	bf38      	it	cc
 80069ec:	2304      	movcc	r3, #4
 80069ee:	f841 c003 	str.w	ip, [r1, r3]
 80069f2:	f1bc 0f00 	cmp.w	ip, #0
 80069f6:	d001      	beq.n	80069fc <__lshift+0xac>
 80069f8:	f108 0602 	add.w	r6, r8, #2
 80069fc:	3e01      	subs	r6, #1
 80069fe:	4638      	mov	r0, r7
 8006a00:	4621      	mov	r1, r4
 8006a02:	612e      	str	r6, [r5, #16]
 8006a04:	f7ff fdd6 	bl	80065b4 <_Bfree>
 8006a08:	4628      	mov	r0, r5
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a12:	3301      	adds	r3, #1
 8006a14:	e7c1      	b.n	800699a <__lshift+0x4a>
 8006a16:	3904      	subs	r1, #4
 8006a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1c:	4298      	cmp	r0, r3
 8006a1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a22:	d8f9      	bhi.n	8006a18 <__lshift+0xc8>
 8006a24:	e7ea      	b.n	80069fc <__lshift+0xac>
 8006a26:	bf00      	nop
 8006a28:	08007b44 	.word	0x08007b44
 8006a2c:	08007b55 	.word	0x08007b55

08006a30 <__mcmp>:
 8006a30:	4603      	mov	r3, r0
 8006a32:	690a      	ldr	r2, [r1, #16]
 8006a34:	6900      	ldr	r0, [r0, #16]
 8006a36:	b530      	push	{r4, r5, lr}
 8006a38:	1a80      	subs	r0, r0, r2
 8006a3a:	d10d      	bne.n	8006a58 <__mcmp+0x28>
 8006a3c:	3314      	adds	r3, #20
 8006a3e:	3114      	adds	r1, #20
 8006a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a50:	4295      	cmp	r5, r2
 8006a52:	d002      	beq.n	8006a5a <__mcmp+0x2a>
 8006a54:	d304      	bcc.n	8006a60 <__mcmp+0x30>
 8006a56:	2001      	movs	r0, #1
 8006a58:	bd30      	pop	{r4, r5, pc}
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	d3f4      	bcc.n	8006a48 <__mcmp+0x18>
 8006a5e:	e7fb      	b.n	8006a58 <__mcmp+0x28>
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	e7f8      	b.n	8006a58 <__mcmp+0x28>
	...

08006a68 <__mdiff>:
 8006a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	4607      	mov	r7, r0
 8006a70:	4611      	mov	r1, r2
 8006a72:	4628      	mov	r0, r5
 8006a74:	4614      	mov	r4, r2
 8006a76:	f7ff ffdb 	bl	8006a30 <__mcmp>
 8006a7a:	1e06      	subs	r6, r0, #0
 8006a7c:	d111      	bne.n	8006aa2 <__mdiff+0x3a>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff fd57 	bl	8006534 <_Balloc>
 8006a86:	4602      	mov	r2, r0
 8006a88:	b928      	cbnz	r0, 8006a96 <__mdiff+0x2e>
 8006a8a:	f240 2132 	movw	r1, #562	; 0x232
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	; (8006b78 <__mdiff+0x110>)
 8006a90:	483a      	ldr	r0, [pc, #232]	; (8006b7c <__mdiff+0x114>)
 8006a92:	f000 f9d1 	bl	8006e38 <__assert_func>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa2:	bfa4      	itt	ge
 8006aa4:	4623      	movge	r3, r4
 8006aa6:	462c      	movge	r4, r5
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	6861      	ldr	r1, [r4, #4]
 8006aac:	bfa6      	itte	ge
 8006aae:	461d      	movge	r5, r3
 8006ab0:	2600      	movge	r6, #0
 8006ab2:	2601      	movlt	r6, #1
 8006ab4:	f7ff fd3e 	bl	8006534 <_Balloc>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	b918      	cbnz	r0, 8006ac4 <__mdiff+0x5c>
 8006abc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ac0:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <__mdiff+0x110>)
 8006ac2:	e7e5      	b.n	8006a90 <__mdiff+0x28>
 8006ac4:	f102 0814 	add.w	r8, r2, #20
 8006ac8:	46c2      	mov	sl, r8
 8006aca:	f04f 0c00 	mov.w	ip, #0
 8006ace:	6927      	ldr	r7, [r4, #16]
 8006ad0:	60c6      	str	r6, [r0, #12]
 8006ad2:	692e      	ldr	r6, [r5, #16]
 8006ad4:	f104 0014 	add.w	r0, r4, #20
 8006ad8:	f105 0914 	add.w	r9, r5, #20
 8006adc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ae0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ae4:	3410      	adds	r4, #16
 8006ae6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006aea:	f859 3b04 	ldr.w	r3, [r9], #4
 8006aee:	fa1f f18b 	uxth.w	r1, fp
 8006af2:	448c      	add	ip, r1
 8006af4:	b299      	uxth	r1, r3
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	ebac 0101 	sub.w	r1, ip, r1
 8006afc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b00:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b04:	b289      	uxth	r1, r1
 8006b06:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b0a:	454e      	cmp	r6, r9
 8006b0c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006b10:	f84a 3b04 	str.w	r3, [sl], #4
 8006b14:	d8e7      	bhi.n	8006ae6 <__mdiff+0x7e>
 8006b16:	1b73      	subs	r3, r6, r5
 8006b18:	3b15      	subs	r3, #21
 8006b1a:	f023 0303 	bic.w	r3, r3, #3
 8006b1e:	3515      	adds	r5, #21
 8006b20:	3304      	adds	r3, #4
 8006b22:	42ae      	cmp	r6, r5
 8006b24:	bf38      	it	cc
 8006b26:	2304      	movcc	r3, #4
 8006b28:	4418      	add	r0, r3
 8006b2a:	4443      	add	r3, r8
 8006b2c:	461e      	mov	r6, r3
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4575      	cmp	r5, lr
 8006b32:	d30e      	bcc.n	8006b52 <__mdiff+0xea>
 8006b34:	f10e 0103 	add.w	r1, lr, #3
 8006b38:	1a09      	subs	r1, r1, r0
 8006b3a:	f021 0103 	bic.w	r1, r1, #3
 8006b3e:	3803      	subs	r0, #3
 8006b40:	4586      	cmp	lr, r0
 8006b42:	bf38      	it	cc
 8006b44:	2100      	movcc	r1, #0
 8006b46:	4419      	add	r1, r3
 8006b48:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006b4c:	b18b      	cbz	r3, 8006b72 <__mdiff+0x10a>
 8006b4e:	6117      	str	r7, [r2, #16]
 8006b50:	e7a4      	b.n	8006a9c <__mdiff+0x34>
 8006b52:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b56:	fa1f f188 	uxth.w	r1, r8
 8006b5a:	4461      	add	r1, ip
 8006b5c:	140c      	asrs	r4, r1, #16
 8006b5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b62:	b289      	uxth	r1, r1
 8006b64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b68:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006b6c:	f846 1b04 	str.w	r1, [r6], #4
 8006b70:	e7de      	b.n	8006b30 <__mdiff+0xc8>
 8006b72:	3f01      	subs	r7, #1
 8006b74:	e7e8      	b.n	8006b48 <__mdiff+0xe0>
 8006b76:	bf00      	nop
 8006b78:	08007b44 	.word	0x08007b44
 8006b7c:	08007b55 	.word	0x08007b55

08006b80 <__d2b>:
 8006b80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b84:	2101      	movs	r1, #1
 8006b86:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006b8a:	4690      	mov	r8, r2
 8006b8c:	461d      	mov	r5, r3
 8006b8e:	f7ff fcd1 	bl	8006534 <_Balloc>
 8006b92:	4604      	mov	r4, r0
 8006b94:	b930      	cbnz	r0, 8006ba4 <__d2b+0x24>
 8006b96:	4602      	mov	r2, r0
 8006b98:	f240 310a 	movw	r1, #778	; 0x30a
 8006b9c:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <__d2b+0xb0>)
 8006b9e:	4825      	ldr	r0, [pc, #148]	; (8006c34 <__d2b+0xb4>)
 8006ba0:	f000 f94a 	bl	8006e38 <__assert_func>
 8006ba4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006ba8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006bac:	bb2d      	cbnz	r5, 8006bfa <__d2b+0x7a>
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006bb4:	d026      	beq.n	8006c04 <__d2b+0x84>
 8006bb6:	4668      	mov	r0, sp
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	f7ff fd83 	bl	80066c4 <__lo0bits>
 8006bbe:	9900      	ldr	r1, [sp, #0]
 8006bc0:	b1f0      	cbz	r0, 8006c00 <__d2b+0x80>
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	f1c0 0320 	rsb	r3, r0, #32
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	40c2      	lsrs	r2, r0
 8006bd0:	6163      	str	r3, [r4, #20]
 8006bd2:	9201      	str	r2, [sp, #4]
 8006bd4:	9b01      	ldr	r3, [sp, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf14      	ite	ne
 8006bda:	2102      	movne	r1, #2
 8006bdc:	2101      	moveq	r1, #1
 8006bde:	61a3      	str	r3, [r4, #24]
 8006be0:	6121      	str	r1, [r4, #16]
 8006be2:	b1c5      	cbz	r5, 8006c16 <__d2b+0x96>
 8006be4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006be8:	4405      	add	r5, r0
 8006bea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bee:	603d      	str	r5, [r7, #0]
 8006bf0:	6030      	str	r0, [r6, #0]
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	b002      	add	sp, #8
 8006bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bfe:	e7d6      	b.n	8006bae <__d2b+0x2e>
 8006c00:	6161      	str	r1, [r4, #20]
 8006c02:	e7e7      	b.n	8006bd4 <__d2b+0x54>
 8006c04:	a801      	add	r0, sp, #4
 8006c06:	f7ff fd5d 	bl	80066c4 <__lo0bits>
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	9b01      	ldr	r3, [sp, #4]
 8006c0e:	6121      	str	r1, [r4, #16]
 8006c10:	6163      	str	r3, [r4, #20]
 8006c12:	3020      	adds	r0, #32
 8006c14:	e7e5      	b.n	8006be2 <__d2b+0x62>
 8006c16:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006c1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c1e:	6038      	str	r0, [r7, #0]
 8006c20:	6918      	ldr	r0, [r3, #16]
 8006c22:	f7ff fd2f 	bl	8006684 <__hi0bits>
 8006c26:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006c2a:	6031      	str	r1, [r6, #0]
 8006c2c:	e7e1      	b.n	8006bf2 <__d2b+0x72>
 8006c2e:	bf00      	nop
 8006c30:	08007b44 	.word	0x08007b44
 8006c34:	08007b55 	.word	0x08007b55

08006c38 <_calloc_r>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	fba1 5402 	umull	r5, r4, r1, r2
 8006c3e:	b934      	cbnz	r4, 8006c4e <_calloc_r+0x16>
 8006c40:	4629      	mov	r1, r5
 8006c42:	f000 f875 	bl	8006d30 <_malloc_r>
 8006c46:	4606      	mov	r6, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <_calloc_r+0x1e>
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
 8006c4e:	220c      	movs	r2, #12
 8006c50:	2600      	movs	r6, #0
 8006c52:	6002      	str	r2, [r0, #0]
 8006c54:	e7f9      	b.n	8006c4a <_calloc_r+0x12>
 8006c56:	462a      	mov	r2, r5
 8006c58:	4621      	mov	r1, r4
 8006c5a:	f7fe f8db 	bl	8004e14 <memset>
 8006c5e:	e7f4      	b.n	8006c4a <_calloc_r+0x12>

08006c60 <_free_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4605      	mov	r5, r0
 8006c64:	2900      	cmp	r1, #0
 8006c66:	d040      	beq.n	8006cea <_free_r+0x8a>
 8006c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6c:	1f0c      	subs	r4, r1, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfb8      	it	lt
 8006c72:	18e4      	addlt	r4, r4, r3
 8006c74:	f000 f922 	bl	8006ebc <__malloc_lock>
 8006c78:	4a1c      	ldr	r2, [pc, #112]	; (8006cec <_free_r+0x8c>)
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	b933      	cbnz	r3, 8006c8c <_free_r+0x2c>
 8006c7e:	6063      	str	r3, [r4, #4]
 8006c80:	6014      	str	r4, [r2, #0]
 8006c82:	4628      	mov	r0, r5
 8006c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c88:	f000 b91e 	b.w	8006ec8 <__malloc_unlock>
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	d908      	bls.n	8006ca2 <_free_r+0x42>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	1821      	adds	r1, r4, r0
 8006c94:	428b      	cmp	r3, r1
 8006c96:	bf01      	itttt	eq
 8006c98:	6819      	ldreq	r1, [r3, #0]
 8006c9a:	685b      	ldreq	r3, [r3, #4]
 8006c9c:	1809      	addeq	r1, r1, r0
 8006c9e:	6021      	streq	r1, [r4, #0]
 8006ca0:	e7ed      	b.n	8006c7e <_free_r+0x1e>
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	b10b      	cbz	r3, 8006cac <_free_r+0x4c>
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	d9fa      	bls.n	8006ca2 <_free_r+0x42>
 8006cac:	6811      	ldr	r1, [r2, #0]
 8006cae:	1850      	adds	r0, r2, r1
 8006cb0:	42a0      	cmp	r0, r4
 8006cb2:	d10b      	bne.n	8006ccc <_free_r+0x6c>
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	4401      	add	r1, r0
 8006cb8:	1850      	adds	r0, r2, r1
 8006cba:	4283      	cmp	r3, r0
 8006cbc:	6011      	str	r1, [r2, #0]
 8006cbe:	d1e0      	bne.n	8006c82 <_free_r+0x22>
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	4401      	add	r1, r0
 8006cc6:	6011      	str	r1, [r2, #0]
 8006cc8:	6053      	str	r3, [r2, #4]
 8006cca:	e7da      	b.n	8006c82 <_free_r+0x22>
 8006ccc:	d902      	bls.n	8006cd4 <_free_r+0x74>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	e7d6      	b.n	8006c82 <_free_r+0x22>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	1821      	adds	r1, r4, r0
 8006cd8:	428b      	cmp	r3, r1
 8006cda:	bf01      	itttt	eq
 8006cdc:	6819      	ldreq	r1, [r3, #0]
 8006cde:	685b      	ldreq	r3, [r3, #4]
 8006ce0:	1809      	addeq	r1, r1, r0
 8006ce2:	6021      	streq	r1, [r4, #0]
 8006ce4:	6063      	str	r3, [r4, #4]
 8006ce6:	6054      	str	r4, [r2, #4]
 8006ce8:	e7cb      	b.n	8006c82 <_free_r+0x22>
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200003c4 	.word	0x200003c4

08006cf0 <sbrk_aligned>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4e0e      	ldr	r6, [pc, #56]	; (8006d2c <sbrk_aligned+0x3c>)
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	6831      	ldr	r1, [r6, #0]
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	b911      	cbnz	r1, 8006d02 <sbrk_aligned+0x12>
 8006cfc:	f000 f88c 	bl	8006e18 <_sbrk_r>
 8006d00:	6030      	str	r0, [r6, #0]
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 f887 	bl	8006e18 <_sbrk_r>
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	d00a      	beq.n	8006d24 <sbrk_aligned+0x34>
 8006d0e:	1cc4      	adds	r4, r0, #3
 8006d10:	f024 0403 	bic.w	r4, r4, #3
 8006d14:	42a0      	cmp	r0, r4
 8006d16:	d007      	beq.n	8006d28 <sbrk_aligned+0x38>
 8006d18:	1a21      	subs	r1, r4, r0
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 f87c 	bl	8006e18 <_sbrk_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d101      	bne.n	8006d28 <sbrk_aligned+0x38>
 8006d24:	f04f 34ff 	mov.w	r4, #4294967295
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	200003c8 	.word	0x200003c8

08006d30 <_malloc_r>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	1ccd      	adds	r5, r1, #3
 8006d36:	f025 0503 	bic.w	r5, r5, #3
 8006d3a:	3508      	adds	r5, #8
 8006d3c:	2d0c      	cmp	r5, #12
 8006d3e:	bf38      	it	cc
 8006d40:	250c      	movcc	r5, #12
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	4607      	mov	r7, r0
 8006d46:	db01      	blt.n	8006d4c <_malloc_r+0x1c>
 8006d48:	42a9      	cmp	r1, r5
 8006d4a:	d905      	bls.n	8006d58 <_malloc_r+0x28>
 8006d4c:	230c      	movs	r3, #12
 8006d4e:	2600      	movs	r6, #0
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	4630      	mov	r0, r6
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d58:	4e2e      	ldr	r6, [pc, #184]	; (8006e14 <_malloc_r+0xe4>)
 8006d5a:	f000 f8af 	bl	8006ebc <__malloc_lock>
 8006d5e:	6833      	ldr	r3, [r6, #0]
 8006d60:	461c      	mov	r4, r3
 8006d62:	bb34      	cbnz	r4, 8006db2 <_malloc_r+0x82>
 8006d64:	4629      	mov	r1, r5
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7ff ffc2 	bl	8006cf0 <sbrk_aligned>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	4604      	mov	r4, r0
 8006d70:	d14d      	bne.n	8006e0e <_malloc_r+0xde>
 8006d72:	6834      	ldr	r4, [r6, #0]
 8006d74:	4626      	mov	r6, r4
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d140      	bne.n	8006dfc <_malloc_r+0xcc>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4638      	mov	r0, r7
 8006d80:	eb04 0803 	add.w	r8, r4, r3
 8006d84:	f000 f848 	bl	8006e18 <_sbrk_r>
 8006d88:	4580      	cmp	r8, r0
 8006d8a:	d13a      	bne.n	8006e02 <_malloc_r+0xd2>
 8006d8c:	6821      	ldr	r1, [r4, #0]
 8006d8e:	3503      	adds	r5, #3
 8006d90:	1a6d      	subs	r5, r5, r1
 8006d92:	f025 0503 	bic.w	r5, r5, #3
 8006d96:	3508      	adds	r5, #8
 8006d98:	2d0c      	cmp	r5, #12
 8006d9a:	bf38      	it	cc
 8006d9c:	250c      	movcc	r5, #12
 8006d9e:	4638      	mov	r0, r7
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7ff ffa5 	bl	8006cf0 <sbrk_aligned>
 8006da6:	3001      	adds	r0, #1
 8006da8:	d02b      	beq.n	8006e02 <_malloc_r+0xd2>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	442b      	add	r3, r5
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	e00e      	b.n	8006dd0 <_malloc_r+0xa0>
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	1b52      	subs	r2, r2, r5
 8006db6:	d41e      	bmi.n	8006df6 <_malloc_r+0xc6>
 8006db8:	2a0b      	cmp	r2, #11
 8006dba:	d916      	bls.n	8006dea <_malloc_r+0xba>
 8006dbc:	1961      	adds	r1, r4, r5
 8006dbe:	42a3      	cmp	r3, r4
 8006dc0:	6025      	str	r5, [r4, #0]
 8006dc2:	bf18      	it	ne
 8006dc4:	6059      	strne	r1, [r3, #4]
 8006dc6:	6863      	ldr	r3, [r4, #4]
 8006dc8:	bf08      	it	eq
 8006dca:	6031      	streq	r1, [r6, #0]
 8006dcc:	5162      	str	r2, [r4, r5]
 8006dce:	604b      	str	r3, [r1, #4]
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f104 060b 	add.w	r6, r4, #11
 8006dd6:	f000 f877 	bl	8006ec8 <__malloc_unlock>
 8006dda:	f026 0607 	bic.w	r6, r6, #7
 8006dde:	1d23      	adds	r3, r4, #4
 8006de0:	1af2      	subs	r2, r6, r3
 8006de2:	d0b6      	beq.n	8006d52 <_malloc_r+0x22>
 8006de4:	1b9b      	subs	r3, r3, r6
 8006de6:	50a3      	str	r3, [r4, r2]
 8006de8:	e7b3      	b.n	8006d52 <_malloc_r+0x22>
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	bf0c      	ite	eq
 8006df0:	6032      	streq	r2, [r6, #0]
 8006df2:	605a      	strne	r2, [r3, #4]
 8006df4:	e7ec      	b.n	8006dd0 <_malloc_r+0xa0>
 8006df6:	4623      	mov	r3, r4
 8006df8:	6864      	ldr	r4, [r4, #4]
 8006dfa:	e7b2      	b.n	8006d62 <_malloc_r+0x32>
 8006dfc:	4634      	mov	r4, r6
 8006dfe:	6876      	ldr	r6, [r6, #4]
 8006e00:	e7b9      	b.n	8006d76 <_malloc_r+0x46>
 8006e02:	230c      	movs	r3, #12
 8006e04:	4638      	mov	r0, r7
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	f000 f85e 	bl	8006ec8 <__malloc_unlock>
 8006e0c:	e7a1      	b.n	8006d52 <_malloc_r+0x22>
 8006e0e:	6025      	str	r5, [r4, #0]
 8006e10:	e7de      	b.n	8006dd0 <_malloc_r+0xa0>
 8006e12:	bf00      	nop
 8006e14:	200003c4 	.word	0x200003c4

08006e18 <_sbrk_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4d05      	ldr	r5, [pc, #20]	; (8006e34 <_sbrk_r+0x1c>)
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7fb f8d2 	bl	8001fcc <_sbrk>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_sbrk_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_sbrk_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	200003cc 	.word	0x200003cc

08006e38 <__assert_func>:
 8006e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <__assert_func+0x2c>)
 8006e40:	4605      	mov	r5, r0
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68d8      	ldr	r0, [r3, #12]
 8006e46:	b14c      	cbz	r4, 8006e5c <__assert_func+0x24>
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <__assert_func+0x30>)
 8006e4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e4e:	9100      	str	r1, [sp, #0]
 8006e50:	462b      	mov	r3, r5
 8006e52:	4906      	ldr	r1, [pc, #24]	; (8006e6c <__assert_func+0x34>)
 8006e54:	f000 f80e 	bl	8006e74 <fiprintf>
 8006e58:	f000 fa62 	bl	8007320 <abort>
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <__assert_func+0x38>)
 8006e5e:	461c      	mov	r4, r3
 8006e60:	e7f3      	b.n	8006e4a <__assert_func+0x12>
 8006e62:	bf00      	nop
 8006e64:	2000000c 	.word	0x2000000c
 8006e68:	08007cb4 	.word	0x08007cb4
 8006e6c:	08007cc1 	.word	0x08007cc1
 8006e70:	08007cef 	.word	0x08007cef

08006e74 <fiprintf>:
 8006e74:	b40e      	push	{r1, r2, r3}
 8006e76:	b503      	push	{r0, r1, lr}
 8006e78:	4601      	mov	r1, r0
 8006e7a:	ab03      	add	r3, sp, #12
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <fiprintf+0x20>)
 8006e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	f000 f84d 	bl	8006f24 <_vfiprintf_r>
 8006e8a:	b002      	add	sp, #8
 8006e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e90:	b003      	add	sp, #12
 8006e92:	4770      	bx	lr
 8006e94:	2000000c 	.word	0x2000000c

08006e98 <__ascii_mbtowc>:
 8006e98:	b082      	sub	sp, #8
 8006e9a:	b901      	cbnz	r1, 8006e9e <__ascii_mbtowc+0x6>
 8006e9c:	a901      	add	r1, sp, #4
 8006e9e:	b142      	cbz	r2, 8006eb2 <__ascii_mbtowc+0x1a>
 8006ea0:	b14b      	cbz	r3, 8006eb6 <__ascii_mbtowc+0x1e>
 8006ea2:	7813      	ldrb	r3, [r2, #0]
 8006ea4:	600b      	str	r3, [r1, #0]
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	1e10      	subs	r0, r2, #0
 8006eaa:	bf18      	it	ne
 8006eac:	2001      	movne	r0, #1
 8006eae:	b002      	add	sp, #8
 8006eb0:	4770      	bx	lr
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	e7fb      	b.n	8006eae <__ascii_mbtowc+0x16>
 8006eb6:	f06f 0001 	mvn.w	r0, #1
 8006eba:	e7f8      	b.n	8006eae <__ascii_mbtowc+0x16>

08006ebc <__malloc_lock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__malloc_lock+0x8>)
 8006ebe:	f000 bbeb 	b.w	8007698 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200003d0 	.word	0x200003d0

08006ec8 <__malloc_unlock>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__malloc_unlock+0x8>)
 8006eca:	f000 bbe6 	b.w	800769a <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	200003d0 	.word	0x200003d0

08006ed4 <__sfputc_r>:
 8006ed4:	6893      	ldr	r3, [r2, #8]
 8006ed6:	b410      	push	{r4}
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	6093      	str	r3, [r2, #8]
 8006ede:	da07      	bge.n	8006ef0 <__sfputc_r+0x1c>
 8006ee0:	6994      	ldr	r4, [r2, #24]
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	db01      	blt.n	8006eea <__sfputc_r+0x16>
 8006ee6:	290a      	cmp	r1, #10
 8006ee8:	d102      	bne.n	8006ef0 <__sfputc_r+0x1c>
 8006eea:	bc10      	pop	{r4}
 8006eec:	f000 b94a 	b.w	8007184 <__swbuf_r>
 8006ef0:	6813      	ldr	r3, [r2, #0]
 8006ef2:	1c58      	adds	r0, r3, #1
 8006ef4:	6010      	str	r0, [r2, #0]
 8006ef6:	7019      	strb	r1, [r3, #0]
 8006ef8:	4608      	mov	r0, r1
 8006efa:	bc10      	pop	{r4}
 8006efc:	4770      	bx	lr

08006efe <__sfputs_r>:
 8006efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f00:	4606      	mov	r6, r0
 8006f02:	460f      	mov	r7, r1
 8006f04:	4614      	mov	r4, r2
 8006f06:	18d5      	adds	r5, r2, r3
 8006f08:	42ac      	cmp	r4, r5
 8006f0a:	d101      	bne.n	8006f10 <__sfputs_r+0x12>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e007      	b.n	8006f20 <__sfputs_r+0x22>
 8006f10:	463a      	mov	r2, r7
 8006f12:	4630      	mov	r0, r6
 8006f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f18:	f7ff ffdc 	bl	8006ed4 <__sfputc_r>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d1f3      	bne.n	8006f08 <__sfputs_r+0xa>
 8006f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f24 <_vfiprintf_r>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	460d      	mov	r5, r1
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	4698      	mov	r8, r3
 8006f2e:	4606      	mov	r6, r0
 8006f30:	b09d      	sub	sp, #116	; 0x74
 8006f32:	b118      	cbz	r0, 8006f3c <_vfiprintf_r+0x18>
 8006f34:	6983      	ldr	r3, [r0, #24]
 8006f36:	b90b      	cbnz	r3, 8006f3c <_vfiprintf_r+0x18>
 8006f38:	f000 fb10 	bl	800755c <__sinit>
 8006f3c:	4b89      	ldr	r3, [pc, #548]	; (8007164 <_vfiprintf_r+0x240>)
 8006f3e:	429d      	cmp	r5, r3
 8006f40:	d11b      	bne.n	8006f7a <_vfiprintf_r+0x56>
 8006f42:	6875      	ldr	r5, [r6, #4]
 8006f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f46:	07d9      	lsls	r1, r3, #31
 8006f48:	d405      	bmi.n	8006f56 <_vfiprintf_r+0x32>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_vfiprintf_r+0x32>
 8006f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f52:	f000 fba1 	bl	8007698 <__retarget_lock_acquire_recursive>
 8006f56:	89ab      	ldrh	r3, [r5, #12]
 8006f58:	071b      	lsls	r3, r3, #28
 8006f5a:	d501      	bpl.n	8006f60 <_vfiprintf_r+0x3c>
 8006f5c:	692b      	ldr	r3, [r5, #16]
 8006f5e:	b9eb      	cbnz	r3, 8006f9c <_vfiprintf_r+0x78>
 8006f60:	4629      	mov	r1, r5
 8006f62:	4630      	mov	r0, r6
 8006f64:	f000 f96e 	bl	8007244 <__swsetup_r>
 8006f68:	b1c0      	cbz	r0, 8006f9c <_vfiprintf_r+0x78>
 8006f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f6c:	07dc      	lsls	r4, r3, #31
 8006f6e:	d50e      	bpl.n	8006f8e <_vfiprintf_r+0x6a>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b01d      	add	sp, #116	; 0x74
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	4b7b      	ldr	r3, [pc, #492]	; (8007168 <_vfiprintf_r+0x244>)
 8006f7c:	429d      	cmp	r5, r3
 8006f7e:	d101      	bne.n	8006f84 <_vfiprintf_r+0x60>
 8006f80:	68b5      	ldr	r5, [r6, #8]
 8006f82:	e7df      	b.n	8006f44 <_vfiprintf_r+0x20>
 8006f84:	4b79      	ldr	r3, [pc, #484]	; (800716c <_vfiprintf_r+0x248>)
 8006f86:	429d      	cmp	r5, r3
 8006f88:	bf08      	it	eq
 8006f8a:	68f5      	ldreq	r5, [r6, #12]
 8006f8c:	e7da      	b.n	8006f44 <_vfiprintf_r+0x20>
 8006f8e:	89ab      	ldrh	r3, [r5, #12]
 8006f90:	0598      	lsls	r0, r3, #22
 8006f92:	d4ed      	bmi.n	8006f70 <_vfiprintf_r+0x4c>
 8006f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f96:	f000 fb80 	bl	800769a <__retarget_lock_release_recursive>
 8006f9a:	e7e9      	b.n	8006f70 <_vfiprintf_r+0x4c>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fa6:	2330      	movs	r3, #48	; 0x30
 8006fa8:	f04f 0901 	mov.w	r9, #1
 8006fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007170 <_vfiprintf_r+0x24c>
 8006fb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fb8:	4623      	mov	r3, r4
 8006fba:	469a      	mov	sl, r3
 8006fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc0:	b10a      	cbz	r2, 8006fc6 <_vfiprintf_r+0xa2>
 8006fc2:	2a25      	cmp	r2, #37	; 0x25
 8006fc4:	d1f9      	bne.n	8006fba <_vfiprintf_r+0x96>
 8006fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fca:	d00b      	beq.n	8006fe4 <_vfiprintf_r+0xc0>
 8006fcc:	465b      	mov	r3, fp
 8006fce:	4622      	mov	r2, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff ff93 	bl	8006efe <__sfputs_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f000 80aa 	beq.w	8007132 <_vfiprintf_r+0x20e>
 8006fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe0:	445a      	add	r2, fp
 8006fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80a2 	beq.w	8007132 <_vfiprintf_r+0x20e>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff8:	f10a 0a01 	add.w	sl, sl, #1
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	9307      	str	r3, [sp, #28]
 8007000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007004:	931a      	str	r3, [sp, #104]	; 0x68
 8007006:	4654      	mov	r4, sl
 8007008:	2205      	movs	r2, #5
 800700a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700e:	4858      	ldr	r0, [pc, #352]	; (8007170 <_vfiprintf_r+0x24c>)
 8007010:	f7ff fa74 	bl	80064fc <memchr>
 8007014:	9a04      	ldr	r2, [sp, #16]
 8007016:	b9d8      	cbnz	r0, 8007050 <_vfiprintf_r+0x12c>
 8007018:	06d1      	lsls	r1, r2, #27
 800701a:	bf44      	itt	mi
 800701c:	2320      	movmi	r3, #32
 800701e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007022:	0713      	lsls	r3, r2, #28
 8007024:	bf44      	itt	mi
 8007026:	232b      	movmi	r3, #43	; 0x2b
 8007028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800702c:	f89a 3000 	ldrb.w	r3, [sl]
 8007030:	2b2a      	cmp	r3, #42	; 0x2a
 8007032:	d015      	beq.n	8007060 <_vfiprintf_r+0x13c>
 8007034:	4654      	mov	r4, sl
 8007036:	2000      	movs	r0, #0
 8007038:	f04f 0c0a 	mov.w	ip, #10
 800703c:	9a07      	ldr	r2, [sp, #28]
 800703e:	4621      	mov	r1, r4
 8007040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007044:	3b30      	subs	r3, #48	; 0x30
 8007046:	2b09      	cmp	r3, #9
 8007048:	d94e      	bls.n	80070e8 <_vfiprintf_r+0x1c4>
 800704a:	b1b0      	cbz	r0, 800707a <_vfiprintf_r+0x156>
 800704c:	9207      	str	r2, [sp, #28]
 800704e:	e014      	b.n	800707a <_vfiprintf_r+0x156>
 8007050:	eba0 0308 	sub.w	r3, r0, r8
 8007054:	fa09 f303 	lsl.w	r3, r9, r3
 8007058:	4313      	orrs	r3, r2
 800705a:	46a2      	mov	sl, r4
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	e7d2      	b.n	8007006 <_vfiprintf_r+0xe2>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	1d19      	adds	r1, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9103      	str	r1, [sp, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfbb      	ittet	lt
 800706c:	425b      	neglt	r3, r3
 800706e:	f042 0202 	orrlt.w	r2, r2, #2
 8007072:	9307      	strge	r3, [sp, #28]
 8007074:	9307      	strlt	r3, [sp, #28]
 8007076:	bfb8      	it	lt
 8007078:	9204      	strlt	r2, [sp, #16]
 800707a:	7823      	ldrb	r3, [r4, #0]
 800707c:	2b2e      	cmp	r3, #46	; 0x2e
 800707e:	d10c      	bne.n	800709a <_vfiprintf_r+0x176>
 8007080:	7863      	ldrb	r3, [r4, #1]
 8007082:	2b2a      	cmp	r3, #42	; 0x2a
 8007084:	d135      	bne.n	80070f2 <_vfiprintf_r+0x1ce>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	3402      	adds	r4, #2
 800708a:	1d1a      	adds	r2, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	9203      	str	r2, [sp, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfb8      	it	lt
 8007094:	f04f 33ff 	movlt.w	r3, #4294967295
 8007098:	9305      	str	r3, [sp, #20]
 800709a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007174 <_vfiprintf_r+0x250>
 800709e:	2203      	movs	r2, #3
 80070a0:	4650      	mov	r0, sl
 80070a2:	7821      	ldrb	r1, [r4, #0]
 80070a4:	f7ff fa2a 	bl	80064fc <memchr>
 80070a8:	b140      	cbz	r0, 80070bc <_vfiprintf_r+0x198>
 80070aa:	2340      	movs	r3, #64	; 0x40
 80070ac:	eba0 000a 	sub.w	r0, r0, sl
 80070b0:	fa03 f000 	lsl.w	r0, r3, r0
 80070b4:	9b04      	ldr	r3, [sp, #16]
 80070b6:	3401      	adds	r4, #1
 80070b8:	4303      	orrs	r3, r0
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c0:	2206      	movs	r2, #6
 80070c2:	482d      	ldr	r0, [pc, #180]	; (8007178 <_vfiprintf_r+0x254>)
 80070c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070c8:	f7ff fa18 	bl	80064fc <memchr>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d03f      	beq.n	8007150 <_vfiprintf_r+0x22c>
 80070d0:	4b2a      	ldr	r3, [pc, #168]	; (800717c <_vfiprintf_r+0x258>)
 80070d2:	bb1b      	cbnz	r3, 800711c <_vfiprintf_r+0x1f8>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	3307      	adds	r3, #7
 80070d8:	f023 0307 	bic.w	r3, r3, #7
 80070dc:	3308      	adds	r3, #8
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e2:	443b      	add	r3, r7
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	e767      	b.n	8006fb8 <_vfiprintf_r+0x94>
 80070e8:	460c      	mov	r4, r1
 80070ea:	2001      	movs	r0, #1
 80070ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80070f0:	e7a5      	b.n	800703e <_vfiprintf_r+0x11a>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f04f 0c0a 	mov.w	ip, #10
 80070f8:	4619      	mov	r1, r3
 80070fa:	3401      	adds	r4, #1
 80070fc:	9305      	str	r3, [sp, #20]
 80070fe:	4620      	mov	r0, r4
 8007100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007104:	3a30      	subs	r2, #48	; 0x30
 8007106:	2a09      	cmp	r2, #9
 8007108:	d903      	bls.n	8007112 <_vfiprintf_r+0x1ee>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0c5      	beq.n	800709a <_vfiprintf_r+0x176>
 800710e:	9105      	str	r1, [sp, #20]
 8007110:	e7c3      	b.n	800709a <_vfiprintf_r+0x176>
 8007112:	4604      	mov	r4, r0
 8007114:	2301      	movs	r3, #1
 8007116:	fb0c 2101 	mla	r1, ip, r1, r2
 800711a:	e7f0      	b.n	80070fe <_vfiprintf_r+0x1da>
 800711c:	ab03      	add	r3, sp, #12
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	462a      	mov	r2, r5
 8007122:	4630      	mov	r0, r6
 8007124:	4b16      	ldr	r3, [pc, #88]	; (8007180 <_vfiprintf_r+0x25c>)
 8007126:	a904      	add	r1, sp, #16
 8007128:	f7fd ff1a 	bl	8004f60 <_printf_float>
 800712c:	4607      	mov	r7, r0
 800712e:	1c78      	adds	r0, r7, #1
 8007130:	d1d6      	bne.n	80070e0 <_vfiprintf_r+0x1bc>
 8007132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007134:	07d9      	lsls	r1, r3, #31
 8007136:	d405      	bmi.n	8007144 <_vfiprintf_r+0x220>
 8007138:	89ab      	ldrh	r3, [r5, #12]
 800713a:	059a      	lsls	r2, r3, #22
 800713c:	d402      	bmi.n	8007144 <_vfiprintf_r+0x220>
 800713e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007140:	f000 faab 	bl	800769a <__retarget_lock_release_recursive>
 8007144:	89ab      	ldrh	r3, [r5, #12]
 8007146:	065b      	lsls	r3, r3, #25
 8007148:	f53f af12 	bmi.w	8006f70 <_vfiprintf_r+0x4c>
 800714c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800714e:	e711      	b.n	8006f74 <_vfiprintf_r+0x50>
 8007150:	ab03      	add	r3, sp, #12
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	462a      	mov	r2, r5
 8007156:	4630      	mov	r0, r6
 8007158:	4b09      	ldr	r3, [pc, #36]	; (8007180 <_vfiprintf_r+0x25c>)
 800715a:	a904      	add	r1, sp, #16
 800715c:	f7fe f99c 	bl	8005498 <_printf_i>
 8007160:	e7e4      	b.n	800712c <_vfiprintf_r+0x208>
 8007162:	bf00      	nop
 8007164:	08007d2c 	.word	0x08007d2c
 8007168:	08007d4c 	.word	0x08007d4c
 800716c:	08007d0c 	.word	0x08007d0c
 8007170:	08007cfa 	.word	0x08007cfa
 8007174:	08007d00 	.word	0x08007d00
 8007178:	08007d04 	.word	0x08007d04
 800717c:	08004f61 	.word	0x08004f61
 8007180:	08006eff 	.word	0x08006eff

08007184 <__swbuf_r>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	460e      	mov	r6, r1
 8007188:	4614      	mov	r4, r2
 800718a:	4605      	mov	r5, r0
 800718c:	b118      	cbz	r0, 8007196 <__swbuf_r+0x12>
 800718e:	6983      	ldr	r3, [r0, #24]
 8007190:	b90b      	cbnz	r3, 8007196 <__swbuf_r+0x12>
 8007192:	f000 f9e3 	bl	800755c <__sinit>
 8007196:	4b21      	ldr	r3, [pc, #132]	; (800721c <__swbuf_r+0x98>)
 8007198:	429c      	cmp	r4, r3
 800719a:	d12b      	bne.n	80071f4 <__swbuf_r+0x70>
 800719c:	686c      	ldr	r4, [r5, #4]
 800719e:	69a3      	ldr	r3, [r4, #24]
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	071a      	lsls	r2, r3, #28
 80071a6:	d52f      	bpl.n	8007208 <__swbuf_r+0x84>
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	b36b      	cbz	r3, 8007208 <__swbuf_r+0x84>
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	b2f6      	uxtb	r6, r6
 80071b2:	1ac0      	subs	r0, r0, r3
 80071b4:	6963      	ldr	r3, [r4, #20]
 80071b6:	4637      	mov	r7, r6
 80071b8:	4283      	cmp	r3, r0
 80071ba:	dc04      	bgt.n	80071c6 <__swbuf_r+0x42>
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f938 	bl	8007434 <_fflush_r>
 80071c4:	bb30      	cbnz	r0, 8007214 <__swbuf_r+0x90>
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	3001      	adds	r0, #1
 80071ca:	3b01      	subs	r3, #1
 80071cc:	60a3      	str	r3, [r4, #8]
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	701e      	strb	r6, [r3, #0]
 80071d6:	6963      	ldr	r3, [r4, #20]
 80071d8:	4283      	cmp	r3, r0
 80071da:	d004      	beq.n	80071e6 <__swbuf_r+0x62>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	07db      	lsls	r3, r3, #31
 80071e0:	d506      	bpl.n	80071f0 <__swbuf_r+0x6c>
 80071e2:	2e0a      	cmp	r6, #10
 80071e4:	d104      	bne.n	80071f0 <__swbuf_r+0x6c>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 f923 	bl	8007434 <_fflush_r>
 80071ee:	b988      	cbnz	r0, 8007214 <__swbuf_r+0x90>
 80071f0:	4638      	mov	r0, r7
 80071f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <__swbuf_r+0x9c>)
 80071f6:	429c      	cmp	r4, r3
 80071f8:	d101      	bne.n	80071fe <__swbuf_r+0x7a>
 80071fa:	68ac      	ldr	r4, [r5, #8]
 80071fc:	e7cf      	b.n	800719e <__swbuf_r+0x1a>
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <__swbuf_r+0xa0>)
 8007200:	429c      	cmp	r4, r3
 8007202:	bf08      	it	eq
 8007204:	68ec      	ldreq	r4, [r5, #12]
 8007206:	e7ca      	b.n	800719e <__swbuf_r+0x1a>
 8007208:	4621      	mov	r1, r4
 800720a:	4628      	mov	r0, r5
 800720c:	f000 f81a 	bl	8007244 <__swsetup_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	d0cb      	beq.n	80071ac <__swbuf_r+0x28>
 8007214:	f04f 37ff 	mov.w	r7, #4294967295
 8007218:	e7ea      	b.n	80071f0 <__swbuf_r+0x6c>
 800721a:	bf00      	nop
 800721c:	08007d2c 	.word	0x08007d2c
 8007220:	08007d4c 	.word	0x08007d4c
 8007224:	08007d0c 	.word	0x08007d0c

08007228 <__ascii_wctomb>:
 8007228:	4603      	mov	r3, r0
 800722a:	4608      	mov	r0, r1
 800722c:	b141      	cbz	r1, 8007240 <__ascii_wctomb+0x18>
 800722e:	2aff      	cmp	r2, #255	; 0xff
 8007230:	d904      	bls.n	800723c <__ascii_wctomb+0x14>
 8007232:	228a      	movs	r2, #138	; 0x8a
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	4770      	bx	lr
 800723c:	2001      	movs	r0, #1
 800723e:	700a      	strb	r2, [r1, #0]
 8007240:	4770      	bx	lr
	...

08007244 <__swsetup_r>:
 8007244:	4b32      	ldr	r3, [pc, #200]	; (8007310 <__swsetup_r+0xcc>)
 8007246:	b570      	push	{r4, r5, r6, lr}
 8007248:	681d      	ldr	r5, [r3, #0]
 800724a:	4606      	mov	r6, r0
 800724c:	460c      	mov	r4, r1
 800724e:	b125      	cbz	r5, 800725a <__swsetup_r+0x16>
 8007250:	69ab      	ldr	r3, [r5, #24]
 8007252:	b913      	cbnz	r3, 800725a <__swsetup_r+0x16>
 8007254:	4628      	mov	r0, r5
 8007256:	f000 f981 	bl	800755c <__sinit>
 800725a:	4b2e      	ldr	r3, [pc, #184]	; (8007314 <__swsetup_r+0xd0>)
 800725c:	429c      	cmp	r4, r3
 800725e:	d10f      	bne.n	8007280 <__swsetup_r+0x3c>
 8007260:	686c      	ldr	r4, [r5, #4]
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d42c      	bmi.n	80072c6 <__swsetup_r+0x82>
 800726c:	06dd      	lsls	r5, r3, #27
 800726e:	d411      	bmi.n	8007294 <__swsetup_r+0x50>
 8007270:	2309      	movs	r3, #9
 8007272:	6033      	str	r3, [r6, #0]
 8007274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	e03e      	b.n	80072fe <__swsetup_r+0xba>
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <__swsetup_r+0xd4>)
 8007282:	429c      	cmp	r4, r3
 8007284:	d101      	bne.n	800728a <__swsetup_r+0x46>
 8007286:	68ac      	ldr	r4, [r5, #8]
 8007288:	e7eb      	b.n	8007262 <__swsetup_r+0x1e>
 800728a:	4b24      	ldr	r3, [pc, #144]	; (800731c <__swsetup_r+0xd8>)
 800728c:	429c      	cmp	r4, r3
 800728e:	bf08      	it	eq
 8007290:	68ec      	ldreq	r4, [r5, #12]
 8007292:	e7e6      	b.n	8007262 <__swsetup_r+0x1e>
 8007294:	0758      	lsls	r0, r3, #29
 8007296:	d512      	bpl.n	80072be <__swsetup_r+0x7a>
 8007298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800729a:	b141      	cbz	r1, 80072ae <__swsetup_r+0x6a>
 800729c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072a0:	4299      	cmp	r1, r3
 80072a2:	d002      	beq.n	80072aa <__swsetup_r+0x66>
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff fcdb 	bl	8006c60 <_free_r>
 80072aa:	2300      	movs	r3, #0
 80072ac:	6363      	str	r3, [r4, #52]	; 0x34
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	2300      	movs	r3, #0
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f043 0308 	orr.w	r3, r3, #8
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	b94b      	cbnz	r3, 80072de <__swsetup_r+0x9a>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d4:	d003      	beq.n	80072de <__swsetup_r+0x9a>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4630      	mov	r0, r6
 80072da:	f000 fa05 	bl	80076e8 <__smakebuf_r>
 80072de:	89a0      	ldrh	r0, [r4, #12]
 80072e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072e4:	f010 0301 	ands.w	r3, r0, #1
 80072e8:	d00a      	beq.n	8007300 <__swsetup_r+0xbc>
 80072ea:	2300      	movs	r3, #0
 80072ec:	60a3      	str	r3, [r4, #8]
 80072ee:	6963      	ldr	r3, [r4, #20]
 80072f0:	425b      	negs	r3, r3
 80072f2:	61a3      	str	r3, [r4, #24]
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	b943      	cbnz	r3, 800730a <__swsetup_r+0xc6>
 80072f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072fc:	d1ba      	bne.n	8007274 <__swsetup_r+0x30>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	0781      	lsls	r1, r0, #30
 8007302:	bf58      	it	pl
 8007304:	6963      	ldrpl	r3, [r4, #20]
 8007306:	60a3      	str	r3, [r4, #8]
 8007308:	e7f4      	b.n	80072f4 <__swsetup_r+0xb0>
 800730a:	2000      	movs	r0, #0
 800730c:	e7f7      	b.n	80072fe <__swsetup_r+0xba>
 800730e:	bf00      	nop
 8007310:	2000000c 	.word	0x2000000c
 8007314:	08007d2c 	.word	0x08007d2c
 8007318:	08007d4c 	.word	0x08007d4c
 800731c:	08007d0c 	.word	0x08007d0c

08007320 <abort>:
 8007320:	2006      	movs	r0, #6
 8007322:	b508      	push	{r3, lr}
 8007324:	f000 fa48 	bl	80077b8 <raise>
 8007328:	2001      	movs	r0, #1
 800732a:	f7fa fddc 	bl	8001ee6 <_exit>
	...

08007330 <__sflush_r>:
 8007330:	898a      	ldrh	r2, [r1, #12]
 8007332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007334:	4605      	mov	r5, r0
 8007336:	0710      	lsls	r0, r2, #28
 8007338:	460c      	mov	r4, r1
 800733a:	d457      	bmi.n	80073ec <__sflush_r+0xbc>
 800733c:	684b      	ldr	r3, [r1, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	dc04      	bgt.n	800734c <__sflush_r+0x1c>
 8007342:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007344:	2b00      	cmp	r3, #0
 8007346:	dc01      	bgt.n	800734c <__sflush_r+0x1c>
 8007348:	2000      	movs	r0, #0
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800734e:	2e00      	cmp	r6, #0
 8007350:	d0fa      	beq.n	8007348 <__sflush_r+0x18>
 8007352:	2300      	movs	r3, #0
 8007354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007358:	682f      	ldr	r7, [r5, #0]
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	d032      	beq.n	80073c4 <__sflush_r+0x94>
 800735e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	075a      	lsls	r2, r3, #29
 8007364:	d505      	bpl.n	8007372 <__sflush_r+0x42>
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	1ac0      	subs	r0, r0, r3
 800736a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800736c:	b10b      	cbz	r3, 8007372 <__sflush_r+0x42>
 800736e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007370:	1ac0      	subs	r0, r0, r3
 8007372:	2300      	movs	r3, #0
 8007374:	4602      	mov	r2, r0
 8007376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007378:	4628      	mov	r0, r5
 800737a:	6a21      	ldr	r1, [r4, #32]
 800737c:	47b0      	blx	r6
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	d106      	bne.n	8007392 <__sflush_r+0x62>
 8007384:	6829      	ldr	r1, [r5, #0]
 8007386:	291d      	cmp	r1, #29
 8007388:	d82c      	bhi.n	80073e4 <__sflush_r+0xb4>
 800738a:	4a29      	ldr	r2, [pc, #164]	; (8007430 <__sflush_r+0x100>)
 800738c:	40ca      	lsrs	r2, r1
 800738e:	07d6      	lsls	r6, r2, #31
 8007390:	d528      	bpl.n	80073e4 <__sflush_r+0xb4>
 8007392:	2200      	movs	r2, #0
 8007394:	6062      	str	r2, [r4, #4]
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	04d9      	lsls	r1, r3, #19
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	d504      	bpl.n	80073a8 <__sflush_r+0x78>
 800739e:	1c42      	adds	r2, r0, #1
 80073a0:	d101      	bne.n	80073a6 <__sflush_r+0x76>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	b903      	cbnz	r3, 80073a8 <__sflush_r+0x78>
 80073a6:	6560      	str	r0, [r4, #84]	; 0x54
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073aa:	602f      	str	r7, [r5, #0]
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d0cb      	beq.n	8007348 <__sflush_r+0x18>
 80073b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b4:	4299      	cmp	r1, r3
 80073b6:	d002      	beq.n	80073be <__sflush_r+0x8e>
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7ff fc51 	bl	8006c60 <_free_r>
 80073be:	2000      	movs	r0, #0
 80073c0:	6360      	str	r0, [r4, #52]	; 0x34
 80073c2:	e7c2      	b.n	800734a <__sflush_r+0x1a>
 80073c4:	6a21      	ldr	r1, [r4, #32]
 80073c6:	2301      	movs	r3, #1
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b0      	blx	r6
 80073cc:	1c41      	adds	r1, r0, #1
 80073ce:	d1c7      	bne.n	8007360 <__sflush_r+0x30>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0c4      	beq.n	8007360 <__sflush_r+0x30>
 80073d6:	2b1d      	cmp	r3, #29
 80073d8:	d001      	beq.n	80073de <__sflush_r+0xae>
 80073da:	2b16      	cmp	r3, #22
 80073dc:	d101      	bne.n	80073e2 <__sflush_r+0xb2>
 80073de:	602f      	str	r7, [r5, #0]
 80073e0:	e7b2      	b.n	8007348 <__sflush_r+0x18>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	e7ae      	b.n	800734a <__sflush_r+0x1a>
 80073ec:	690f      	ldr	r7, [r1, #16]
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	d0aa      	beq.n	8007348 <__sflush_r+0x18>
 80073f2:	0793      	lsls	r3, r2, #30
 80073f4:	bf18      	it	ne
 80073f6:	2300      	movne	r3, #0
 80073f8:	680e      	ldr	r6, [r1, #0]
 80073fa:	bf08      	it	eq
 80073fc:	694b      	ldreq	r3, [r1, #20]
 80073fe:	1bf6      	subs	r6, r6, r7
 8007400:	600f      	str	r7, [r1, #0]
 8007402:	608b      	str	r3, [r1, #8]
 8007404:	2e00      	cmp	r6, #0
 8007406:	dd9f      	ble.n	8007348 <__sflush_r+0x18>
 8007408:	4633      	mov	r3, r6
 800740a:	463a      	mov	r2, r7
 800740c:	4628      	mov	r0, r5
 800740e:	6a21      	ldr	r1, [r4, #32]
 8007410:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007414:	47e0      	blx	ip
 8007416:	2800      	cmp	r0, #0
 8007418:	dc06      	bgt.n	8007428 <__sflush_r+0xf8>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	e790      	b.n	800734a <__sflush_r+0x1a>
 8007428:	4407      	add	r7, r0
 800742a:	1a36      	subs	r6, r6, r0
 800742c:	e7ea      	b.n	8007404 <__sflush_r+0xd4>
 800742e:	bf00      	nop
 8007430:	20400001 	.word	0x20400001

08007434 <_fflush_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	690b      	ldr	r3, [r1, #16]
 8007438:	4605      	mov	r5, r0
 800743a:	460c      	mov	r4, r1
 800743c:	b913      	cbnz	r3, 8007444 <_fflush_r+0x10>
 800743e:	2500      	movs	r5, #0
 8007440:	4628      	mov	r0, r5
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	b118      	cbz	r0, 800744e <_fflush_r+0x1a>
 8007446:	6983      	ldr	r3, [r0, #24]
 8007448:	b90b      	cbnz	r3, 800744e <_fflush_r+0x1a>
 800744a:	f000 f887 	bl	800755c <__sinit>
 800744e:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <_fflush_r+0x6c>)
 8007450:	429c      	cmp	r4, r3
 8007452:	d11b      	bne.n	800748c <_fflush_r+0x58>
 8007454:	686c      	ldr	r4, [r5, #4]
 8007456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0ef      	beq.n	800743e <_fflush_r+0xa>
 800745e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007460:	07d0      	lsls	r0, r2, #31
 8007462:	d404      	bmi.n	800746e <_fflush_r+0x3a>
 8007464:	0599      	lsls	r1, r3, #22
 8007466:	d402      	bmi.n	800746e <_fflush_r+0x3a>
 8007468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800746a:	f000 f915 	bl	8007698 <__retarget_lock_acquire_recursive>
 800746e:	4628      	mov	r0, r5
 8007470:	4621      	mov	r1, r4
 8007472:	f7ff ff5d 	bl	8007330 <__sflush_r>
 8007476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007478:	4605      	mov	r5, r0
 800747a:	07da      	lsls	r2, r3, #31
 800747c:	d4e0      	bmi.n	8007440 <_fflush_r+0xc>
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	059b      	lsls	r3, r3, #22
 8007482:	d4dd      	bmi.n	8007440 <_fflush_r+0xc>
 8007484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007486:	f000 f908 	bl	800769a <__retarget_lock_release_recursive>
 800748a:	e7d9      	b.n	8007440 <_fflush_r+0xc>
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <_fflush_r+0x70>)
 800748e:	429c      	cmp	r4, r3
 8007490:	d101      	bne.n	8007496 <_fflush_r+0x62>
 8007492:	68ac      	ldr	r4, [r5, #8]
 8007494:	e7df      	b.n	8007456 <_fflush_r+0x22>
 8007496:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <_fflush_r+0x74>)
 8007498:	429c      	cmp	r4, r3
 800749a:	bf08      	it	eq
 800749c:	68ec      	ldreq	r4, [r5, #12]
 800749e:	e7da      	b.n	8007456 <_fflush_r+0x22>
 80074a0:	08007d2c 	.word	0x08007d2c
 80074a4:	08007d4c 	.word	0x08007d4c
 80074a8:	08007d0c 	.word	0x08007d0c

080074ac <std>:
 80074ac:	2300      	movs	r3, #0
 80074ae:	b510      	push	{r4, lr}
 80074b0:	4604      	mov	r4, r0
 80074b2:	e9c0 3300 	strd	r3, r3, [r0]
 80074b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ba:	6083      	str	r3, [r0, #8]
 80074bc:	8181      	strh	r1, [r0, #12]
 80074be:	6643      	str	r3, [r0, #100]	; 0x64
 80074c0:	81c2      	strh	r2, [r0, #14]
 80074c2:	6183      	str	r3, [r0, #24]
 80074c4:	4619      	mov	r1, r3
 80074c6:	2208      	movs	r2, #8
 80074c8:	305c      	adds	r0, #92	; 0x5c
 80074ca:	f7fd fca3 	bl	8004e14 <memset>
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <std+0x38>)
 80074d0:	6224      	str	r4, [r4, #32]
 80074d2:	6263      	str	r3, [r4, #36]	; 0x24
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <std+0x3c>)
 80074d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <std+0x40>)
 80074da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <std+0x44>)
 80074de:	6323      	str	r3, [r4, #48]	; 0x30
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop
 80074e4:	080077f1 	.word	0x080077f1
 80074e8:	08007813 	.word	0x08007813
 80074ec:	0800784b 	.word	0x0800784b
 80074f0:	0800786f 	.word	0x0800786f

080074f4 <_cleanup_r>:
 80074f4:	4901      	ldr	r1, [pc, #4]	; (80074fc <_cleanup_r+0x8>)
 80074f6:	f000 b8af 	b.w	8007658 <_fwalk_reent>
 80074fa:	bf00      	nop
 80074fc:	08007435 	.word	0x08007435

08007500 <__sfmoreglue>:
 8007500:	2268      	movs	r2, #104	; 0x68
 8007502:	b570      	push	{r4, r5, r6, lr}
 8007504:	1e4d      	subs	r5, r1, #1
 8007506:	4355      	muls	r5, r2
 8007508:	460e      	mov	r6, r1
 800750a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800750e:	f7ff fc0f 	bl	8006d30 <_malloc_r>
 8007512:	4604      	mov	r4, r0
 8007514:	b140      	cbz	r0, 8007528 <__sfmoreglue+0x28>
 8007516:	2100      	movs	r1, #0
 8007518:	e9c0 1600 	strd	r1, r6, [r0]
 800751c:	300c      	adds	r0, #12
 800751e:	60a0      	str	r0, [r4, #8]
 8007520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007524:	f7fd fc76 	bl	8004e14 <memset>
 8007528:	4620      	mov	r0, r4
 800752a:	bd70      	pop	{r4, r5, r6, pc}

0800752c <__sfp_lock_acquire>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sfp_lock_acquire+0x8>)
 800752e:	f000 b8b3 	b.w	8007698 <__retarget_lock_acquire_recursive>
 8007532:	bf00      	nop
 8007534:	200003d1 	.word	0x200003d1

08007538 <__sfp_lock_release>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__sfp_lock_release+0x8>)
 800753a:	f000 b8ae 	b.w	800769a <__retarget_lock_release_recursive>
 800753e:	bf00      	nop
 8007540:	200003d1 	.word	0x200003d1

08007544 <__sinit_lock_acquire>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__sinit_lock_acquire+0x8>)
 8007546:	f000 b8a7 	b.w	8007698 <__retarget_lock_acquire_recursive>
 800754a:	bf00      	nop
 800754c:	200003d2 	.word	0x200003d2

08007550 <__sinit_lock_release>:
 8007550:	4801      	ldr	r0, [pc, #4]	; (8007558 <__sinit_lock_release+0x8>)
 8007552:	f000 b8a2 	b.w	800769a <__retarget_lock_release_recursive>
 8007556:	bf00      	nop
 8007558:	200003d2 	.word	0x200003d2

0800755c <__sinit>:
 800755c:	b510      	push	{r4, lr}
 800755e:	4604      	mov	r4, r0
 8007560:	f7ff fff0 	bl	8007544 <__sinit_lock_acquire>
 8007564:	69a3      	ldr	r3, [r4, #24]
 8007566:	b11b      	cbz	r3, 8007570 <__sinit+0x14>
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f7ff bff0 	b.w	8007550 <__sinit_lock_release>
 8007570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007574:	6523      	str	r3, [r4, #80]	; 0x50
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <__sinit+0x68>)
 8007578:	4a13      	ldr	r2, [pc, #76]	; (80075c8 <__sinit+0x6c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	62a2      	str	r2, [r4, #40]	; 0x28
 800757e:	42a3      	cmp	r3, r4
 8007580:	bf08      	it	eq
 8007582:	2301      	moveq	r3, #1
 8007584:	4620      	mov	r0, r4
 8007586:	bf08      	it	eq
 8007588:	61a3      	streq	r3, [r4, #24]
 800758a:	f000 f81f 	bl	80075cc <__sfp>
 800758e:	6060      	str	r0, [r4, #4]
 8007590:	4620      	mov	r0, r4
 8007592:	f000 f81b 	bl	80075cc <__sfp>
 8007596:	60a0      	str	r0, [r4, #8]
 8007598:	4620      	mov	r0, r4
 800759a:	f000 f817 	bl	80075cc <__sfp>
 800759e:	2200      	movs	r2, #0
 80075a0:	2104      	movs	r1, #4
 80075a2:	60e0      	str	r0, [r4, #12]
 80075a4:	6860      	ldr	r0, [r4, #4]
 80075a6:	f7ff ff81 	bl	80074ac <std>
 80075aa:	2201      	movs	r2, #1
 80075ac:	2109      	movs	r1, #9
 80075ae:	68a0      	ldr	r0, [r4, #8]
 80075b0:	f7ff ff7c 	bl	80074ac <std>
 80075b4:	2202      	movs	r2, #2
 80075b6:	2112      	movs	r1, #18
 80075b8:	68e0      	ldr	r0, [r4, #12]
 80075ba:	f7ff ff77 	bl	80074ac <std>
 80075be:	2301      	movs	r3, #1
 80075c0:	61a3      	str	r3, [r4, #24]
 80075c2:	e7d1      	b.n	8007568 <__sinit+0xc>
 80075c4:	0800798c 	.word	0x0800798c
 80075c8:	080074f5 	.word	0x080074f5

080075cc <__sfp>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	4607      	mov	r7, r0
 80075d0:	f7ff ffac 	bl	800752c <__sfp_lock_acquire>
 80075d4:	4b1e      	ldr	r3, [pc, #120]	; (8007650 <__sfp+0x84>)
 80075d6:	681e      	ldr	r6, [r3, #0]
 80075d8:	69b3      	ldr	r3, [r6, #24]
 80075da:	b913      	cbnz	r3, 80075e2 <__sfp+0x16>
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff ffbd 	bl	800755c <__sinit>
 80075e2:	3648      	adds	r6, #72	; 0x48
 80075e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	d503      	bpl.n	80075f4 <__sfp+0x28>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	b30b      	cbz	r3, 8007634 <__sfp+0x68>
 80075f0:	6836      	ldr	r6, [r6, #0]
 80075f2:	e7f7      	b.n	80075e4 <__sfp+0x18>
 80075f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075f8:	b9d5      	cbnz	r5, 8007630 <__sfp+0x64>
 80075fa:	4b16      	ldr	r3, [pc, #88]	; (8007654 <__sfp+0x88>)
 80075fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007600:	60e3      	str	r3, [r4, #12]
 8007602:	6665      	str	r5, [r4, #100]	; 0x64
 8007604:	f000 f847 	bl	8007696 <__retarget_lock_init_recursive>
 8007608:	f7ff ff96 	bl	8007538 <__sfp_lock_release>
 800760c:	2208      	movs	r2, #8
 800760e:	4629      	mov	r1, r5
 8007610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007618:	6025      	str	r5, [r4, #0]
 800761a:	61a5      	str	r5, [r4, #24]
 800761c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007620:	f7fd fbf8 	bl	8004e14 <memset>
 8007624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800762c:	4620      	mov	r0, r4
 800762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007630:	3468      	adds	r4, #104	; 0x68
 8007632:	e7d9      	b.n	80075e8 <__sfp+0x1c>
 8007634:	2104      	movs	r1, #4
 8007636:	4638      	mov	r0, r7
 8007638:	f7ff ff62 	bl	8007500 <__sfmoreglue>
 800763c:	4604      	mov	r4, r0
 800763e:	6030      	str	r0, [r6, #0]
 8007640:	2800      	cmp	r0, #0
 8007642:	d1d5      	bne.n	80075f0 <__sfp+0x24>
 8007644:	f7ff ff78 	bl	8007538 <__sfp_lock_release>
 8007648:	230c      	movs	r3, #12
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	e7ee      	b.n	800762c <__sfp+0x60>
 800764e:	bf00      	nop
 8007650:	0800798c 	.word	0x0800798c
 8007654:	ffff0001 	.word	0xffff0001

08007658 <_fwalk_reent>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	4606      	mov	r6, r0
 800765e:	4688      	mov	r8, r1
 8007660:	2700      	movs	r7, #0
 8007662:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800766a:	f1b9 0901 	subs.w	r9, r9, #1
 800766e:	d505      	bpl.n	800767c <_fwalk_reent+0x24>
 8007670:	6824      	ldr	r4, [r4, #0]
 8007672:	2c00      	cmp	r4, #0
 8007674:	d1f7      	bne.n	8007666 <_fwalk_reent+0xe>
 8007676:	4638      	mov	r0, r7
 8007678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800767c:	89ab      	ldrh	r3, [r5, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d907      	bls.n	8007692 <_fwalk_reent+0x3a>
 8007682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007686:	3301      	adds	r3, #1
 8007688:	d003      	beq.n	8007692 <_fwalk_reent+0x3a>
 800768a:	4629      	mov	r1, r5
 800768c:	4630      	mov	r0, r6
 800768e:	47c0      	blx	r8
 8007690:	4307      	orrs	r7, r0
 8007692:	3568      	adds	r5, #104	; 0x68
 8007694:	e7e9      	b.n	800766a <_fwalk_reent+0x12>

08007696 <__retarget_lock_init_recursive>:
 8007696:	4770      	bx	lr

08007698 <__retarget_lock_acquire_recursive>:
 8007698:	4770      	bx	lr

0800769a <__retarget_lock_release_recursive>:
 800769a:	4770      	bx	lr

0800769c <__swhatbuf_r>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	460e      	mov	r6, r1
 80076a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a4:	4614      	mov	r4, r2
 80076a6:	2900      	cmp	r1, #0
 80076a8:	461d      	mov	r5, r3
 80076aa:	b096      	sub	sp, #88	; 0x58
 80076ac:	da08      	bge.n	80076c0 <__swhatbuf_r+0x24>
 80076ae:	2200      	movs	r2, #0
 80076b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	061a      	lsls	r2, r3, #24
 80076b8:	d410      	bmi.n	80076dc <__swhatbuf_r+0x40>
 80076ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076be:	e00e      	b.n	80076de <__swhatbuf_r+0x42>
 80076c0:	466a      	mov	r2, sp
 80076c2:	f000 f8fb 	bl	80078bc <_fstat_r>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	dbf1      	blt.n	80076ae <__swhatbuf_r+0x12>
 80076ca:	9a01      	ldr	r2, [sp, #4]
 80076cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076d4:	425a      	negs	r2, r3
 80076d6:	415a      	adcs	r2, r3
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	e7ee      	b.n	80076ba <__swhatbuf_r+0x1e>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	2000      	movs	r0, #0
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	b016      	add	sp, #88	; 0x58
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080076e8 <__smakebuf_r>:
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076ec:	079d      	lsls	r5, r3, #30
 80076ee:	4606      	mov	r6, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	d507      	bpl.n	8007704 <__smakebuf_r+0x1c>
 80076f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	2301      	movs	r3, #1
 80076fe:	6163      	str	r3, [r4, #20]
 8007700:	b002      	add	sp, #8
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	466a      	mov	r2, sp
 8007706:	ab01      	add	r3, sp, #4
 8007708:	f7ff ffc8 	bl	800769c <__swhatbuf_r>
 800770c:	9900      	ldr	r1, [sp, #0]
 800770e:	4605      	mov	r5, r0
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff fb0d 	bl	8006d30 <_malloc_r>
 8007716:	b948      	cbnz	r0, 800772c <__smakebuf_r+0x44>
 8007718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771c:	059a      	lsls	r2, r3, #22
 800771e:	d4ef      	bmi.n	8007700 <__smakebuf_r+0x18>
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	f043 0302 	orr.w	r3, r3, #2
 8007728:	81a3      	strh	r3, [r4, #12]
 800772a:	e7e3      	b.n	80076f4 <__smakebuf_r+0xc>
 800772c:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <__smakebuf_r+0x7c>)
 800772e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	6020      	str	r0, [r4, #0]
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	9b00      	ldr	r3, [sp, #0]
 800773c:	6120      	str	r0, [r4, #16]
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	b15b      	cbz	r3, 800775c <__smakebuf_r+0x74>
 8007744:	4630      	mov	r0, r6
 8007746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800774a:	f000 f8c9 	bl	80078e0 <_isatty_r>
 800774e:	b128      	cbz	r0, 800775c <__smakebuf_r+0x74>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	89a0      	ldrh	r0, [r4, #12]
 800775e:	4305      	orrs	r5, r0
 8007760:	81a5      	strh	r5, [r4, #12]
 8007762:	e7cd      	b.n	8007700 <__smakebuf_r+0x18>
 8007764:	080074f5 	.word	0x080074f5

08007768 <_raise_r>:
 8007768:	291f      	cmp	r1, #31
 800776a:	b538      	push	{r3, r4, r5, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	460d      	mov	r5, r1
 8007770:	d904      	bls.n	800777c <_raise_r+0x14>
 8007772:	2316      	movs	r3, #22
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	f04f 30ff 	mov.w	r0, #4294967295
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800777e:	b112      	cbz	r2, 8007786 <_raise_r+0x1e>
 8007780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007784:	b94b      	cbnz	r3, 800779a <_raise_r+0x32>
 8007786:	4620      	mov	r0, r4
 8007788:	f000 f830 	bl	80077ec <_getpid_r>
 800778c:	462a      	mov	r2, r5
 800778e:	4601      	mov	r1, r0
 8007790:	4620      	mov	r0, r4
 8007792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007796:	f000 b817 	b.w	80077c8 <_kill_r>
 800779a:	2b01      	cmp	r3, #1
 800779c:	d00a      	beq.n	80077b4 <_raise_r+0x4c>
 800779e:	1c59      	adds	r1, r3, #1
 80077a0:	d103      	bne.n	80077aa <_raise_r+0x42>
 80077a2:	2316      	movs	r3, #22
 80077a4:	6003      	str	r3, [r0, #0]
 80077a6:	2001      	movs	r0, #1
 80077a8:	e7e7      	b.n	800777a <_raise_r+0x12>
 80077aa:	2400      	movs	r4, #0
 80077ac:	4628      	mov	r0, r5
 80077ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077b2:	4798      	blx	r3
 80077b4:	2000      	movs	r0, #0
 80077b6:	e7e0      	b.n	800777a <_raise_r+0x12>

080077b8 <raise>:
 80077b8:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <raise+0xc>)
 80077ba:	4601      	mov	r1, r0
 80077bc:	6818      	ldr	r0, [r3, #0]
 80077be:	f7ff bfd3 	b.w	8007768 <_raise_r>
 80077c2:	bf00      	nop
 80077c4:	2000000c 	.word	0x2000000c

080077c8 <_kill_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	2300      	movs	r3, #0
 80077cc:	4d06      	ldr	r5, [pc, #24]	; (80077e8 <_kill_r+0x20>)
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	f7fa fb76 	bl	8001ec6 <_kill>
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d102      	bne.n	80077e4 <_kill_r+0x1c>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b103      	cbz	r3, 80077e4 <_kill_r+0x1c>
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	bd38      	pop	{r3, r4, r5, pc}
 80077e6:	bf00      	nop
 80077e8:	200003cc 	.word	0x200003cc

080077ec <_getpid_r>:
 80077ec:	f7fa bb64 	b.w	8001eb8 <_getpid>

080077f0 <__sread>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	460c      	mov	r4, r1
 80077f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f8:	f000 f894 	bl	8007924 <_read_r>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	bfab      	itete	ge
 8007800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007802:	89a3      	ldrhlt	r3, [r4, #12]
 8007804:	181b      	addge	r3, r3, r0
 8007806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800780a:	bfac      	ite	ge
 800780c:	6563      	strge	r3, [r4, #84]	; 0x54
 800780e:	81a3      	strhlt	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__swrite>:
 8007812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007816:	461f      	mov	r7, r3
 8007818:	898b      	ldrh	r3, [r1, #12]
 800781a:	4605      	mov	r5, r0
 800781c:	05db      	lsls	r3, r3, #23
 800781e:	460c      	mov	r4, r1
 8007820:	4616      	mov	r6, r2
 8007822:	d505      	bpl.n	8007830 <__swrite+0x1e>
 8007824:	2302      	movs	r3, #2
 8007826:	2200      	movs	r2, #0
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	f000 f868 	bl	8007900 <_lseek_r>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	4632      	mov	r2, r6
 8007834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	4628      	mov	r0, r5
 800783c:	463b      	mov	r3, r7
 800783e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	f000 b817 	b.w	8007878 <_write_r>

0800784a <__sseek>:
 800784a:	b510      	push	{r4, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007852:	f000 f855 	bl	8007900 <_lseek_r>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	bf15      	itete	ne
 800785c:	6560      	strne	r0, [r4, #84]	; 0x54
 800785e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007866:	81a3      	strheq	r3, [r4, #12]
 8007868:	bf18      	it	ne
 800786a:	81a3      	strhne	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__sclose>:
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 b813 	b.w	800789c <_close_r>
	...

08007878 <_write_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4604      	mov	r4, r0
 800787c:	4608      	mov	r0, r1
 800787e:	4611      	mov	r1, r2
 8007880:	2200      	movs	r2, #0
 8007882:	4d05      	ldr	r5, [pc, #20]	; (8007898 <_write_r+0x20>)
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7fa fb54 	bl	8001f34 <_write>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_write_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_write_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	200003cc 	.word	0x200003cc

0800789c <_close_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	2300      	movs	r3, #0
 80078a0:	4d05      	ldr	r5, [pc, #20]	; (80078b8 <_close_r+0x1c>)
 80078a2:	4604      	mov	r4, r0
 80078a4:	4608      	mov	r0, r1
 80078a6:	602b      	str	r3, [r5, #0]
 80078a8:	f7fa fb60 	bl	8001f6c <_close>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d102      	bne.n	80078b6 <_close_r+0x1a>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	b103      	cbz	r3, 80078b6 <_close_r+0x1a>
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	200003cc 	.word	0x200003cc

080078bc <_fstat_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	2300      	movs	r3, #0
 80078c0:	4d06      	ldr	r5, [pc, #24]	; (80078dc <_fstat_r+0x20>)
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	f7fa fb5a 	bl	8001f82 <_fstat>
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	d102      	bne.n	80078d8 <_fstat_r+0x1c>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	b103      	cbz	r3, 80078d8 <_fstat_r+0x1c>
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	200003cc 	.word	0x200003cc

080078e0 <_isatty_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	2300      	movs	r3, #0
 80078e4:	4d05      	ldr	r5, [pc, #20]	; (80078fc <_isatty_r+0x1c>)
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa fb58 	bl	8001fa0 <_isatty>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_isatty_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_isatty_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	200003cc 	.word	0x200003cc

08007900 <_lseek_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	2200      	movs	r2, #0
 800790a:	4d05      	ldr	r5, [pc, #20]	; (8007920 <_lseek_r+0x20>)
 800790c:	602a      	str	r2, [r5, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f7fa fb50 	bl	8001fb4 <_lseek>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_lseek_r+0x1e>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_lseek_r+0x1e>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	200003cc 	.word	0x200003cc

08007924 <_read_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	2200      	movs	r2, #0
 800792e:	4d05      	ldr	r5, [pc, #20]	; (8007944 <_read_r+0x20>)
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7fa fae1 	bl	8001efa <_read>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_read_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_read_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	200003cc 	.word	0x200003cc

08007948 <_init>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr

08007954 <_fini>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr
