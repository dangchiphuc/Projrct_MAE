
pwm_2motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080082c0  080082c0  000182c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d4  080086d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080086d4  080086d4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086d4  080086d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080086dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  080088b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080088b8  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7ba  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002096  00000000  00000000  0002f9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00032978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d14  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100a1  00000000  00000000  0004c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1d8  00000000  00000000  0005c585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea75d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  000ea7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080082a8 	.word	0x080082a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080082a8 	.word	0x080082a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
	{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch,1,100);
 800102c:	1d39      	adds	r1, r7, #4
 800102e:	2364      	movs	r3, #100	; 0x64
 8001030:	2201      	movs	r2, #1
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <__io_putchar+0x20>)
 8001034:	f003 fd2e 	bl	8004a94 <HAL_UART_Transmit>
		return ch;
 8001038:	687b      	ldr	r3, [r7, #4]
	}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000370 	.word	0x20000370

08001048 <HAL_UART_RxCpltCallback>:
void cnterClockwise(motor motor);

/*-----calback function when recieve data via uart-----------
 * Using recieve_IT()
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint8_t i;
				if(huart->Instance == USART2) //uart1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a7e      	ldr	r2, [pc, #504]	; (8001250 <HAL_UART_RxCpltCallback+0x208>)
 8001056:	4293      	cmp	r3, r2
 8001058:	f040 80f6 	bne.w	8001248 <HAL_UART_RxCpltCallback+0x200>
				{
						if(rx_indx==0) {for (i=0;i<20;i++) rx_buffer[i] = 0;}
 800105c:	4b7d      	ldr	r3, [pc, #500]	; (8001254 <HAL_UART_RxCpltCallback+0x20c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10c      	bne.n	800107e <HAL_UART_RxCpltCallback+0x36>
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e006      	b.n	8001078 <HAL_UART_RxCpltCallback+0x30>
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4a7a      	ldr	r2, [pc, #488]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 800106e:	2100      	movs	r1, #0
 8001070:	54d1      	strb	r1, [r2, r3]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	3301      	adds	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	2b13      	cmp	r3, #19
 800107c:	d9f5      	bls.n	800106a <HAL_UART_RxCpltCallback+0x22>

				switch(rx_data) {
 800107e:	4b77      	ldr	r3, [pc, #476]	; (800125c <HAL_UART_RxCpltCallback+0x214>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3b2d      	subs	r3, #45	; 0x2d
 8001084:	2b49      	cmp	r3, #73	; 0x49
 8001086:	f200 80d9 	bhi.w	800123c <HAL_UART_RxCpltCallback+0x1f4>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <HAL_UART_RxCpltCallback+0x48>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	08001219 	.word	0x08001219
 8001094:	08001219 	.word	0x08001219
 8001098:	0800123d 	.word	0x0800123d
 800109c:	08001219 	.word	0x08001219
 80010a0:	08001219 	.word	0x08001219
 80010a4:	08001219 	.word	0x08001219
 80010a8:	08001219 	.word	0x08001219
 80010ac:	08001219 	.word	0x08001219
 80010b0:	08001219 	.word	0x08001219
 80010b4:	08001219 	.word	0x08001219
 80010b8:	08001219 	.word	0x08001219
 80010bc:	08001219 	.word	0x08001219
 80010c0:	08001219 	.word	0x08001219
 80010c4:	0800123d 	.word	0x0800123d
 80010c8:	0800123d 	.word	0x0800123d
 80010cc:	0800123d 	.word	0x0800123d
 80010d0:	0800123d 	.word	0x0800123d
 80010d4:	0800123d 	.word	0x0800123d
 80010d8:	0800123d 	.word	0x0800123d
 80010dc:	0800123d 	.word	0x0800123d
 80010e0:	0800123d 	.word	0x0800123d
 80010e4:	0800123d 	.word	0x0800123d
 80010e8:	0800123d 	.word	0x0800123d
 80010ec:	0800123d 	.word	0x0800123d
 80010f0:	0800123d 	.word	0x0800123d
 80010f4:	0800123d 	.word	0x0800123d
 80010f8:	0800123d 	.word	0x0800123d
 80010fc:	0800123d 	.word	0x0800123d
 8001100:	0800123d 	.word	0x0800123d
 8001104:	0800123d 	.word	0x0800123d
 8001108:	0800123d 	.word	0x0800123d
 800110c:	0800123d 	.word	0x0800123d
 8001110:	0800123d 	.word	0x0800123d
 8001114:	0800123d 	.word	0x0800123d
 8001118:	0800123d 	.word	0x0800123d
 800111c:	0800123d 	.word	0x0800123d
 8001120:	0800123d 	.word	0x0800123d
 8001124:	0800123d 	.word	0x0800123d
 8001128:	0800123d 	.word	0x0800123d
 800112c:	0800123d 	.word	0x0800123d
 8001130:	0800123d 	.word	0x0800123d
 8001134:	0800123d 	.word	0x0800123d
 8001138:	0800123d 	.word	0x0800123d
 800113c:	0800123d 	.word	0x0800123d
 8001140:	0800123d 	.word	0x0800123d
 8001144:	0800123d 	.word	0x0800123d
 8001148:	0800123d 	.word	0x0800123d
 800114c:	0800123d 	.word	0x0800123d
 8001150:	0800123d 	.word	0x0800123d
 8001154:	0800123d 	.word	0x0800123d
 8001158:	0800123d 	.word	0x0800123d
 800115c:	0800123d 	.word	0x0800123d
 8001160:	0800123d 	.word	0x0800123d
 8001164:	0800123d 	.word	0x0800123d
 8001168:	0800123d 	.word	0x0800123d
 800116c:	0800123d 	.word	0x0800123d
 8001170:	080011b9 	.word	0x080011b9
 8001174:	0800123d 	.word	0x0800123d
 8001178:	0800123d 	.word	0x0800123d
 800117c:	0800123d 	.word	0x0800123d
 8001180:	0800123d 	.word	0x0800123d
 8001184:	0800123d 	.word	0x0800123d
 8001188:	080011c9 	.word	0x080011c9
 800118c:	080011d1 	.word	0x080011d1
 8001190:	0800123d 	.word	0x0800123d
 8001194:	0800123d 	.word	0x0800123d
 8001198:	0800123d 	.word	0x0800123d
 800119c:	0800123d 	.word	0x0800123d
 80011a0:	0800123d 	.word	0x0800123d
 80011a4:	080011c1 	.word	0x080011c1
 80011a8:	080011d9 	.word	0x080011d9
 80011ac:	0800123d 	.word	0x0800123d
 80011b0:	0800123d 	.word	0x0800123d
 80011b4:	080011f9 	.word	0x080011f9
		            /* dung dong co */
		            case 'e':
		                run =false;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <HAL_UART_RxCpltCallback+0x218>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
		                break;
 80011be:	e03e      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>

		            /* dong co chay */
		            case 'r':
		                run = true;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_UART_RxCpltCallback+0x218>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		                break;
 80011c6:	e03a      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>
		            case 'k':
						flag = true;
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_UART_RxCpltCallback+0x21c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
						break;
 80011ce:	e036      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>
		            case 'l':
						flag = false;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_UART_RxCpltCallback+0x21c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
						break;
 80011d6:	e032      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>
		            case 'b':
		//								reset();
										break;
		            case 's':
		                DesiredPos = atoi((const char *)rx_buffer);
 80011d8:	481f      	ldr	r0, [pc, #124]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 80011da:	f004 fa83 	bl	80056e4 <atoi>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_UART_RxCpltCallback+0x220>)
 80011e4:	801a      	strh	r2, [r3, #0]
		                memset(&rx_buffer, 0, sizeof(rx_buffer));
 80011e6:	2214      	movs	r2, #20
 80011e8:	2100      	movs	r1, #0
 80011ea:	481b      	ldr	r0, [pc, #108]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 80011ec:	f004 fab0 	bl	8005750 <memset>
		                rx_indx = 0;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UART_RxCpltCallback+0x20c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
		                break;
 80011f6:	e022      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>
		            case 'v':
		                DesiredSpeed = atoi((const char *)rx_buffer);
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 80011fa:	f004 fa73 	bl	80056e4 <atoi>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_UART_RxCpltCallback+0x224>)
 8001204:	801a      	strh	r2, [r3, #0]
		                //DesiredVel = DesiredSpeed * (pi/30);
		                memset(&rx_buffer, 0, sizeof(rx_buffer));
 8001206:	2214      	movs	r2, #20
 8001208:	2100      	movs	r1, #0
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 800120c:	f004 faa0 	bl	8005750 <memset>
		                rx_indx = 0;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_UART_RxCpltCallback+0x20c>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		                break;
 8001216:	e012      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>
		            case '7':
		            case '8':
		            case '9':
		            case '.':
		            case '-':
		                rx_buffer[rx_indx++] |= rx_data;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_UART_RxCpltCallback+0x20c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	b2d1      	uxtb	r1, r2
 8001220:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <HAL_UART_RxCpltCallback+0x20c>)
 8001222:	7011      	strb	r1, [r2, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 8001228:	5c51      	ldrb	r1, [r2, r1]
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_UART_RxCpltCallback+0x214>)
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	ea41 0302 	orr.w	r3, r1, r2
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_UART_RxCpltCallback+0x210>)
 8001238:	541a      	strb	r2, [r3, r0]
		                break;
 800123a:	e000      	b.n	800123e <HAL_UART_RxCpltCallback+0x1f6>
		            default:
		                break;
 800123c:	bf00      	nop
		        }
						HAL_UART_Receive_IT(&huart1,&rx_data,1);
 800123e:	2201      	movs	r2, #1
 8001240:	4906      	ldr	r1, [pc, #24]	; (800125c <HAL_UART_RxCpltCallback+0x214>)
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_UART_RxCpltCallback+0x228>)
 8001244:	f003 fca9 	bl	8004b9a <HAL_UART_Receive_IT>
				}
	}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40004400 	.word	0x40004400
 8001254:	200003cd 	.word	0x200003cd
 8001258:	200003b8 	.word	0x200003b8
 800125c:	200003cc 	.word	0x200003cc
 8001260:	200003f0 	.word	0x200003f0
 8001264:	200003f1 	.word	0x200003f1
 8001268:	200003d6 	.word	0x200003d6
 800126c:	200003d8 	.word	0x200003d8
 8001270:	20000328 	.word	0x20000328

08001274 <HAL_GPIO_EXTI_Callback>:

}

	/*--------------xu li ngat ngoai---------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  /*DIO0 interupt detect data transmit or reveived */
  if(GPIO_Pin == DIO0_Pin){
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001284:	d104      	bne.n	8001290 <HAL_GPIO_EXTI_Callback+0x1c>

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	487a      	ldr	r0, [pc, #488]	; (8001474 <HAL_GPIO_EXTI_Callback+0x200>)
 800128c:	f001 ff8f 	bl	80031ae <HAL_GPIO_TogglePin>
   * EXTI in rising and falling mode --- 4 counts for 1 pulse
   * Motor 1: channel A -> EXTI 4 ; channel B -> EXTI 5
   * Motor 2: channel A -> EXTI 6 ; channel B -> EXTI 7*/
  //// encoder motor 1 channel A

  if(GPIO_Pin == M1_A_Pin){
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	2b10      	cmp	r3, #16
 8001294:	f040 8089 	bne.w	80013aa <HAL_GPIO_EXTI_Callback+0x136>
	  uint8_t state =0;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]
	  state  = HAL_GPIO_ReadPin(GPIOA, M1_A_Pin);
 800129c:	2110      	movs	r1, #16
 800129e:	4876      	ldr	r0, [pc, #472]	; (8001478 <HAL_GPIO_EXTI_Callback+0x204>)
 80012a0:	f001 ff56 	bl	8003150 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	75fb      	strb	r3, [r7, #23]
	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M1_B_Pin);
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	b25c      	sxtb	r4, r3
 80012ae:	2120      	movs	r1, #32
 80012b0:	4871      	ldr	r0, [pc, #452]	; (8001478 <HAL_GPIO_EXTI_Callback+0x204>)
 80012b2:	f001 ff4d 	bl	8003150 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4323      	orrs	r3, r4
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	75fb      	strb	r3, [r7, #23]
	  state &= 0x03;
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	75fb      	strb	r3, [r7, #23]
	  switch (state){
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d84a      	bhi.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	08001305 	.word	0x08001305
 80012dc:	08001325 	.word	0x08001325
 80012e0:	08001345 	.word	0x08001345
	  case 0:
		  if(prevState_1 == 1)
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d105      	bne.n	80012f8 <HAL_GPIO_EXTI_Callback+0x84>
			  cnt_pos_1 ++;
 80012ec:	4b64      	ldr	r3, [pc, #400]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a63      	ldr	r2, [pc, #396]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 80012f4:	6013      	str	r3, [r2, #0]
		  else
			  cnt_pos_1 --;
	  break;
 80012f6:	e035      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
			  cnt_pos_1 --;
 80012f8:	4b61      	ldr	r3, [pc, #388]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a60      	ldr	r2, [pc, #384]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001300:	6013      	str	r3, [r2, #0]
	  break;
 8001302:	e02f      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
	  case 1:
	  		  if(prevState_1 == 3)
 8001304:	4b5d      	ldr	r3, [pc, #372]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d105      	bne.n	8001318 <HAL_GPIO_EXTI_Callback+0xa4>
	  			  cnt_pos_1 ++;
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a5b      	ldr	r2, [pc, #364]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001314:	6013      	str	r3, [r2, #0]
	  		  else
	  			  cnt_pos_1 --;
	  break;
 8001316:	e025      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
	  			  cnt_pos_1 --;
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001320:	6013      	str	r3, [r2, #0]
	  break;
 8001322:	e01f      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
	  case 2:
	  		  if(prevState_1 == 0)
 8001324:	4b55      	ldr	r3, [pc, #340]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_GPIO_EXTI_Callback+0xc4>
	  			  cnt_pos_1 ++;
 800132c:	4b54      	ldr	r3, [pc, #336]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a53      	ldr	r2, [pc, #332]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001334:	6013      	str	r3, [r2, #0]
	  		  else
	  			  cnt_pos_1 --;
	  break;
 8001336:	e015      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
	  			  cnt_pos_1 --;
 8001338:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001340:	6013      	str	r3, [r2, #0]
	  break;
 8001342:	e00f      	b.n	8001364 <HAL_GPIO_EXTI_Callback+0xf0>
	  case 3:
	  		  if(prevState_1 == 2)
 8001344:	4b4d      	ldr	r3, [pc, #308]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d105      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0xe4>
	  			  cnt_pos_1 ++;
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a4b      	ldr	r2, [pc, #300]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001354:	6013      	str	r3, [r2, #0]
	  		  else
	  			  cnt_pos_1 --;
	  break;
 8001356:	e004      	b.n	8001362 <HAL_GPIO_EXTI_Callback+0xee>
	  			  cnt_pos_1 --;
 8001358:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001360:	6013      	str	r3, [r2, #0]
	  break;
 8001362:	bf00      	nop
	  }
	  cnt_vel_1 ++;
 8001364:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_GPIO_EXTI_Callback+0x210>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <HAL_GPIO_EXTI_Callback+0x210>)
 800136e:	801a      	strh	r2, [r3, #0]
	  prevState_1 = state;
 8001370:	4a42      	ldr	r2, [pc, #264]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	7013      	strb	r3, [r2, #0]
	  if(cnt_pos_1 >1495){
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 800137e:	db07      	blt.n	8001390 <HAL_GPIO_EXTI_Callback+0x11c>
		  round_1 ++;
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_GPIO_EXTI_Callback+0x214>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a40      	ldr	r2, [pc, #256]	; (8001488 <HAL_GPIO_EXTI_Callback+0x214>)
 8001388:	6013      	str	r3, [r2, #0]
		  cnt_pos_1 =0;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	  }
	  if(cnt_pos_1 < -1495){
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 8001398:	dc07      	bgt.n	80013aa <HAL_GPIO_EXTI_Callback+0x136>
		  round_1 --;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_GPIO_EXTI_Callback+0x214>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a39      	ldr	r2, [pc, #228]	; (8001488 <HAL_GPIO_EXTI_Callback+0x214>)
 80013a2:	6013      	str	r3, [r2, #0]
		  cnt_pos_1 =0;
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
	  }
  }

  //// encoder motor 1 channel B

  if(GPIO_Pin == M1_B_Pin){
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	f040 8096 	bne.w	80014de <HAL_GPIO_EXTI_Callback+0x26a>
  	  uint8_t state =0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75bb      	strb	r3, [r7, #22]
  	  state  = HAL_GPIO_ReadPin(GPIOA, M1_A_Pin);
 80013b6:	2110      	movs	r1, #16
 80013b8:	482f      	ldr	r0, [pc, #188]	; (8001478 <HAL_GPIO_EXTI_Callback+0x204>)
 80013ba:	f001 fec9 	bl	8003150 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	75bb      	strb	r3, [r7, #22]
  	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M1_B_Pin);
 80013c2:	7dbb      	ldrb	r3, [r7, #22]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	b25c      	sxtb	r4, r3
 80013c8:	2120      	movs	r1, #32
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <HAL_GPIO_EXTI_Callback+0x204>)
 80013cc:	f001 fec0 	bl	8003150 <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4323      	orrs	r3, r4
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	75bb      	strb	r3, [r7, #22]
  	  state &= 0x03;
 80013da:	7dbb      	ldrb	r3, [r7, #22]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	75bb      	strb	r3, [r7, #22]
  	  switch (state){
 80013e2:	7dbb      	ldrb	r3, [r7, #22]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d857      	bhi.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001401 	.word	0x08001401
 80013f4:	08001421 	.word	0x08001421
 80013f8:	08001441 	.word	0x08001441
 80013fc:	08001461 	.word	0x08001461
  	  case 0:
  		  if(prevState_1 == 1)
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <HAL_GPIO_EXTI_Callback+0x1a0>
  			  cnt_pos_1 ++;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001410:	6013      	str	r3, [r2, #0]
  		  else
  			  cnt_pos_1 --;
  	  break;
 8001412:	e041      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
  			  cnt_pos_1 --;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3b01      	subs	r3, #1
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800141c:	6013      	str	r3, [r2, #0]
  	  break;
 800141e:	e03b      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
  	  case 1:
		  if(prevState_1 == 3)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_EXTI_Callback+0x1c0>
			  cnt_pos_1 ++;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001430:	6013      	str	r3, [r2, #0]
		  else
			  cnt_pos_1 --;
  	  break;
 8001432:	e031      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
			  cnt_pos_1 --;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3b01      	subs	r3, #1
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800143c:	6013      	str	r3, [r2, #0]
  	  break;
 800143e:	e02b      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
  	  case 2:
		  if(prevState_1 == 0)
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_GPIO_EXTI_Callback+0x1e0>
			  cnt_pos_1 ++;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001450:	6013      	str	r3, [r2, #0]
		  else
			  cnt_pos_1 --;
  	  break;
 8001452:	e021      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
			  cnt_pos_1 --;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800145c:	6013      	str	r3, [r2, #0]
  	  break;
 800145e:	e01b      	b.n	8001498 <HAL_GPIO_EXTI_Callback+0x224>
  	  case 3:
		  if(prevState_1 == 2)
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_GPIO_EXTI_Callback+0x208>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d111      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x218>
			  cnt_pos_1 ++;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001470:	6013      	str	r3, [r2, #0]
		  else
			  cnt_pos_1 --;
  	  break;
 8001472:	e010      	b.n	8001496 <HAL_GPIO_EXTI_Callback+0x222>
 8001474:	40011000 	.word	0x40011000
 8001478:	40010800 	.word	0x40010800
 800147c:	200003ce 	.word	0x200003ce
 8001480:	200003e0 	.word	0x200003e0
 8001484:	200003da 	.word	0x200003da
 8001488:	200003e8 	.word	0x200003e8
			  cnt_pos_1 --;
 800148c:	4b8d      	ldr	r3, [pc, #564]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x450>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	4a8c      	ldr	r2, [pc, #560]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x450>)
 8001494:	6013      	str	r3, [r2, #0]
  	  break;
 8001496:	bf00      	nop
  	  }
  	  cnt_vel_1 ++;
 8001498:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x454>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b89      	ldr	r3, [pc, #548]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x454>)
 80014a2:	801a      	strh	r2, [r3, #0]
  	  prevState_1 = state;
 80014a4:	4a89      	ldr	r2, [pc, #548]	; (80016cc <HAL_GPIO_EXTI_Callback+0x458>)
 80014a6:	7dbb      	ldrb	r3, [r7, #22]
 80014a8:	7013      	strb	r3, [r2, #0]
  	  if(cnt_pos_1 >1495){
 80014aa:	4b86      	ldr	r3, [pc, #536]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x450>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 80014b2:	db07      	blt.n	80014c4 <HAL_GPIO_EXTI_Callback+0x250>
  		  round_1 ++;
 80014b4:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x45c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a85      	ldr	r2, [pc, #532]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x45c>)
 80014bc:	6013      	str	r3, [r2, #0]
  		  cnt_pos_1 =0;
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x450>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
  	  }
  	  if(cnt_pos_1 < -1495){
 80014c4:	4b7f      	ldr	r3, [pc, #508]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x450>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 80014cc:	dc07      	bgt.n	80014de <HAL_GPIO_EXTI_Callback+0x26a>
  		  round_1 --;
 80014ce:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x45c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	4a7e      	ldr	r2, [pc, #504]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x45c>)
 80014d6:	6013      	str	r3, [r2, #0]
  		  cnt_pos_1 =0;
 80014d8:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x450>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
  	  }
    }

  //// encoder motor 2 channel A

  if(GPIO_Pin == M2_A_Pin){
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2b40      	cmp	r3, #64	; 0x40
 80014e2:	f040 808a 	bne.w	80015fa <HAL_GPIO_EXTI_Callback+0x386>
  	  uint8_t state =0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	757b      	strb	r3, [r7, #21]
  	  state  = HAL_GPIO_ReadPin(GPIOA, M2_A_Pin);
 80014ea:	2140      	movs	r1, #64	; 0x40
 80014ec:	4879      	ldr	r0, [pc, #484]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x460>)
 80014ee:	f001 fe2f 	bl	8003150 <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	757b      	strb	r3, [r7, #21]
  	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M2_B_Pin);
 80014f6:	7d7b      	ldrb	r3, [r7, #21]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	b25c      	sxtb	r4, r3
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	4875      	ldr	r0, [pc, #468]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x460>)
 8001500:	f001 fe26 	bl	8003150 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	b25b      	sxtb	r3, r3
 8001508:	4323      	orrs	r3, r4
 800150a:	b25b      	sxtb	r3, r3
 800150c:	757b      	strb	r3, [r7, #21]
  	  state &= 0x03;
 800150e:	7d7b      	ldrb	r3, [r7, #21]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	757b      	strb	r3, [r7, #21]
  	  switch (state){
 8001516:	7d7b      	ldrb	r3, [r7, #21]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d84b      	bhi.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001535 	.word	0x08001535
 8001528:	08001555 	.word	0x08001555
 800152c:	08001575 	.word	0x08001575
 8001530:	08001595 	.word	0x08001595
  	  case 0:
  		  if(prevState_2 == 1)
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x2d4>
  			  cnt_pos_2 ++;
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a66      	ldr	r2, [pc, #408]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001544:	6013      	str	r3, [r2, #0]
  		  else
  			  cnt_pos_2 --;
  	  break;
 8001546:	e035      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
  			  cnt_pos_2 --;
 8001548:	4b64      	ldr	r3, [pc, #400]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a63      	ldr	r2, [pc, #396]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001550:	6013      	str	r3, [r2, #0]
  	  break;
 8001552:	e02f      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
  	  case 1:
  	  		  if(prevState_2 == 3)
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d105      	bne.n	8001568 <HAL_GPIO_EXTI_Callback+0x2f4>
  	  			  cnt_pos_2 ++;
 800155c:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a5e      	ldr	r2, [pc, #376]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001564:	6013      	str	r3, [r2, #0]
  	  		  else
  	  			  cnt_pos_2 --;
  	  break;
 8001566:	e025      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
  	  			  cnt_pos_2 --;
 8001568:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a5b      	ldr	r2, [pc, #364]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001570:	6013      	str	r3, [r2, #0]
  	  break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
  	  case 2:
  	  		  if(prevState_2 == 0)
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_GPIO_EXTI_Callback+0x314>
  	  			  cnt_pos_2 ++;
 800157c:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a56      	ldr	r2, [pc, #344]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001584:	6013      	str	r3, [r2, #0]
  	  		  else
  	  			  cnt_pos_2 --;
  	  break;
 8001586:	e015      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
  	  			  cnt_pos_2 --;
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	4a53      	ldr	r2, [pc, #332]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001590:	6013      	str	r3, [r2, #0]
  	  break;
 8001592:	e00f      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x340>
  	  case 3:
  	  		  if(prevState_2 == 2)
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d105      	bne.n	80015a8 <HAL_GPIO_EXTI_Callback+0x334>
  	  			  cnt_pos_2 ++;
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015a4:	6013      	str	r3, [r2, #0]
  	  		  else
  	  			  cnt_pos_2 --;
  	  break;
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_EXTI_Callback+0x33e>
  	  			  cnt_pos_2 --;
 80015a8:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015b0:	6013      	str	r3, [r2, #0]
  	  break;
 80015b2:	bf00      	nop
  	  }
  	  cnt_vel_2 ++;
 80015b4:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x46c>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x46c>)
 80015be:	801a      	strh	r2, [r3, #0]
  	  prevState_2 = state;
 80015c0:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 80015c2:	7d7b      	ldrb	r3, [r7, #21]
 80015c4:	7013      	strb	r3, [r2, #0]
  	  if(cnt_pos_2 >1495){
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 80015ce:	db07      	blt.n	80015e0 <HAL_GPIO_EXTI_Callback+0x36c>
  		  round_2 ++;
 80015d0:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x470>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a43      	ldr	r2, [pc, #268]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x470>)
 80015d8:	6013      	str	r3, [r2, #0]
  		  cnt_pos_2 =0;
 80015da:	4b40      	ldr	r3, [pc, #256]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
  	  }
  	  if(cnt_pos_2 < -1495){
 80015e0:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 80015e8:	dc07      	bgt.n	80015fa <HAL_GPIO_EXTI_Callback+0x386>
  		  round_2 --;
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x470>)
 80015f2:	6013      	str	r3, [r2, #0]
  		  cnt_pos_2 =0;
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
  	  }
    }

    //// encoder motor 2 channel B

    if(GPIO_Pin == M2_B_Pin){
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b80      	cmp	r3, #128	; 0x80
 80015fe:	f040 809c 	bne.w	800173a <HAL_GPIO_EXTI_Callback+0x4c6>
    	  uint8_t state =0;
 8001602:	2300      	movs	r3, #0
 8001604:	753b      	strb	r3, [r7, #20]
    	  state  = HAL_GPIO_ReadPin(GPIOA, M2_A_Pin);
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	4832      	ldr	r0, [pc, #200]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x460>)
 800160a:	f001 fda1 	bl	8003150 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	753b      	strb	r3, [r7, #20]
    	  state  = (state << 1) | HAL_GPIO_ReadPin(GPIOA, M2_B_Pin);
 8001612:	7d3b      	ldrb	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	b25c      	sxtb	r4, r3
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	482e      	ldr	r0, [pc, #184]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x460>)
 800161c:	f001 fd98 	bl	8003150 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	b25b      	sxtb	r3, r3
 8001624:	4323      	orrs	r3, r4
 8001626:	b25b      	sxtb	r3, r3
 8001628:	753b      	strb	r3, [r7, #20]
    	  state &= 0x03;
 800162a:	7d3b      	ldrb	r3, [r7, #20]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	753b      	strb	r3, [r7, #20]
    	  switch (state){
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d85d      	bhi.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
 8001638:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <HAL_GPIO_EXTI_Callback+0x3cc>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001651 	.word	0x08001651
 8001644:	08001671 	.word	0x08001671
 8001648:	08001691 	.word	0x08001691
 800164c:	080016b1 	.word	0x080016b1
    	  case 0:
    		  if(prevState_2 == 1)
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_GPIO_EXTI_Callback+0x3f0>
    			  cnt_pos_2 ++;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001660:	6013      	str	r3, [r2, #0]
    		  else
    			  cnt_pos_2 --;
    	  break;
 8001662:	e047      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
    			  cnt_pos_2 --;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800166c:	6013      	str	r3, [r2, #0]
    	  break;
 800166e:	e041      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
    	  case 1:
    	  		  if(prevState_2 == 3)
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d105      	bne.n	8001684 <HAL_GPIO_EXTI_Callback+0x410>
    	  			  cnt_pos_2 ++;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001680:	6013      	str	r3, [r2, #0]
    	  		  else
    	  			  cnt_pos_2 --;
    	  break;
 8001682:	e037      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
    	  			  cnt_pos_2 --;
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800168c:	6013      	str	r3, [r2, #0]
    	  break;
 800168e:	e031      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
    	  case 2:
    	  		  if(prevState_2 == 0)
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_GPIO_EXTI_Callback+0x430>
    	  			  cnt_pos_2 ++;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80016a0:	6013      	str	r3, [r2, #0]
    	  		  else
    	  			  cnt_pos_2 --;
    	  break;
 80016a2:	e027      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
    	  			  cnt_pos_2 --;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80016ac:	6013      	str	r3, [r2, #0]
    	  break;
 80016ae:	e021      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0x480>
    	  case 3:
    	  		  if(prevState_2 == 2)
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x464>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d117      	bne.n	80016e8 <HAL_GPIO_EXTI_Callback+0x474>
    	  			  cnt_pos_2 ++;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_GPIO_EXTI_Callback+0x468>)
 80016c0:	6013      	str	r3, [r2, #0]
    	  		  else
    	  			  cnt_pos_2 --;
    	  break;
 80016c2:	e016      	b.n	80016f2 <HAL_GPIO_EXTI_Callback+0x47e>
 80016c4:	200003e0 	.word	0x200003e0
 80016c8:	200003da 	.word	0x200003da
 80016cc:	200003ce 	.word	0x200003ce
 80016d0:	200003e8 	.word	0x200003e8
 80016d4:	40010800 	.word	0x40010800
 80016d8:	200003cf 	.word	0x200003cf
 80016dc:	200003e4 	.word	0x200003e4
 80016e0:	200003dc 	.word	0x200003dc
 80016e4:	200003ec 	.word	0x200003ec
    	  			  cnt_pos_2 --;
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a5d      	ldr	r2, [pc, #372]	; (8001864 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80016f0:	6013      	str	r3, [r2, #0]
    	  break;
 80016f2:	bf00      	nop
    	  }
    	  cnt_vel_2 ++;
 80016f4:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <HAL_GPIO_EXTI_Callback+0x5f4>)
 80016fe:	801a      	strh	r2, [r3, #0]
    	  prevState_2 = state;
 8001700:	4a5a      	ldr	r2, [pc, #360]	; (800186c <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001702:	7d3b      	ldrb	r3, [r7, #20]
 8001704:	7013      	strb	r3, [r2, #0]
    	  if(cnt_pos_2 >1495){
 8001706:	4b57      	ldr	r3, [pc, #348]	; (8001864 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f5b3 6fbb 	cmp.w	r3, #1496	; 0x5d8
 800170e:	db07      	blt.n	8001720 <HAL_GPIO_EXTI_Callback+0x4ac>
    		  round_2 ++;
 8001710:	4b57      	ldr	r3, [pc, #348]	; (8001870 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a56      	ldr	r2, [pc, #344]	; (8001870 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8001718:	6013      	str	r3, [r2, #0]
    		  cnt_pos_2 =0;
 800171a:	4b52      	ldr	r3, [pc, #328]	; (8001864 <HAL_GPIO_EXTI_Callback+0x5f0>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    	  }
    	  if(cnt_pos_2 < -1495){
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f513 6fbb 	cmn.w	r3, #1496	; 0x5d8
 8001728:	dc07      	bgt.n	800173a <HAL_GPIO_EXTI_Callback+0x4c6>
    		  round_2 --;
 800172a:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_GPIO_EXTI_Callback+0x5fc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3b01      	subs	r3, #1
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_GPIO_EXTI_Callback+0x5fc>)
 8001732:	6013      	str	r3, [r2, #0]
    		  cnt_pos_2 =0;
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
    /*
     * Handle interupt for 5 digtal signal from module line tracking
     * Read each pin and save value to 1 byte uin8_t
     * convert state byte to direction of model to pid control 2 wheels.
     *   */
    if(GPIO_Pin == L_1_Pin){
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001740:	d118      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x500>
    	uint8_t state;
    	state = HAL_GPIO_ReadPin(L_1_GPIO_Port, L_1_Pin);
 8001742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001746:	484b      	ldr	r0, [pc, #300]	; (8001874 <HAL_GPIO_EXTI_Callback+0x600>)
 8001748:	f001 fd02 	bl	8003150 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	74fb      	strb	r3, [r7, #19]
    	state_line = (state & 1)?(state_line | (1<<0U)):(state_line ^ (1<<0U));
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_EXTI_Callback+0x4f2>
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_EXTI_Callback+0x4fc>
 8001766:	4b44      	ldr	r3, [pc, #272]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f083 0301 	eor.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4a41      	ldr	r2, [pc, #260]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001772:	7013      	strb	r3, [r2, #0]
    }

    if(GPIO_Pin == L_2_Pin){
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	d118      	bne.n	80017ae <HAL_GPIO_EXTI_Callback+0x53a>
    	uint8_t state;
    	state = HAL_GPIO_ReadPin(L_2_GPIO_Port, L_2_Pin);
 800177c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001780:	483e      	ldr	r0, [pc, #248]	; (800187c <HAL_GPIO_EXTI_Callback+0x608>)
 8001782:	f001 fce5 	bl	8003150 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	74bb      	strb	r3, [r7, #18]
    	state_line = (state & 1)?(state_line | (1<<1U)):(state_line ^ (1<<1U));
 800178a:	7cbb      	ldrb	r3, [r7, #18]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_EXTI_Callback+0x52c>
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e004      	b.n	80017aa <HAL_GPIO_EXTI_Callback+0x536>
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f083 0302 	eor.w	r3, r3, #2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4a33      	ldr	r2, [pc, #204]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 80017ac:	7013      	strb	r3, [r2, #0]
    }

    if(GPIO_Pin == L_3_Pin){
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b4:	d118      	bne.n	80017e8 <HAL_GPIO_EXTI_Callback+0x574>
    	uint8_t state;
    	state = HAL_GPIO_ReadPin(L_3_GPIO_Port, L_3_Pin);
 80017b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ba:	4830      	ldr	r0, [pc, #192]	; (800187c <HAL_GPIO_EXTI_Callback+0x608>)
 80017bc:	f001 fcc8 	bl	8003150 <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	747b      	strb	r3, [r7, #17]
    	state_line = (state & 1)?(state_line | (1<<2U)):(state_line ^ (1<<2U));
 80017c4:	7c7b      	ldrb	r3, [r7, #17]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_EXTI_Callback+0x566>
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_EXTI_Callback+0x570>
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f083 0304 	eor.w	r3, r3, #4
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 80017e6:	7013      	strb	r3, [r2, #0]
    }

    if(GPIO_Pin == L_4_Pin){
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ee:	d118      	bne.n	8001822 <HAL_GPIO_EXTI_Callback+0x5ae>
    	uint8_t state;
    	state = HAL_GPIO_ReadPin(L_4_GPIO_Port, L_4_Pin);
 80017f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f4:	4821      	ldr	r0, [pc, #132]	; (800187c <HAL_GPIO_EXTI_Callback+0x608>)
 80017f6:	f001 fcab 	bl	8003150 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	743b      	strb	r3, [r7, #16]
    	state_line = (state & 1)?(state_line | (1<<3U)):(state_line ^ (1<<3U));
 80017fe:	7c3b      	ldrb	r3, [r7, #16]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_GPIO_EXTI_Callback+0x5a0>
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e004      	b.n	800181e <HAL_GPIO_EXTI_Callback+0x5aa>
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	f083 0308 	eor.w	r3, r3, #8
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001820:	7013      	strb	r3, [r2, #0]
    }

    if(GPIO_Pin == L_5_Pin){
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001828:	d118      	bne.n	800185c <HAL_GPIO_EXTI_Callback+0x5e8>
    	uint8_t state;
    	state = HAL_GPIO_ReadPin(L_5_GPIO_Port, L_5_Pin);
 800182a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182e:	4813      	ldr	r0, [pc, #76]	; (800187c <HAL_GPIO_EXTI_Callback+0x608>)
 8001830:	f001 fc8e 	bl	8003150 <HAL_GPIO_ReadPin>
 8001834:	4603      	mov	r3, r0
 8001836:	73fb      	strb	r3, [r7, #15]
    	state_line = (state & 1)?(state_line | (1<<4U)):(state_line ^ (1<<4U));
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_GPIO_EXTI_Callback+0x5da>
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	b2db      	uxtb	r3, r3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_EXTI_Callback+0x5e4>
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f083 0310 	eor.w	r3, r3, #16
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_GPIO_EXTI_Callback+0x604>)
 800185a:	7013      	strb	r3, [r2, #0]


    }
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	200003e4 	.word	0x200003e4
 8001868:	200003dc 	.word	0x200003dc
 800186c:	200003cf 	.word	0x200003cf
 8001870:	200003ec 	.word	0x200003ec
 8001874:	40010800 	.word	0x40010800
 8001878:	200003d0 	.word	0x200003d0
 800187c:	40010c00 	.word	0x40010c00

08001880 <HAL_TIM_PeriodElapsedCallback>:
/**
 * Using timer callback function() to calculate position and velocity of 2 motors
 * TIM3: period 5ms --- calculate position and velocity
 * TIM4: period 1ms --- transmit data via protocol to host
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b087      	sub	sp, #28
 8001884:	af04      	add	r7, sp, #16
 8001886:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4aa0      	ldr	r2, [pc, #640]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800188e:	4293      	cmp	r3, r2
 8001890:	f040 8107 	bne.w	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x222>

		motor_1.current_Pos = round_1*rad_round + cnt_pos_1*rad_pulse; ///position motor 1: (rad)
 8001894:	4b9f      	ldr	r3, [pc, #636]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe66 	bl	800056c <__aeabi_i2d>
 80018a0:	a393      	add	r3, pc, #588	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fecb 	bl	8000640 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4614      	mov	r4, r2
 80018b0:	461d      	mov	r5, r3
 80018b2:	4b99      	ldr	r3, [pc, #612]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe58 	bl	800056c <__aeabi_i2d>
 80018bc:	a38c      	add	r3, pc, #560	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe febd 	bl	8000640 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80018d4:	f7fe ffde 	bl	8000894 <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fcf8 	bl	80002d4 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f980 	bl	8000bf0 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a8b      	ldr	r2, [pc, #556]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018f4:	6013      	str	r3, [r2, #0]
		motor_1.real_Pos	= motor_1.current_Pos * r_Wheel; 		   /// L = (rad)*R
 80018f6:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe48 	bl	8000590 <__aeabi_f2d>
 8001900:	a37d      	add	r3, pc, #500	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe9b 	bl	8000640 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f96d 	bl	8000bf0 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a81      	ldr	r2, [pc, #516]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800191a:	6053      	str	r3, [r2, #4]
		motor_1.RPM 		= cnt_vel_1 * 8.02139;		 /// v = count*(1/1496)/(0.005/60) (rpm)
 800191c:	4b81      	ldr	r3, [pc, #516]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe23 	bl	800056c <__aeabi_i2d>
 8001926:	a376      	add	r3, pc, #472	; (adr r3, 8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe88 	bl	8000640 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f95a 	bl	8000bf0 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	4a78      	ldr	r2, [pc, #480]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001940:	60d3      	str	r3, [r2, #12]
		cnt_vel_1			= 0;
 8001942:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]
		motor_1.current_Vel	= motor_1.RPM * (pi/30); 	 /// v (rad/s)
 8001948:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe1f 	bl	8000590 <__aeabi_f2d>
 8001952:	a36d      	add	r3, pc, #436	; (adr r3, 8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fe72 	bl	8000640 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f944 	bl	8000bf0 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	4a6d      	ldr	r2, [pc, #436]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800196c:	6093      	str	r3, [r2, #8]

		motor_2.current_Pos = round_2*rad_round + cnt_pos_2*rad_pulse; ///position motor 1: (rad)
 800196e:	4b6e      	ldr	r3, [pc, #440]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdf9 	bl	800056c <__aeabi_i2d>
 800197a:	a35d      	add	r3, pc, #372	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe5e 	bl	8000640 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdeb 	bl	800056c <__aeabi_i2d>
 8001996:	a356      	add	r3, pc, #344	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe fe50 	bl	8000640 <__aeabi_dmul>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80019ae:	f7fe ff71 	bl	8000894 <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc8b 	bl	80002d4 <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f913 	bl	8000bf0 <__aeabi_d2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019ce:	6013      	str	r3, [r2, #0]
		motor_2.real_Pos	= motor_2.current_Pos * r_Wheel; 		   /// L = (rad)*R
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fddb 	bl	8000590 <__aeabi_f2d>
 80019da:	a347      	add	r3, pc, #284	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fe2e 	bl	8000640 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f900 	bl	8000bf0 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80019f4:	6053      	str	r3, [r2, #4]
		motor_2.RPM 		= cnt_vel_2 * 8.02139;		 /// v = count*(1/1496)/(0.005/60) (rpm)
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdb6 	bl	800056c <__aeabi_i2d>
 8001a00:	a33f      	add	r3, pc, #252	; (adr r3, 8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fe1b 	bl	8000640 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8ed 	bl	8000bf0 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a1a:	60d3      	str	r3, [r2, #12]
		cnt_vel_2			= 0;
 8001a1c:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
		motor_2.current_Vel	= motor_2.RPM * (pi/30); 	 /// v (rad/s)
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fdb2 	bl	8000590 <__aeabi_f2d>
 8001a2c:	a336      	add	r3, pc, #216	; (adr r3, 8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fe05 	bl	8000640 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8d7 	bl	8000bf0 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a3a      	ldr	r2, [pc, #232]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a46:	6093      	str	r3, [r2, #8]

		pwm1 = pid_velo(DesiredSpeed, motor_1.RPM, pid_1);
 8001a48:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9d5 	bl	8000dfc <__aeabi_ui2f>
 8001a52:	4684      	mov	ip, r0
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001a56:	68de      	ldr	r6, [r3, #12]
 8001a58:	4c38      	ldr	r4, [pc, #224]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001a5a:	466d      	mov	r5, sp
 8001a5c:	f104 0308 	add.w	r3, r4, #8
 8001a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a66:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001a6a:	4631      	mov	r1, r6
 8001a6c:	4660      	mov	r0, ip
 8001a6e:	f000 f873 	bl	8001b58 <pid_velo>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a78:	801a      	strh	r2, [r3, #0]

		if(run == true){
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0x20c>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,DesiredSpeed);
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
			//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 480);

		}
		if(run == false){
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x222>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0 );
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
		}

	}
	if(htim->Instance == TIM4){
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d11a      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x262>
		if(run == true){
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d016      	beq.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x262>
		tim4_tick ++;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001abe:	801a      	strh	r2, [r3, #0]
		if(tim4_tick == 16){
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	2b10      	cmp	r3, #16
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x262>
			printf("V%d\r\n", (int)motor_1.RPM);
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fa63 	bl	8000f98 <__aeabi_f2iz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481f      	ldr	r0, [pc, #124]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001ad8:	f004 fb7e 	bl	80061d8 <iprintf>
			tim4_tick = 0;
 8001adc:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	801a      	strh	r2, [r3, #0]
//		}
		}

	}

}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	51eb851f 	.word	0x51eb851f
 8001af4:	40091eb8 	.word	0x40091eb8
 8001af8:	0a3d70a4 	.word	0x0a3d70a4
 8001afc:	3fa0a3d7 	.word	0x3fa0a3d7
 8001b00:	a14cec42 	.word	0xa14cec42
 8001b04:	40200af3 	.word	0x40200af3
 8001b08:	46508dff 	.word	0x46508dff
 8001b0c:	3fbacb6f 	.word	0x3fbacb6f
 8001b10:	40000400 	.word	0x40000400
 8001b14:	200003e8 	.word	0x200003e8
 8001b18:	200003e0 	.word	0x200003e0
 8001b1c:	40876000 	.word	0x40876000
 8001b20:	200003f4 	.word	0x200003f4
 8001b24:	200003da 	.word	0x200003da
 8001b28:	200003ec 	.word	0x200003ec
 8001b2c:	200003e4 	.word	0x200003e4
 8001b30:	20000404 	.word	0x20000404
 8001b34:	200003dc 	.word	0x200003dc
 8001b38:	200003d8 	.word	0x200003d8
 8001b3c:	20000414 	.word	0x20000414
 8001b40:	200003d2 	.word	0x200003d2
 8001b44:	200003f0 	.word	0x200003f0
 8001b48:	20000250 	.word	0x20000250
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	200003d4 	.word	0x200003d4
 8001b54:	080082c0 	.word	0x080082c0

08001b58 <pid_velo>:
 * param: setpoint	--- offset value
 * 		  current	--- current value
 * 		  kp,ki,kd	--- P,I,D ratio
*  return: value for pwm
**/
uint16_t pid_velo(float setpoint, float current, pid pid){
 8001b58:	b082      	sub	sp, #8
 8001b5a:	b5b0      	push	{r4, r5, r7, lr}
 8001b5c:	b08c      	sub	sp, #48	; 0x30
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
 8001b64:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b68:	e881 000c 	stmia.w	r1, {r2, r3}

	static float ui_prev =0, err_prev = 0, err_sat = 0, ud_ftr_prev = 0;
	float err,up,ui,ud,pid_term,pid_sat,err_windup, ud_filter;
	uint16_t pwm;
	int16_t HILIM = 1000, LOLIM = 0;
 8001b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001b72:	2300      	movs	r3, #0
 8001b74:	853b      	strh	r3, [r7, #40]	; 0x28

	err 		= setpoint - current						;		/*Error*/
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff f88d 	bl	8000c98 <__aeabi_fsub>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
	up			= pid.kp*err								;		/*Propotion*/
 8001b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b84:	4619      	mov	r1, r3
 8001b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b88:	f7fe faea 	bl	8000160 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	623b      	str	r3, [r7, #32]
	err_windup	= pid.ki*err + pid.kb*err_sat				;		/*Antiwindup*/
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fae3 	bl	8000160 <__aeabi_fmul>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461c      	mov	r4, r3
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba0:	4a5d      	ldr	r2, [pc, #372]	; (8001d18 <pid_velo+0x1c0>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fada 	bl	8000160 <__aeabi_fmul>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff f873 	bl	8000c9c <__addsf3>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	61fb      	str	r3, [r7, #28]
	ui			= ui_prev + err_windup*sample_time			;		/*Intergral*/
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <pid_velo+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fce6 	bl	8000590 <__aeabi_f2d>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	69f8      	ldr	r0, [r7, #28]
 8001bca:	f7fe fce1 	bl	8000590 <__aeabi_f2d>
 8001bce:	a350      	add	r3, pc, #320	; (adr r3, 8001d10 <pid_velo+0x1b8>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd34 	bl	8000640 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fb78 	bl	80002d4 <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff f800 	bl	8000bf0 <__aeabi_d2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
	ud			= pid.kd*(err-err_prev)/sample_time			;		/*Derivatvie*/
 8001bf4:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <pid_velo+0x1c8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bfe:	f7ff f84b 	bl	8000c98 <__aeabi_fsub>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7fe faaa 	bl	8000160 <__aeabi_fmul>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fcbe 	bl	8000590 <__aeabi_f2d>
 8001c14:	a33e      	add	r3, pc, #248	; (adr r3, 8001d10 <pid_velo+0x1b8>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fe3b 	bl	8000894 <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe ffe3 	bl	8000bf0 <__aeabi_d2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	617b      	str	r3, [r7, #20]
	ud_filter	= ud*pid.alpha + (1 - pid.alpha)*ud_ftr_prev;		/*Lowpass filter*/
 8001c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c30:	6979      	ldr	r1, [r7, #20]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fa94 	bl	8000160 <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461c      	mov	r4, r3
 8001c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c44:	f7ff f828 	bl	8000c98 <__aeabi_fsub>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <pid_velo+0x1cc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f7fe fa84 	bl	8000160 <__aeabi_fmul>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff f81d 	bl	8000c9c <__addsf3>
 8001c62:	4603      	mov	r3, r0
 8001c64:	613b      	str	r3, [r7, #16]
	pid_term	= up + ui + ud_filter						;
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	6a38      	ldr	r0, [r7, #32]
 8001c6a:	f7ff f817 	bl	8000c9c <__addsf3>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4619      	mov	r1, r3
 8001c72:	6938      	ldr	r0, [r7, #16]
 8001c74:	f7ff f812 	bl	8000c9c <__addsf3>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]

	////--------SATURATION---------///
	if(pid_term > HILIM)
 8001c7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f8bf 	bl	8000e04 <__aeabi_i2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff f97a 	bl	8000f84 <__aeabi_fcmpgt>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <pid_velo+0x14c>
		pid_sat = HILIM			;
 8001c96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f8b2 	bl	8000e04 <__aeabi_i2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(pid_term < LOLIM)
 8001ca4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f8ab 	bl	8000e04 <__aeabi_i2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff f948 	bl	8000f48 <__aeabi_fcmplt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <pid_velo+0x176>
		pid_sat = LOLIM			;
 8001cbe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f89e 	bl	8000e04 <__aeabi_i2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ccc:	e001      	b.n	8001cd2 <pid_velo+0x17a>
	else
		pid_sat = pid_term		;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	err_sat = pid_sat - pid_term;
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cd6:	f7fe ffdf 	bl	8000c98 <__aeabi_fsub>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <pid_velo+0x1c0>)
 8001ce0:	601a      	str	r2, [r3, #0]
	/*-------------------------------*/

	/*Store previous value for next pid calculate*/
	ui_prev = ui			;
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <pid_velo+0x1c4>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6013      	str	r3, [r2, #0]
	err_prev = err			;
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <pid_velo+0x1c8>)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	6013      	str	r3, [r2, #0]
	ud_ftr_prev = ud_filter	;
 8001cee:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <pid_velo+0x1cc>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	6013      	str	r3, [r2, #0]
	/*-------------------------------------------*/

	pwm = (unsigned int)pid_sat	;
 8001cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cf6:	f7ff f975 	bl	8000fe4 <__aeabi_f2uiz>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	817b      	strh	r3, [r7, #10]
	return pwm;
 8001cfe:	897b      	ldrh	r3, [r7, #10]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d0a:	b002      	add	sp, #8
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	47ae147b 	.word	0x47ae147b
 8001d14:	3f747ae1 	.word	0x3f747ae1
 8001d18:	2000042c 	.word	0x2000042c
 8001d1c:	20000430 	.word	0x20000430
 8001d20:	20000434 	.word	0x20000434
 8001d24:	20000438 	.word	0x20000438

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2c:	f000 fe46 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d30:	f000 f866 	bl	8001e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d34:	f000 fa30 	bl	8002198 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d38:	f000 f8da 	bl	8001ef0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d3c:	f000 f93c 	bl	8001fb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d40:	f000 f988 	bl	8002054 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001d44:	f000 f9d4 	bl	80020f0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001d48:	f000 f89c 	bl	8001e84 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001d4c:	f000 f9fa 	bl	8002144 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /// ham khoi tao 2 kenh pwm cho 2 dong co
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001d50:	2104      	movs	r1, #4
 8001d52:	4821      	ldr	r0, [pc, #132]	; (8001dd8 <main+0xb0>)
 8001d54:	f001 ffe2 	bl	8003d1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8001d58:	2108      	movs	r1, #8
 8001d5a:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <main+0xb0>)
 8001d5c:	f001 ffde 	bl	8003d1c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001d60:	481e      	ldr	r0, [pc, #120]	; (8001ddc <main+0xb4>)
 8001d62:	f001 ff39 	bl	8003bd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001d66:	481e      	ldr	r0, [pc, #120]	; (8001de0 <main+0xb8>)
 8001d68:	f001 ff36 	bl	8003bd8 <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <main+0xb0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <main+0xb0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /// ngat uart_rx
  HAL_UART_Receive_IT(&huart2, &rx_data,1);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4919      	ldr	r1, [pc, #100]	; (8001de4 <main+0xbc>)
 8001d80:	4819      	ldr	r0, [pc, #100]	; (8001de8 <main+0xc0>)
 8001d82:	f002 ff0a 	bl	8004b9a <HAL_UART_Receive_IT>

  /// init value of 2 motors
  motor_1.current_Pos = 0;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <main+0xc4>)
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  motor_1.current_Vel = 0;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <main+0xc4>)
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]

  motor_2.current_Pos = 0;
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <main+0xc8>)
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  motor_2.current_Vel = 0;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <main+0xc8>)
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(state_line){
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <main+0xcc>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b1b      	cmp	r3, #27
 8001dac:	d002      	beq.n	8001db4 <main+0x8c>
 8001dae:	2b1f      	cmp	r3, #31
 8001db0:	d004      	beq.n	8001dbc <main+0x94>
 8001db2:	e007      	b.n	8001dc4 <main+0x9c>

	  	  case 0x1B:
	  		  run = true;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <main+0xd0>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001dba:	e003      	b.n	8001dc4 <main+0x9c>
	  	  case 0x1F:
	  		  run = false;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <main+0xd0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001dc2:	bf00      	nop


	  }

	  HAL_GPIO_TogglePin(GPIOC,LED_Pin );
 8001dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc8:	480c      	ldr	r0, [pc, #48]	; (8001dfc <main+0xd4>)
 8001dca:	f001 f9f0 	bl	80031ae <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 8001dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dd2:	f000 fe55 	bl	8002a80 <HAL_Delay>
	  switch(state_line){
 8001dd6:	e7e6      	b.n	8001da6 <main+0x7e>
 8001dd8:	20000250 	.word	0x20000250
 8001ddc:	20000298 	.word	0x20000298
 8001de0:	200002e0 	.word	0x200002e0
 8001de4:	200003cc 	.word	0x200003cc
 8001de8:	20000370 	.word	0x20000370
 8001dec:	200003f4 	.word	0x200003f4
 8001df0:	20000404 	.word	0x20000404
 8001df4:	200003d0 	.word	0x200003d0
 8001df8:	200003f0 	.word	0x200003f0
 8001dfc:	40011000 	.word	0x40011000

08001e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b090      	sub	sp, #64	; 0x40
 8001e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	2228      	movs	r2, #40	; 0x28
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fc9e 	bl	8005750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e32:	2300      	movs	r3, #0
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 f9e5 	bl	8003210 <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001e4c:	f000 fa66 	bl	800231c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fc52 	bl	8003714 <HAL_RCC_ClockConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e76:	f000 fa51 	bl	800231c <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3740      	adds	r7, #64	; 0x40
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI1_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed6:	f001 fdab 	bl	8003a30 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fa1c 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001f8 	.word	0x200001f8
 8001eec:	40013000 	.word	0x40013000

08001ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12-1;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f1c:	220b      	movs	r2, #11
 8001f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3a:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f3c:	f001 fe9e 	bl	8003c7c <HAL_TIM_PWM_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f46:	f000 f9e9 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4619      	mov	r1, r3
 8001f58:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f5a:	f002 fcdb 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f64:	f000 f9da 	bl	800231c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f80:	f002 f876 	bl	8004070 <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f8a:	f000 f9c7 	bl	800231c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2208      	movs	r2, #8
 8001f92:	4619      	mov	r1, r3
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001f96:	f002 f86b 	bl	8004070 <HAL_TIM_PWM_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001fa0:	f000 f9bc 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <MX_TIM2_Init+0xc4>)
 8001fa6:	f000 faa9 	bl	80024fc <HAL_TIM_MspPostInit>

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000250 	.word	0x20000250

08001fb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_TIM3_Init+0x94>)
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <MX_TIM3_Init+0x98>)
 8001fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_TIM3_Init+0x94>)
 8001fdc:	2217      	movs	r2, #23
 8001fde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_TIM3_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_TIM3_Init+0x94>)
 8001fe8:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_TIM3_Init+0x94>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <MX_TIM3_Init+0x94>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <MX_TIM3_Init+0x94>)
 8001ffc:	f001 fd9c 	bl	8003b38 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002006:	f000 f989 	bl	800231c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	4619      	mov	r1, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_TIM3_Init+0x94>)
 8002018:	f002 f8ec 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002022:	f000 f97b 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	; (800204c <MX_TIM3_Init+0x94>)
 8002034:	f002 fc6e 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800203e:	f000 f96d 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000298 	.word	0x20000298
 8002050:	40000400 	.word	0x40000400

08002054 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_TIM4_Init+0x94>)
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <MX_TIM4_Init+0x98>)
 8002074:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24-1;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM4_Init+0x94>)
 8002078:	2217      	movs	r2, #23
 800207a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM4_Init+0x94>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_TIM4_Init+0x94>)
 8002084:	f242 720f 	movw	r2, #9999	; 0x270f
 8002088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_TIM4_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_TIM4_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002096:	4814      	ldr	r0, [pc, #80]	; (80020e8 <MX_TIM4_Init+0x94>)
 8002098:	f001 fd4e 	bl	8003b38 <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80020a2:	f000 f93b 	bl	800231c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	4619      	mov	r1, r3
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_TIM4_Init+0x94>)
 80020b4:	f002 f89e 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80020be:	f000 f92d 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <MX_TIM4_Init+0x94>)
 80020d0:	f002 fc20 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80020da:	f000 f91f 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200002e0 	.word	0x200002e0
 80020ec:	40000800 	.word	0x40000800

080020f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_USART1_UART_Init+0x4c>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <MX_USART1_UART_Init+0x50>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <MX_USART1_UART_Init+0x4c>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_USART1_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_USART1_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002128:	f002 fc64 	bl	80049f4 <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002132:	f000 f8f3 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000328 	.word	0x20000328
 8002140:	40013800 	.word	0x40013800

08002144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <MX_USART2_UART_Init+0x50>)
 800214c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800217c:	f002 fc3a 	bl	80049f4 <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002186:	f000 f8c9 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000370 	.word	0x20000370
 8002194:	40004400 	.word	0x40004400

08002198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ac:	4b56      	ldr	r3, [pc, #344]	; (8002308 <MX_GPIO_Init+0x170>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a55      	ldr	r2, [pc, #340]	; (8002308 <MX_GPIO_Init+0x170>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <MX_GPIO_Init+0x170>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <MX_GPIO_Init+0x170>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4f      	ldr	r2, [pc, #316]	; (8002308 <MX_GPIO_Init+0x170>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <MX_GPIO_Init+0x170>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <MX_GPIO_Init+0x170>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a49      	ldr	r2, [pc, #292]	; (8002308 <MX_GPIO_Init+0x170>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <MX_GPIO_Init+0x170>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_14|DIR_2_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80021fa:	4844      	ldr	r0, [pc, #272]	; (800230c <MX_GPIO_Init+0x174>)
 80021fc:	f000 ffbf 	bl	800317e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8002200:	2201      	movs	r2, #1
 8002202:	2140      	movs	r1, #64	; 0x40
 8002204:	4842      	ldr	r0, [pc, #264]	; (8002310 <MX_GPIO_Init+0x178>)
 8002206:	f000 ffba 	bl	800317e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	4840      	ldr	r0, [pc, #256]	; (8002310 <MX_GPIO_Init+0x178>)
 8002210:	f000 ffb5 	bl	800317e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PC14 DIR_2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_14|DIR_2_Pin;
 8002214:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2302      	movs	r3, #2
 8002224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	4837      	ldr	r0, [pc, #220]	; (800230c <MX_GPIO_Init+0x174>)
 800222e:	f000 fe0b 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A_Pin M1_B_Pin M2_A_Pin M2_B_Pin */
  GPIO_InitStruct.Pin = M1_A_Pin|M1_B_Pin|M2_A_Pin|M2_B_Pin;
 8002232:	23f0      	movs	r3, #240	; 0xf0
 8002234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <MX_GPIO_Init+0x17c>)
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4619      	mov	r1, r3
 8002244:	4834      	ldr	r0, [pc, #208]	; (8002318 <MX_GPIO_Init+0x180>)
 8002246:	f000 fdff 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_2_Pin L_3_Pin L_4_Pin L_5_Pin */
  GPIO_InitStruct.Pin = L_2_Pin|L_3_Pin|L_4_Pin|L_5_Pin;
 800224a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800224e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <MX_GPIO_Init+0x17c>)
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4619      	mov	r1, r3
 800225e:	482c      	ldr	r0, [pc, #176]	; (8002310 <MX_GPIO_Init+0x178>)
 8002260:	f000 fdf2 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_1_Pin */
  GPIO_InitStruct.Pin = L_1_Pin;
 8002264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <MX_GPIO_Init+0x17c>)
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_1_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	4619      	mov	r1, r3
 8002278:	4827      	ldr	r0, [pc, #156]	; (8002318 <MX_GPIO_Init+0x180>)
 800227a:	f000 fde5 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800227e:	2340      	movs	r3, #64	; 0x40
 8002280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2302      	movs	r3, #2
 800228c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	4619      	mov	r1, r3
 8002294:	481e      	ldr	r0, [pc, #120]	; (8002310 <MX_GPIO_Init+0x178>)
 8002296:	f000 fdd7 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229e:	2301      	movs	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 0310 	add.w	r3, r7, #16
 80022ae:	4619      	mov	r1, r3
 80022b0:	4817      	ldr	r0, [pc, #92]	; (8002310 <MX_GPIO_Init+0x178>)
 80022b2:	f000 fdc9 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80022b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_GPIO_Init+0x17c>)
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	4619      	mov	r1, r3
 80022ca:	4811      	ldr	r0, [pc, #68]	; (8002310 <MX_GPIO_Init+0x178>)
 80022cc:	f000 fdbc 	bl	8002e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	200a      	movs	r0, #10
 80022d6:	f000 fcce 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022da:	200a      	movs	r0, #10
 80022dc:	f000 fce7 	bl	8002cae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	2017      	movs	r0, #23
 80022e6:	f000 fcc6 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022ea:	2017      	movs	r0, #23
 80022ec:	f000 fcdf 	bl	8002cae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	2028      	movs	r0, #40	; 0x28
 80022f6:	f000 fcbe 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022fa:	2028      	movs	r0, #40	; 0x28
 80022fc:	f000 fcd7 	bl	8002cae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	40011000 	.word	0x40011000
 8002310:	40010c00 	.word	0x40010c00
 8002314:	10310000 	.word	0x10310000
 8002318:	40010800 	.word	0x40010800

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	e7fe      	b.n	8002324 <Error_Handler+0x8>
	...

08002328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_MspInit+0x5c>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_MspInit+0x5c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6193      	str	r3, [r2, #24]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_MspInit+0x5c>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x5c>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_MspInit+0x5c>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_MspInit+0x5c>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_MspInit+0x60>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_MspInit+0x60>)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000

0800238c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a22      	ldr	r2, [pc, #136]	; (8002430 <HAL_SPI_MspInit+0xa4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d13d      	bne.n	8002428 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_SPI_MspInit+0xa8>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <HAL_SPI_MspInit+0xa8>)
 80023b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_SPI_MspInit+0xa8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_SPI_MspInit+0xa8>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <HAL_SPI_MspInit+0xa8>)
 80023ca:	f043 0308 	orr.w	r3, r3, #8
 80023ce:	6193      	str	r3, [r2, #24]
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_SPI_MspInit+0xa8>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80023dc:	2328      	movs	r3, #40	; 0x28
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4812      	ldr	r0, [pc, #72]	; (8002438 <HAL_SPI_MspInit+0xac>)
 80023f0:	f000 fd2a 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023f4:	2310      	movs	r3, #16
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <HAL_SPI_MspInit+0xac>)
 8002408:	f000 fd1e 	bl	8002e48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_SPI_MspInit+0xb0>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	4a06      	ldr	r2, [pc, #24]	; (800243c <HAL_SPI_MspInit+0xb0>)
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40013000 	.word	0x40013000
 8002434:	40021000 	.word	0x40021000
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40010000 	.word	0x40010000

08002440 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d10b      	bne.n	800246a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_TIM_PWM_MspInit+0x34>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_TIM_PWM_MspInit+0x34>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_TIM_PWM_MspInit+0x34>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d114      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	201d      	movs	r0, #29
 80024a8:	f000 fbe5 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024ac:	201d      	movs	r0, #29
 80024ae:	f000 fbfe 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024b2:	e018      	b.n	80024e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_TIM_Base_MspInit+0x80>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d113      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	61d3      	str	r3, [r2, #28]
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	201e      	movs	r0, #30
 80024dc:	f000 fbcb 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024e0:	201e      	movs	r0, #30
 80024e2:	f000 fbe4 	bl	8002cae <HAL_NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40000800 	.word	0x40000800

080024fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d142      	bne.n	80025a2 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_TIM_MspPostInit+0xb0>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <HAL_TIM_MspPostInit+0xb0>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_TIM_MspPostInit+0xb0>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_TIM_MspPostInit+0xb0>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_TIM_MspPostInit+0xb0>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_TIM_MspPostInit+0xb0>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800254c:	2302      	movs	r3, #2
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <HAL_TIM_MspPostInit+0xb4>)
 8002560:	f000 fc72 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2302      	movs	r3, #2
 8002570:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <HAL_TIM_MspPostInit+0xb8>)
 800257a:	f000 fc65 	bl	8002e48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_TIM_MspPostInit+0xbc>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_TIM_MspPostInit+0xbc>)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0318 	add.w	r3, r7, #24
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3f      	ldr	r2, [pc, #252]	; (80026d4 <HAL_UART_MspInit+0x118>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d13a      	bne.n	8002652 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025dc:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a3d      	ldr	r2, [pc, #244]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 80025e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a37      	ldr	r2, [pc, #220]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800260c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	f107 0318 	add.w	r3, r7, #24
 800261e:	4619      	mov	r1, r3
 8002620:	482e      	ldr	r0, [pc, #184]	; (80026dc <HAL_UART_MspInit+0x120>)
 8002622:	f000 fc11 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	4619      	mov	r1, r3
 800263a:	4828      	ldr	r0, [pc, #160]	; (80026dc <HAL_UART_MspInit+0x120>)
 800263c:	f000 fc04 	bl	8002e48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2025      	movs	r0, #37	; 0x25
 8002646:	f000 fb16 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800264a:	2025      	movs	r0, #37	; 0x25
 800264c:	f000 fb2f 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002650:	e03c      	b.n	80026cc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_UART_MspInit+0x124>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d137      	bne.n	80026cc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	61d3      	str	r3, [r2, #28]
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_UART_MspInit+0x11c>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800268c:	2304      	movs	r3, #4
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	4619      	mov	r1, r3
 800269e:	480f      	ldr	r0, [pc, #60]	; (80026dc <HAL_UART_MspInit+0x120>)
 80026a0:	f000 fbd2 	bl	8002e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026a4:	2308      	movs	r3, #8
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0318 	add.w	r3, r7, #24
 80026b4:	4619      	mov	r1, r3
 80026b6:	4809      	ldr	r0, [pc, #36]	; (80026dc <HAL_UART_MspInit+0x120>)
 80026b8:	f000 fbc6 	bl	8002e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2026      	movs	r0, #38	; 0x26
 80026c2:	f000 fad8 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026c6:	2026      	movs	r0, #38	; 0x26
 80026c8:	f000 faf1 	bl	8002cae <HAL_NVIC_EnableIRQ>
}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	; 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010800 	.word	0x40010800
 80026e0:	40004400 	.word	0x40004400

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <NMI_Handler+0x4>

080026ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <MemManage_Handler+0x4>

080026f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <BusFault_Handler+0x4>

080026fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <UsageFault_Handler+0x4>

08002702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272a:	f000 f98d 	bl	8002a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}

08002732 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_A_Pin);
 8002736:	2010      	movs	r0, #16
 8002738:	f000 fd52 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_B_Pin);
 8002744:	2020      	movs	r0, #32
 8002746:	f000 fd4b 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_A_Pin);
 800274a:	2040      	movs	r0, #64	; 0x40
 800274c:	f000 fd48 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_B_Pin);
 8002750:	2080      	movs	r0, #128	; 0x80
 8002752:	f000 fd45 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L_1_Pin);
 8002756:	f44f 7080 	mov.w	r0, #256	; 0x100
 800275a:	f000 fd41 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800275e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002762:	f000 fd3d 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <TIM3_IRQHandler+0x10>)
 8002772:	f001 fb75 	bl	8003e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000298 	.word	0x20000298

08002780 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM4_IRQHandler+0x10>)
 8002786:	f001 fb6b 	bl	8003e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200002e0 	.word	0x200002e0

08002794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <USART1_IRQHandler+0x10>)
 800279a:	f002 fa23 	bl	8004be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000328 	.word	0x20000328

080027a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <USART2_IRQHandler+0x10>)
 80027ae:	f002 fa19 	bl	8004be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000370 	.word	0x20000370

080027bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L_2_Pin);
 80027c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027c4:	f000 fd0c 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L_3_Pin);
 80027c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027cc:	f000 fd08 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L_4_Pin);
 80027d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027d4:	f000 fd04 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L_5_Pin);
 80027d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027dc:	f000 fd00 	bl	80031e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return 1;
 80027e8:	2301      	movs	r3, #1
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <_kill>:

int _kill(int pid, int sig)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fc:	f002 ff76 	bl	80056ec <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	2216      	movs	r2, #22
 8002804:	601a      	str	r2, [r3, #0]
  return -1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_exit>:

void _exit (int status)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800281a:	f04f 31ff 	mov.w	r1, #4294967295
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffe7 	bl	80027f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002824:	e7fe      	b.n	8002824 <_exit+0x12>

08002826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00a      	b.n	800284e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002838:	f3af 8000 	nop.w
 800283c:	4601      	mov	r1, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60ba      	str	r2, [r7, #8]
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbf0      	blt.n	8002838 <_read+0x12>
  }

  return len;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e009      	b.n	8002886 <_write+0x26>
  {
	  __io_putchar(*ptr++);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fbd2 	bl	8001024 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	dbf1      	blt.n	8002872 <_write+0x12>
	  //ITM_SendChar(*ptr++);

  }
  return len;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_close>:

int _close(int file)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028be:	605a      	str	r2, [r3, #4]
  return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <_isatty>:

int _isatty(int file)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f002 fee0 	bl	80056ec <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20005000 	.word	0x20005000
 8002958:	00000400 	.word	0x00000400
 800295c:	2000043c 	.word	0x2000043c
 8002960:	20000458 	.word	0x20000458

08002964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002970:	f7ff fff8 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002976:	490c      	ldr	r1, [pc, #48]	; (80029a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002978:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800298c:	4c09      	ldr	r4, [pc, #36]	; (80029b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299a:	f002 fead 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299e:	f7ff f9c3 	bl	8001d28 <main>
  bx lr
 80029a2:	4770      	bx	lr
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80029ac:	080086dc 	.word	0x080086dc
  ldr r2, =_sbss
 80029b0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80029b4:	20000454 	.word	0x20000454

080029b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_2_IRQHandler>
	...

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_Init+0x28>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_Init+0x28>)
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029cc:	2003      	movs	r0, #3
 80029ce:	f000 f947 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d2:	200f      	movs	r0, #15
 80029d4:	f000 f808 	bl	80029e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d8:	f7ff fca6 	bl	8002328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40022000 	.word	0x40022000

080029e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_InitTick+0x54>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_InitTick+0x58>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f95f 	bl	8002cca <HAL_SYSTICK_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00e      	b.n	8002a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b0f      	cmp	r3, #15
 8002a1a:	d80a      	bhi.n	8002a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f000 f927 	bl	8002c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <HAL_InitTick+0x5c>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000008 	.word	0x20000008
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_IncTick+0x1c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_IncTick+0x20>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_IncTick+0x20>)
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000008 	.word	0x20000008
 8002a68:	20000440 	.word	0x20000440

08002a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_GetTick+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000440 	.word	0x20000440

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d005      	beq.n	8002aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_Delay+0x44>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa6:	bf00      	nop
 8002aa8:	f7ff ffe0 	bl	8002a6c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d8f7      	bhi.n	8002aa8 <HAL_Delay+0x28>
  {
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000008 	.word	0x20000008

08002ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <__NVIC_GetPriorityGrouping+0x18>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	f003 0307 	and.w	r3, r3, #7
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db0b      	blt.n	8002b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4906      	ldr	r1, [pc, #24]	; (8002b60 <__NVIC_EnableIRQ+0x34>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff90 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff2d 	bl	8002ac8 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff42 	bl	8002b10 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff90 	bl	8002bb8 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5f 	bl	8002b64 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff35 	bl	8002b2c <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d008      	beq.n	8002d0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e020      	b.n	8002d4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020e 	bic.w	r2, r2, #14
 8002d1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d005      	beq.n	8002d7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2204      	movs	r2, #4
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e051      	b.n	8002e20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_DMA_Abort_IT+0xd4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d029      	beq.n	8002dfa <HAL_DMA_Abort_IT+0xa2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_DMA_Abort_IT+0xd8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_Abort_IT+0x9e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_DMA_Abort_IT+0xdc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01a      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x98>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_DMA_Abort_IT+0xe0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d012      	beq.n	8002dea <HAL_DMA_Abort_IT+0x92>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_DMA_Abort_IT+0xe4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00a      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x8c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_DMA_Abort_IT+0xe8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d102      	bne.n	8002dde <HAL_DMA_Abort_IT+0x86>
 8002dd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ddc:	e00e      	b.n	8002dfc <HAL_DMA_Abort_IT+0xa4>
 8002dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de2:	e00b      	b.n	8002dfc <HAL_DMA_Abort_IT+0xa4>
 8002de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de8:	e008      	b.n	8002dfc <HAL_DMA_Abort_IT+0xa4>
 8002dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dee:	e005      	b.n	8002dfc <HAL_DMA_Abort_IT+0xa4>
 8002df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df4:	e002      	b.n	8002dfc <HAL_DMA_Abort_IT+0xa4>
 8002df6:	2310      	movs	r3, #16
 8002df8:	e000      	b.n	8002dfc <HAL_DMA_Abort_IT+0xa4>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_DMA_Abort_IT+0xec>)
 8002dfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
    } 
  }
  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40020008 	.word	0x40020008
 8002e30:	4002001c 	.word	0x4002001c
 8002e34:	40020030 	.word	0x40020030
 8002e38:	40020044 	.word	0x40020044
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	4002006c 	.word	0x4002006c
 8002e44:	40020000 	.word	0x40020000

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b08b      	sub	sp, #44	; 0x2c
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5a:	e169      	b.n	8003130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f040 8158 	bne.w	800312a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a9a      	ldr	r2, [pc, #616]	; (80030e8 <HAL_GPIO_Init+0x2a0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d05e      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002e84:	4a98      	ldr	r2, [pc, #608]	; (80030e8 <HAL_GPIO_Init+0x2a0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d875      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002e8a:	4a98      	ldr	r2, [pc, #608]	; (80030ec <HAL_GPIO_Init+0x2a4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d058      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002e90:	4a96      	ldr	r2, [pc, #600]	; (80030ec <HAL_GPIO_Init+0x2a4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d86f      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002e96:	4a96      	ldr	r2, [pc, #600]	; (80030f0 <HAL_GPIO_Init+0x2a8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d052      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002e9c:	4a94      	ldr	r2, [pc, #592]	; (80030f0 <HAL_GPIO_Init+0x2a8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d869      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002ea2:	4a94      	ldr	r2, [pc, #592]	; (80030f4 <HAL_GPIO_Init+0x2ac>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04c      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002ea8:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <HAL_GPIO_Init+0x2ac>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d863      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002eae:	4a92      	ldr	r2, [pc, #584]	; (80030f8 <HAL_GPIO_Init+0x2b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d046      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
 8002eb4:	4a90      	ldr	r2, [pc, #576]	; (80030f8 <HAL_GPIO_Init+0x2b0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d85d      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d82a      	bhi.n	8002f14 <HAL_GPIO_Init+0xcc>
 8002ebe:	2b12      	cmp	r3, #18
 8002ec0:	d859      	bhi.n	8002f76 <HAL_GPIO_Init+0x12e>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <HAL_GPIO_Init+0x80>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f43 	.word	0x08002f43
 8002ecc:	08002f1d 	.word	0x08002f1d
 8002ed0:	08002f2f 	.word	0x08002f2f
 8002ed4:	08002f71 	.word	0x08002f71
 8002ed8:	08002f77 	.word	0x08002f77
 8002edc:	08002f77 	.word	0x08002f77
 8002ee0:	08002f77 	.word	0x08002f77
 8002ee4:	08002f77 	.word	0x08002f77
 8002ee8:	08002f77 	.word	0x08002f77
 8002eec:	08002f77 	.word	0x08002f77
 8002ef0:	08002f77 	.word	0x08002f77
 8002ef4:	08002f77 	.word	0x08002f77
 8002ef8:	08002f77 	.word	0x08002f77
 8002efc:	08002f77 	.word	0x08002f77
 8002f00:	08002f77 	.word	0x08002f77
 8002f04:	08002f77 	.word	0x08002f77
 8002f08:	08002f77 	.word	0x08002f77
 8002f0c:	08002f25 	.word	0x08002f25
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	4a79      	ldr	r2, [pc, #484]	; (80030fc <HAL_GPIO_Init+0x2b4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f1a:	e02c      	b.n	8002f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e029      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e024      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	3308      	adds	r3, #8
 8002f34:	623b      	str	r3, [r7, #32]
          break;
 8002f36:	e01f      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	623b      	str	r3, [r7, #32]
          break;
 8002f40:	e01a      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	623b      	str	r3, [r7, #32]
          break;
 8002f4e:	e013      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	611a      	str	r2, [r3, #16]
          break;
 8002f62:	e009      	b.n	8002f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f64:	2308      	movs	r3, #8
 8002f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	615a      	str	r2, [r3, #20]
          break;
 8002f6e:	e003      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
          break;
 8002f74:	e000      	b.n	8002f78 <HAL_GPIO_Init+0x130>
          break;
 8002f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2bff      	cmp	r3, #255	; 0xff
 8002f7c:	d801      	bhi.n	8002f82 <HAL_GPIO_Init+0x13a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	e001      	b.n	8002f86 <HAL_GPIO_Init+0x13e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2bff      	cmp	r3, #255	; 0xff
 8002f8c:	d802      	bhi.n	8002f94 <HAL_GPIO_Init+0x14c>
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	e002      	b.n	8002f9a <HAL_GPIO_Init+0x152>
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	3b08      	subs	r3, #8
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	210f      	movs	r1, #15
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	6a39      	ldr	r1, [r7, #32]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80b1 	beq.w	800312a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc8:	4b4d      	ldr	r3, [pc, #308]	; (8003100 <HAL_GPIO_Init+0x2b8>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	; (8003100 <HAL_GPIO_Init+0x2b8>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6193      	str	r3, [r2, #24]
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_GPIO_Init+0x2b8>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fe0:	4a48      	ldr	r2, [pc, #288]	; (8003104 <HAL_GPIO_Init+0x2bc>)
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_GPIO_Init+0x2c0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_GPIO_Init+0x1ec>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3f      	ldr	r2, [pc, #252]	; (800310c <HAL_GPIO_Init+0x2c4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00d      	beq.n	8003030 <HAL_GPIO_Init+0x1e8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3e      	ldr	r2, [pc, #248]	; (8003110 <HAL_GPIO_Init+0x2c8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <HAL_GPIO_Init+0x1e4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <HAL_GPIO_Init+0x2cc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_GPIO_Init+0x1e0>
 8003024:	2303      	movs	r3, #3
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 8003028:	2304      	movs	r3, #4
 800302a:	e004      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 800302c:	2302      	movs	r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x1ee>
 8003034:	2300      	movs	r3, #0
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003046:	492f      	ldr	r1, [pc, #188]	; (8003104 <HAL_GPIO_Init+0x2bc>)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003060:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	492c      	ldr	r1, [pc, #176]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	43db      	mvns	r3, r3
 8003076:	4928      	ldr	r1, [pc, #160]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 8003078:	4013      	ands	r3, r2
 800307a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4922      	ldr	r1, [pc, #136]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	43db      	mvns	r3, r3
 800309e:	491e      	ldr	r1, [pc, #120]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4918      	ldr	r1, [pc, #96]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4914      	ldr	r1, [pc, #80]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d021      	beq.n	800311c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	490e      	ldr	r1, [pc, #56]	; (8003118 <HAL_GPIO_Init+0x2d0>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e021      	b.n	800312a <HAL_GPIO_Init+0x2e2>
 80030e6:	bf00      	nop
 80030e8:	10320000 	.word	0x10320000
 80030ec:	10310000 	.word	0x10310000
 80030f0:	10220000 	.word	0x10220000
 80030f4:	10210000 	.word	0x10210000
 80030f8:	10120000 	.word	0x10120000
 80030fc:	10110000 	.word	0x10110000
 8003100:	40021000 	.word	0x40021000
 8003104:	40010000 	.word	0x40010000
 8003108:	40010800 	.word	0x40010800
 800310c:	40010c00 	.word	0x40010c00
 8003110:	40011000 	.word	0x40011000
 8003114:	40011400 	.word	0x40011400
 8003118:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_GPIO_Init+0x304>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	43db      	mvns	r3, r3
 8003124:	4909      	ldr	r1, [pc, #36]	; (800314c <HAL_GPIO_Init+0x304>)
 8003126:	4013      	ands	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	3301      	adds	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	f47f ae8e 	bne.w	8002e5c <HAL_GPIO_Init+0x14>
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	372c      	adds	r7, #44	; 0x2c
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e001      	b.n	8003172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	807b      	strh	r3, [r7, #2]
 800318a:	4613      	mov	r3, r2
 800318c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800318e:	787b      	ldrb	r3, [r7, #1]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003194:	887a      	ldrh	r2, [r7, #2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800319a:	e003      	b.n	80031a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c0:	887a      	ldrh	r2, [r7, #2]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	041a      	lsls	r2, r3, #16
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	400b      	ands	r3, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	611a      	str	r2, [r3, #16]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031f6:	4a05      	ldr	r2, [pc, #20]	; (800320c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe f838 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40010400 	.word	0x40010400

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e272      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e24c      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff fbbe 	bl	8002a6c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff fbba 	bl	8002a6c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e200      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff fbaa 	bl	8002a6c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff fba6 	bl	8002a6c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1ec      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c0      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7ff fb5f 	bl	8002a6c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7ff fb5b 	bl	8002a6c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7ff fb3e 	bl	8002a6c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7ff fb3a 	bl	8002a6c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e180      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7ff fb1e 	bl	8002a6c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7ff fb1a 	bl	8002a6c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e160      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 face 	bl	80039f4 <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7ff fb04 	bl	8002a6c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7ff fb00 	bl	8002a6c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e146      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b7f      	ldr	r3, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7e      	ldr	r2, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7ff fac1 	bl	8002a6c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7ff fabd 	bl	8002a6c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e103      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a69      	ldr	r2, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a66      	ldr	r2, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a60      	ldr	r2, [pc, #384]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a57      	ldr	r2, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7ff fa71 	bl	8002a6c <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7ff fa6d 	bl	8002a6c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0b1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7ff fa5b 	bl	8002a6c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7ff fa57 	bl	8002a6c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e09b      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b40      	ldr	r3, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b3c      	ldr	r3, [pc, #240]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7ff fa2b 	bl	8002a6c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7ff fa27 	bl	8002a6c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e06d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4921      	ldr	r1, [pc, #132]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	491b      	ldr	r1, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7ff f9fb 	bl	8002a6c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7ff f9f7 	bl	8002a6c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e03d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e035      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff f9e4 	bl	8002a6c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7ff f9e0 	bl	8002a6c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e01e      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e019      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_OscConfig+0x500>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4965      	ldr	r1, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800377a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7ff f932 	bl	8002a6c <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7ff f92e 	bl	8002a6c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f890 	bl	80029e8 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080082c8 	.word	0x080082c8
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x36>
 8003916:	e027      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	e027      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0c5b      	lsrs	r3, r3, #17
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e004      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_RCC_GetSysClockFreq+0xa4>)
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	693b      	ldr	r3, [r7, #16]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	080082e0 	.word	0x080082e0
 8003988:	080082f0 	.word	0x080082f0
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	080082d8 	.word	0x080082d8

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d0:	f7ff ffde 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	0adb      	lsrs	r3, r3, #11
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	080082d8 	.word	0x080082d8

080039f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <RCC_Delay+0x34>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <RCC_Delay+0x38>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0a5b      	lsrs	r3, r3, #9
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a10:	bf00      	nop
  }
  while (Delay --);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	60fa      	str	r2, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f9      	bne.n	8003a10 <RCC_Delay+0x1c>
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	10624dd3 	.word	0x10624dd3

08003a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e076      	b.n	8003b30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a52:	d009      	beq.n	8003a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	61da      	str	r2, [r3, #28]
 8003a5a:	e005      	b.n	8003a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe fc82 	bl	800238c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aec:	ea42 0103 	orr.w	r1, r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	0c1a      	lsrs	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f002 0204 	and.w	r2, r2, #4
 8003b0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e041      	b.n	8003bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe fc8a 	bl	8002478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fc28 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e03a      	b.n	8003c66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIM_Base_Start_IT+0x98>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x58>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d009      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x58>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x58>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d010      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	e007      	b.n	8003c64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800

08003c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fe fbcc 	bl	8002440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fb86 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start+0x24>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e022      	b.n	8003d86 <HAL_TIM_PWM_Start+0x6a>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d109      	bne.n	8003d5a <HAL_TIM_PWM_Start+0x3e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e015      	b.n	8003d86 <HAL_TIM_PWM_Start+0x6a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start+0x58>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e008      	b.n	8003d86 <HAL_TIM_PWM_Start+0x6a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e05e      	b.n	8003e4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x82>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d9c:	e013      	b.n	8003dc6 <HAL_TIM_PWM_Start+0xaa>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_PWM_Start+0x92>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	e00b      	b.n	8003dc6 <HAL_TIM_PWM_Start+0xaa>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Start+0xa2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_PWM_Start+0xaa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fd7c 	bl	80048cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_TIM_PWM_Start+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d107      	bne.n	8003dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_TIM_PWM_Start+0x138>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00e      	beq.n	8003e16 <HAL_TIM_PWM_Start+0xfa>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d009      	beq.n	8003e16 <HAL_TIM_PWM_Start+0xfa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_TIM_PWM_Start+0x13c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIM_PWM_Start+0xfa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <HAL_TIM_PWM_Start+0x140>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b06      	cmp	r3, #6
 8003e26:	d010      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	e007      	b.n	8003e4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800

08003e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0202 	mvn.w	r2, #2
 8003e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa76 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa69 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fa78 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d122      	bne.n	8003f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d11b      	bne.n	8003f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0204 	mvn.w	r2, #4
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa4c 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa3f 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa4e 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d122      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0208 	mvn.w	r2, #8
 8003f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa22 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa15 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa24 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0210 	mvn.w	r2, #16
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9f8 	bl	8004394 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9eb 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f9fa 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0201 	mvn.w	r2, #1
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd fc4e 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fce9 	bl	80049e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9be 	bl	80043b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b20      	cmp	r3, #32
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b20      	cmp	r3, #32
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0220 	mvn.w	r2, #32
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fcb4 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800408a:	2302      	movs	r3, #2
 800408c:	e0ae      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	f200 809f 	bhi.w	80041dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080041dd 	.word	0x080041dd
 80040ac:	080041dd 	.word	0x080041dd
 80040b0:	080041dd 	.word	0x080041dd
 80040b4:	08004119 	.word	0x08004119
 80040b8:	080041dd 	.word	0x080041dd
 80040bc:	080041dd 	.word	0x080041dd
 80040c0:	080041dd 	.word	0x080041dd
 80040c4:	0800415b 	.word	0x0800415b
 80040c8:	080041dd 	.word	0x080041dd
 80040cc:	080041dd 	.word	0x080041dd
 80040d0:	080041dd 	.word	0x080041dd
 80040d4:	0800419b 	.word	0x0800419b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f9d6 	bl	8004490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6999      	ldr	r1, [r3, #24]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	619a      	str	r2, [r3, #24]
      break;
 8004116:	e064      	b.n	80041e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fa1c 	bl	800455c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	021a      	lsls	r2, r3, #8
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	619a      	str	r2, [r3, #24]
      break;
 8004158:	e043      	b.n	80041e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa65 	bl	8004630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0208 	orr.w	r2, r2, #8
 8004174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0204 	bic.w	r2, r2, #4
 8004184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69d9      	ldr	r1, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	61da      	str	r2, [r3, #28]
      break;
 8004198:	e023      	b.n	80041e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 faaf 	bl	8004704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69d9      	ldr	r1, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	021a      	lsls	r2, r3, #8
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	61da      	str	r2, [r3, #28]
      break;
 80041da:	e002      	b.n	80041e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	75fb      	strb	r3, [r7, #23]
      break;
 80041e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIM_ConfigClockSource+0x1c>
 800420c:	2302      	movs	r3, #2
 800420e:	e0b4      	b.n	800437a <HAL_TIM_ConfigClockSource+0x186>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d03e      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0xd4>
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424e:	f200 8087 	bhi.w	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	f000 8086 	beq.w	8004366 <HAL_TIM_ConfigClockSource+0x172>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d87f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d01a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xa6>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d87b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d050      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x11a>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d877      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d03c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xfa>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d873      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d058      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x13a>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d86f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d064      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d86b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d060      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d867      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d05a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	e062      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 faf0 	bl	800488e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
      break;
 80042c6:	e04f      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f000 fad9 	bl	800488e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e03c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fa50 	bl	80047a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2150      	movs	r1, #80	; 0x50
 8004306:	4618      	mov	r0, r3
 8004308:	f000 faa7 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800430c:	e02c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fa6e 	bl	80047fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2160      	movs	r1, #96	; 0x60
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fa97 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800432c:	e01c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fa30 	bl	80047a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fa87 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800434c:	e00c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f000 fa7e 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 800435e:	e003      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      break;
 8004364:	e000      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
	...

080043cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a29      	ldr	r2, [pc, #164]	; (8004484 <TIM_Base_SetConfig+0xb8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <TIM_Base_SetConfig+0x30>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d007      	beq.n	80043fc <TIM_Base_SetConfig+0x30>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a26      	ldr	r2, [pc, #152]	; (8004488 <TIM_Base_SetConfig+0xbc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_Base_SetConfig+0x30>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a25      	ldr	r2, [pc, #148]	; (800448c <TIM_Base_SetConfig+0xc0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d108      	bne.n	800440e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <TIM_Base_SetConfig+0xb8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00b      	beq.n	800442e <TIM_Base_SetConfig+0x62>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d007      	beq.n	800442e <TIM_Base_SetConfig+0x62>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a19      	ldr	r2, [pc, #100]	; (8004488 <TIM_Base_SetConfig+0xbc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_Base_SetConfig+0x62>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a18      	ldr	r2, [pc, #96]	; (800448c <TIM_Base_SetConfig+0xc0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d108      	bne.n	8004440 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <TIM_Base_SetConfig+0xb8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d103      	bne.n	8004474 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	615a      	str	r2, [r3, #20]
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800

08004490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f023 0201 	bic.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 0302 	bic.w	r3, r3, #2
 80044d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <TIM_OC1_SetConfig+0xc8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10c      	bne.n	8004506 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0308 	bic.w	r3, r3, #8
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <TIM_OC1_SetConfig+0xc8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d111      	bne.n	8004532 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00

0800455c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f023 0210 	bic.w	r2, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1d      	ldr	r2, [pc, #116]	; (800462c <TIM_OC2_SetConfig+0xd0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10d      	bne.n	80045d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC2_SetConfig+0xd0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d113      	bne.n	8004608 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	40012c00 	.word	0x40012c00

08004630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <TIM_OC3_SetConfig+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10d      	bne.n	80046aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a14      	ldr	r2, [pc, #80]	; (8004700 <TIM_OC3_SetConfig+0xd0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d113      	bne.n	80046da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	621a      	str	r2, [r3, #32]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40012c00 	.word	0x40012c00

08004704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800474e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0f      	ldr	r2, [pc, #60]	; (800479c <TIM_OC4_SetConfig+0x98>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d109      	bne.n	8004778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	019b      	lsls	r3, r3, #6
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00

080047a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 030a 	bic.w	r3, r3, #10
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0210 	bic.w	r2, r3, #16
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	031b      	lsls	r3, r3, #12
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	f043 0307 	orr.w	r3, r3, #7
 800487c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	609a      	str	r2, [r3, #8]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e046      	b.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d009      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a10      	ldr	r2, [pc, #64]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10c      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4313      	orrs	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e042      	b.n	8004a8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd fdce 	bl	80025bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fdc5 	bl	80055c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d16d      	bne.n	8004b90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Transmit+0x2c>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e066      	b.n	8004b92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2221      	movs	r2, #33	; 0x21
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad2:	f7fd ffcb 	bl	8002a6c <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d108      	bne.n	8004b00 <HAL_UART_Transmit+0x6c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d104      	bne.n	8004b00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e003      	b.n	8004b08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b08:	e02a      	b.n	8004b60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fb14 	bl	8005142 <UART_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e036      	b.n	8004b92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	e007      	b.n	8004b52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1cf      	bne.n	8004b0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	2140      	movs	r1, #64	; 0x40
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fae4 	bl	8005142 <UART_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e006      	b.n	8004b92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d112      	bne.n	8004bda <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Receive_IT+0x26>
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e00b      	b.n	8004bdc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fb24 	bl	800521e <UART_Start_Receive_IT>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b0ba      	sub	sp, #232	; 0xe8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_UART_IRQHandler+0x66>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fc01 	bl	800544a <UART_Receive_IT>
      return;
 8004c48:	e25b      	b.n	8005102 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80de 	beq.w	8004e10 <HAL_UART_IRQHandler+0x22c>
 8004c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80d1 	beq.w	8004e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_UART_IRQHandler+0xae>
 8004c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xd2>
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f043 0202 	orr.w	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_UART_IRQHandler+0xf6>
 8004cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f043 0204 	orr.w	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <HAL_UART_IRQHandler+0x126>
 8004ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f043 0208 	orr.w	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 81f2 	beq.w	80050f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_UART_IRQHandler+0x14e>
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb8c 	bl	800544a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_UART_IRQHandler+0x17a>
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04f      	beq.n	8004dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa96 	bl	8005290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d041      	beq.n	8004df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1d9      	bne.n	8004d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d013      	beq.n	8004dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	4a7e      	ldr	r2, [pc, #504]	; (8004fc4 <HAL_UART_IRQHandler+0x3e0>)
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd ffc0 	bl	8002d58 <HAL_DMA_Abort_IT>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004de8:	4610      	mov	r0, r2
 8004dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00e      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f993 	bl	800511a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e00a      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f98f 	bl	800511a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f98b 	bl	800511a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004e0a:	e175      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	bf00      	nop
    return;
 8004e0e:	e173      	b.n	80050f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 814f 	bne.w	80050b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8148 	beq.w	80050b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8141 	beq.w	80050b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80b6 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8145 	beq.w	80050fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f080 813e 	bcs.w	80050fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	f000 8088 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ec0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ec4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ecc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1d9      	bne.n	8004e94 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3314      	adds	r3, #20
 8004ee6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3314      	adds	r3, #20
 8004f00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f04:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e1      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e3      	bne.n	8004f1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f74:	f023 0310 	bic.w	r3, r3, #16
 8004f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f86:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f88:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e3      	bne.n	8004f62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd fe9f 	bl	8002ce2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8b6 	bl	800512c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fc0:	e09c      	b.n	80050fc <HAL_UART_IRQHandler+0x518>
 8004fc2:	bf00      	nop
 8004fc4:	08005355 	.word	0x08005355
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 808e 	beq.w	8005100 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8089 	beq.w	8005100 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005012:	647a      	str	r2, [r7, #68]	; 0x44
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e3      	bne.n	8004fee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3314      	adds	r3, #20
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	623b      	str	r3, [r7, #32]
   return(result);
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800504a:	633a      	str	r2, [r7, #48]	; 0x30
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e3      	bne.n	8005026 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	60fb      	str	r3, [r7, #12]
   return(result);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005090:	61fa      	str	r2, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e3      	bne.n	800506c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f83b 	bl	800512c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050b6:	e023      	b.n	8005100 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_UART_IRQHandler+0x4f4>
 80050c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f953 	bl	800537c <UART_Transmit_IT>
    return;
 80050d6:	e014      	b.n	8005102 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00e      	beq.n	8005102 <HAL_UART_IRQHandler+0x51e>
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f992 	bl	800541a <UART_EndTransmit_IT>
    return;
 80050f6:	e004      	b.n	8005102 <HAL_UART_IRQHandler+0x51e>
    return;
 80050f8:	bf00      	nop
 80050fa:	e002      	b.n	8005102 <HAL_UART_IRQHandler+0x51e>
      return;
 80050fc:	bf00      	nop
 80050fe:	e000      	b.n	8005102 <HAL_UART_IRQHandler+0x51e>
      return;
 8005100:	bf00      	nop
  }
}
 8005102:	37e8      	adds	r7, #232	; 0xe8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b090      	sub	sp, #64	; 0x40
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005152:	e050      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d04c      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800515c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0x30>
 8005162:	f7fd fc83 	bl	8002a6c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800516e:	429a      	cmp	r2, r3
 8005170:	d241      	bcs.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005192:	637a      	str	r2, [r7, #52]	; 0x34
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e5      	bne.n	8005172 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3314      	adds	r3, #20
 80051ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	613b      	str	r3, [r7, #16]
   return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051c6:	623a      	str	r2, [r7, #32]
 80051c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	69f9      	ldr	r1, [r7, #28]
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e5      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00f      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d09f      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3740      	adds	r7, #64	; 0x40
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	88fa      	ldrh	r2, [r7, #6]
 8005236:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	88fa      	ldrh	r2, [r7, #6]
 800523c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2222      	movs	r2, #34	; 0x22
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005262:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b095      	sub	sp, #84	; 0x54
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b8:	643a      	str	r2, [r7, #64]	; 0x40
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	61fb      	str	r3, [r7, #28]
   return(result);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d119      	bne.n	800533c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60bb      	str	r3, [r7, #8]
   return(result);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0310 	bic.w	r3, r3, #16
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005328:	61ba      	str	r2, [r7, #24]
 800532a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
}
 800534a:	bf00      	nop
 800534c:	3754      	adds	r7, #84	; 0x54
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff fed3 	bl	800511a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b21      	cmp	r3, #33	; 0x21
 800538e:	d13e      	bne.n	800540e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d114      	bne.n	80053c4 <UART_Transmit_IT+0x48>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d110      	bne.n	80053c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	621a      	str	r2, [r3, #32]
 80053c2:	e008      	b.n	80053d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	1c59      	adds	r1, r3, #1
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6211      	str	r1, [r2, #32]
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4619      	mov	r1, r3
 80053e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005408:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
  }
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fe64 	bl	8005108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08c      	sub	sp, #48	; 0x30
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b22      	cmp	r3, #34	; 0x22
 800545c:	f040 80ae 	bne.w	80055bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005468:	d117      	bne.n	800549a <UART_Receive_IT+0x50>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d113      	bne.n	800549a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005488:	b29a      	uxth	r2, r3
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
 8005498:	e026      	b.n	80054e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	d007      	beq.n	80054be <UART_Receive_IT+0x74>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <UART_Receive_IT+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e008      	b.n	80054de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4619      	mov	r1, r3
 80054f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d15d      	bne.n	80055b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0220 	bic.w	r2, r2, #32
 800550a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	2b01      	cmp	r3, #1
 8005540:	d135      	bne.n	80055ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	613b      	str	r3, [r7, #16]
   return(result);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	623a      	str	r2, [r7, #32]
 800556a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	69f9      	ldr	r1, [r7, #28]
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	61bb      	str	r3, [r7, #24]
   return(result);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d10a      	bne.n	80055a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fdc0 	bl	800512c <HAL_UARTEx_RxEventCallback>
 80055ac:	e002      	b.n	80055b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fd4a 	bl	8001048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e002      	b.n	80055be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
  }
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3730      	adds	r7, #48	; 0x30
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005602:	f023 030c 	bic.w	r3, r3, #12
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	430b      	orrs	r3, r1
 800560e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <UART_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fe f9cc 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	e002      	b.n	800563e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe f9b4 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 800563c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009a      	lsls	r2, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	4a22      	ldr	r2, [pc, #136]	; (80056e0 <UART_SetConfig+0x118>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	0119      	lsls	r1, r3, #4
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009a      	lsls	r2, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	fbb2 f2f3 	udiv	r2, r2, r3
 8005674:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <UART_SetConfig+0x118>)
 8005676:	fba3 0302 	umull	r0, r3, r3, r2
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	2064      	movs	r0, #100	; 0x64
 800567e:	fb00 f303 	mul.w	r3, r0, r3
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	3332      	adds	r3, #50	; 0x32
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <UART_SetConfig+0x118>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005694:	4419      	add	r1, r3
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009a      	lsls	r2, r3, #2
 80056a0:	441a      	add	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056ac:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <UART_SetConfig+0x118>)
 80056ae:	fba3 0302 	umull	r0, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2064      	movs	r0, #100	; 0x64
 80056b6:	fb00 f303 	mul.w	r3, r0, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <UART_SetConfig+0x118>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	440a      	add	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40013800 	.word	0x40013800
 80056e0:	51eb851f 	.word	0x51eb851f

080056e4 <atoi>:
 80056e4:	220a      	movs	r2, #10
 80056e6:	2100      	movs	r1, #0
 80056e8:	f000 be1a 	b.w	8006320 <strtol>

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	2600      	movs	r6, #0
 80056fc:	4d0c      	ldr	r5, [pc, #48]	; (8005730 <__libc_init_array+0x38>)
 80056fe:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	f002 fdce 	bl	80082a8 <_init>
 800570c:	2600      	movs	r6, #0
 800570e:	4d0a      	ldr	r5, [pc, #40]	; (8005738 <__libc_init_array+0x40>)
 8005710:	4c0a      	ldr	r4, [pc, #40]	; (800573c <__libc_init_array+0x44>)
 8005712:	1b64      	subs	r4, r4, r5
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	080086d4 	.word	0x080086d4
 8005734:	080086d4 	.word	0x080086d4
 8005738:	080086d4 	.word	0x080086d4
 800573c:	080086d8 	.word	0x080086d8

08005740 <malloc>:
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <malloc+0xc>)
 8005742:	4601      	mov	r1, r0
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f000 b873 	b.w	8005830 <_malloc_r>
 800574a:	bf00      	nop
 800574c:	2000000c 	.word	0x2000000c

08005750 <memset>:
 8005750:	4603      	mov	r3, r0
 8005752:	4402      	add	r2, r0
 8005754:	4293      	cmp	r3, r2
 8005756:	d100      	bne.n	800575a <memset+0xa>
 8005758:	4770      	bx	lr
 800575a:	f803 1b01 	strb.w	r1, [r3], #1
 800575e:	e7f9      	b.n	8005754 <memset+0x4>

08005760 <_free_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4605      	mov	r5, r0
 8005764:	2900      	cmp	r1, #0
 8005766:	d040      	beq.n	80057ea <_free_r+0x8a>
 8005768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576c:	1f0c      	subs	r4, r1, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	bfb8      	it	lt
 8005772:	18e4      	addlt	r4, r4, r3
 8005774:	f001 fd74 	bl	8007260 <__malloc_lock>
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <_free_r+0x8c>)
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	b933      	cbnz	r3, 800578c <_free_r+0x2c>
 800577e:	6063      	str	r3, [r4, #4]
 8005780:	6014      	str	r4, [r2, #0]
 8005782:	4628      	mov	r0, r5
 8005784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005788:	f001 bd70 	b.w	800726c <__malloc_unlock>
 800578c:	42a3      	cmp	r3, r4
 800578e:	d908      	bls.n	80057a2 <_free_r+0x42>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	1821      	adds	r1, r4, r0
 8005794:	428b      	cmp	r3, r1
 8005796:	bf01      	itttt	eq
 8005798:	6819      	ldreq	r1, [r3, #0]
 800579a:	685b      	ldreq	r3, [r3, #4]
 800579c:	1809      	addeq	r1, r1, r0
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	e7ed      	b.n	800577e <_free_r+0x1e>
 80057a2:	461a      	mov	r2, r3
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b10b      	cbz	r3, 80057ac <_free_r+0x4c>
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d9fa      	bls.n	80057a2 <_free_r+0x42>
 80057ac:	6811      	ldr	r1, [r2, #0]
 80057ae:	1850      	adds	r0, r2, r1
 80057b0:	42a0      	cmp	r0, r4
 80057b2:	d10b      	bne.n	80057cc <_free_r+0x6c>
 80057b4:	6820      	ldr	r0, [r4, #0]
 80057b6:	4401      	add	r1, r0
 80057b8:	1850      	adds	r0, r2, r1
 80057ba:	4283      	cmp	r3, r0
 80057bc:	6011      	str	r1, [r2, #0]
 80057be:	d1e0      	bne.n	8005782 <_free_r+0x22>
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4401      	add	r1, r0
 80057c6:	6011      	str	r1, [r2, #0]
 80057c8:	6053      	str	r3, [r2, #4]
 80057ca:	e7da      	b.n	8005782 <_free_r+0x22>
 80057cc:	d902      	bls.n	80057d4 <_free_r+0x74>
 80057ce:	230c      	movs	r3, #12
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	e7d6      	b.n	8005782 <_free_r+0x22>
 80057d4:	6820      	ldr	r0, [r4, #0]
 80057d6:	1821      	adds	r1, r4, r0
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf01      	itttt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	1809      	addeq	r1, r1, r0
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6054      	str	r4, [r2, #4]
 80057e8:	e7cb      	b.n	8005782 <_free_r+0x22>
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20000444 	.word	0x20000444

080057f0 <sbrk_aligned>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4e0e      	ldr	r6, [pc, #56]	; (800582c <sbrk_aligned+0x3c>)
 80057f4:	460c      	mov	r4, r1
 80057f6:	6831      	ldr	r1, [r6, #0]
 80057f8:	4605      	mov	r5, r0
 80057fa:	b911      	cbnz	r1, 8005802 <sbrk_aligned+0x12>
 80057fc:	f000 fd04 	bl	8006208 <_sbrk_r>
 8005800:	6030      	str	r0, [r6, #0]
 8005802:	4621      	mov	r1, r4
 8005804:	4628      	mov	r0, r5
 8005806:	f000 fcff 	bl	8006208 <_sbrk_r>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d00a      	beq.n	8005824 <sbrk_aligned+0x34>
 800580e:	1cc4      	adds	r4, r0, #3
 8005810:	f024 0403 	bic.w	r4, r4, #3
 8005814:	42a0      	cmp	r0, r4
 8005816:	d007      	beq.n	8005828 <sbrk_aligned+0x38>
 8005818:	1a21      	subs	r1, r4, r0
 800581a:	4628      	mov	r0, r5
 800581c:	f000 fcf4 	bl	8006208 <_sbrk_r>
 8005820:	3001      	adds	r0, #1
 8005822:	d101      	bne.n	8005828 <sbrk_aligned+0x38>
 8005824:	f04f 34ff 	mov.w	r4, #4294967295
 8005828:	4620      	mov	r0, r4
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	20000448 	.word	0x20000448

08005830 <_malloc_r>:
 8005830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005834:	1ccd      	adds	r5, r1, #3
 8005836:	f025 0503 	bic.w	r5, r5, #3
 800583a:	3508      	adds	r5, #8
 800583c:	2d0c      	cmp	r5, #12
 800583e:	bf38      	it	cc
 8005840:	250c      	movcc	r5, #12
 8005842:	2d00      	cmp	r5, #0
 8005844:	4607      	mov	r7, r0
 8005846:	db01      	blt.n	800584c <_malloc_r+0x1c>
 8005848:	42a9      	cmp	r1, r5
 800584a:	d905      	bls.n	8005858 <_malloc_r+0x28>
 800584c:	230c      	movs	r3, #12
 800584e:	2600      	movs	r6, #0
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4630      	mov	r0, r6
 8005854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005858:	4e2e      	ldr	r6, [pc, #184]	; (8005914 <_malloc_r+0xe4>)
 800585a:	f001 fd01 	bl	8007260 <__malloc_lock>
 800585e:	6833      	ldr	r3, [r6, #0]
 8005860:	461c      	mov	r4, r3
 8005862:	bb34      	cbnz	r4, 80058b2 <_malloc_r+0x82>
 8005864:	4629      	mov	r1, r5
 8005866:	4638      	mov	r0, r7
 8005868:	f7ff ffc2 	bl	80057f0 <sbrk_aligned>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	4604      	mov	r4, r0
 8005870:	d14d      	bne.n	800590e <_malloc_r+0xde>
 8005872:	6834      	ldr	r4, [r6, #0]
 8005874:	4626      	mov	r6, r4
 8005876:	2e00      	cmp	r6, #0
 8005878:	d140      	bne.n	80058fc <_malloc_r+0xcc>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	4631      	mov	r1, r6
 800587e:	4638      	mov	r0, r7
 8005880:	eb04 0803 	add.w	r8, r4, r3
 8005884:	f000 fcc0 	bl	8006208 <_sbrk_r>
 8005888:	4580      	cmp	r8, r0
 800588a:	d13a      	bne.n	8005902 <_malloc_r+0xd2>
 800588c:	6821      	ldr	r1, [r4, #0]
 800588e:	3503      	adds	r5, #3
 8005890:	1a6d      	subs	r5, r5, r1
 8005892:	f025 0503 	bic.w	r5, r5, #3
 8005896:	3508      	adds	r5, #8
 8005898:	2d0c      	cmp	r5, #12
 800589a:	bf38      	it	cc
 800589c:	250c      	movcc	r5, #12
 800589e:	4638      	mov	r0, r7
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7ff ffa5 	bl	80057f0 <sbrk_aligned>
 80058a6:	3001      	adds	r0, #1
 80058a8:	d02b      	beq.n	8005902 <_malloc_r+0xd2>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	442b      	add	r3, r5
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	e00e      	b.n	80058d0 <_malloc_r+0xa0>
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	1b52      	subs	r2, r2, r5
 80058b6:	d41e      	bmi.n	80058f6 <_malloc_r+0xc6>
 80058b8:	2a0b      	cmp	r2, #11
 80058ba:	d916      	bls.n	80058ea <_malloc_r+0xba>
 80058bc:	1961      	adds	r1, r4, r5
 80058be:	42a3      	cmp	r3, r4
 80058c0:	6025      	str	r5, [r4, #0]
 80058c2:	bf18      	it	ne
 80058c4:	6059      	strne	r1, [r3, #4]
 80058c6:	6863      	ldr	r3, [r4, #4]
 80058c8:	bf08      	it	eq
 80058ca:	6031      	streq	r1, [r6, #0]
 80058cc:	5162      	str	r2, [r4, r5]
 80058ce:	604b      	str	r3, [r1, #4]
 80058d0:	4638      	mov	r0, r7
 80058d2:	f104 060b 	add.w	r6, r4, #11
 80058d6:	f001 fcc9 	bl	800726c <__malloc_unlock>
 80058da:	f026 0607 	bic.w	r6, r6, #7
 80058de:	1d23      	adds	r3, r4, #4
 80058e0:	1af2      	subs	r2, r6, r3
 80058e2:	d0b6      	beq.n	8005852 <_malloc_r+0x22>
 80058e4:	1b9b      	subs	r3, r3, r6
 80058e6:	50a3      	str	r3, [r4, r2]
 80058e8:	e7b3      	b.n	8005852 <_malloc_r+0x22>
 80058ea:	6862      	ldr	r2, [r4, #4]
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	bf0c      	ite	eq
 80058f0:	6032      	streq	r2, [r6, #0]
 80058f2:	605a      	strne	r2, [r3, #4]
 80058f4:	e7ec      	b.n	80058d0 <_malloc_r+0xa0>
 80058f6:	4623      	mov	r3, r4
 80058f8:	6864      	ldr	r4, [r4, #4]
 80058fa:	e7b2      	b.n	8005862 <_malloc_r+0x32>
 80058fc:	4634      	mov	r4, r6
 80058fe:	6876      	ldr	r6, [r6, #4]
 8005900:	e7b9      	b.n	8005876 <_malloc_r+0x46>
 8005902:	230c      	movs	r3, #12
 8005904:	4638      	mov	r0, r7
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	f001 fcb0 	bl	800726c <__malloc_unlock>
 800590c:	e7a1      	b.n	8005852 <_malloc_r+0x22>
 800590e:	6025      	str	r5, [r4, #0]
 8005910:	e7de      	b.n	80058d0 <_malloc_r+0xa0>
 8005912:	bf00      	nop
 8005914:	20000444 	.word	0x20000444

08005918 <__cvt>:
 8005918:	2b00      	cmp	r3, #0
 800591a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591e:	461f      	mov	r7, r3
 8005920:	bfbb      	ittet	lt
 8005922:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005926:	461f      	movlt	r7, r3
 8005928:	2300      	movge	r3, #0
 800592a:	232d      	movlt	r3, #45	; 0x2d
 800592c:	b088      	sub	sp, #32
 800592e:	4614      	mov	r4, r2
 8005930:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005932:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005934:	7013      	strb	r3, [r2, #0]
 8005936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005938:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800593c:	f023 0820 	bic.w	r8, r3, #32
 8005940:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005944:	d005      	beq.n	8005952 <__cvt+0x3a>
 8005946:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800594a:	d100      	bne.n	800594e <__cvt+0x36>
 800594c:	3501      	adds	r5, #1
 800594e:	2302      	movs	r3, #2
 8005950:	e000      	b.n	8005954 <__cvt+0x3c>
 8005952:	2303      	movs	r3, #3
 8005954:	aa07      	add	r2, sp, #28
 8005956:	9204      	str	r2, [sp, #16]
 8005958:	aa06      	add	r2, sp, #24
 800595a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800595e:	e9cd 3500 	strd	r3, r5, [sp]
 8005962:	4622      	mov	r2, r4
 8005964:	463b      	mov	r3, r7
 8005966:	f000 fd73 	bl	8006450 <_dtoa_r>
 800596a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800596e:	4606      	mov	r6, r0
 8005970:	d102      	bne.n	8005978 <__cvt+0x60>
 8005972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005974:	07db      	lsls	r3, r3, #31
 8005976:	d522      	bpl.n	80059be <__cvt+0xa6>
 8005978:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800597c:	eb06 0905 	add.w	r9, r6, r5
 8005980:	d110      	bne.n	80059a4 <__cvt+0x8c>
 8005982:	7833      	ldrb	r3, [r6, #0]
 8005984:	2b30      	cmp	r3, #48	; 0x30
 8005986:	d10a      	bne.n	800599e <__cvt+0x86>
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	4620      	mov	r0, r4
 800598e:	4639      	mov	r1, r7
 8005990:	f7fb f8be 	bl	8000b10 <__aeabi_dcmpeq>
 8005994:	b918      	cbnz	r0, 800599e <__cvt+0x86>
 8005996:	f1c5 0501 	rsb	r5, r5, #1
 800599a:	f8ca 5000 	str.w	r5, [sl]
 800599e:	f8da 3000 	ldr.w	r3, [sl]
 80059a2:	4499      	add	r9, r3
 80059a4:	2200      	movs	r2, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	4620      	mov	r0, r4
 80059aa:	4639      	mov	r1, r7
 80059ac:	f7fb f8b0 	bl	8000b10 <__aeabi_dcmpeq>
 80059b0:	b108      	cbz	r0, 80059b6 <__cvt+0x9e>
 80059b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80059b6:	2230      	movs	r2, #48	; 0x30
 80059b8:	9b07      	ldr	r3, [sp, #28]
 80059ba:	454b      	cmp	r3, r9
 80059bc:	d307      	bcc.n	80059ce <__cvt+0xb6>
 80059be:	4630      	mov	r0, r6
 80059c0:	9b07      	ldr	r3, [sp, #28]
 80059c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	b008      	add	sp, #32
 80059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	9107      	str	r1, [sp, #28]
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	e7f0      	b.n	80059b8 <__cvt+0xa0>

080059d6 <__exponent>:
 80059d6:	4603      	mov	r3, r0
 80059d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059da:	2900      	cmp	r1, #0
 80059dc:	f803 2b02 	strb.w	r2, [r3], #2
 80059e0:	bfb6      	itet	lt
 80059e2:	222d      	movlt	r2, #45	; 0x2d
 80059e4:	222b      	movge	r2, #43	; 0x2b
 80059e6:	4249      	neglt	r1, r1
 80059e8:	2909      	cmp	r1, #9
 80059ea:	7042      	strb	r2, [r0, #1]
 80059ec:	dd2b      	ble.n	8005a46 <__exponent+0x70>
 80059ee:	f10d 0407 	add.w	r4, sp, #7
 80059f2:	46a4      	mov	ip, r4
 80059f4:	270a      	movs	r7, #10
 80059f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80059fa:	460a      	mov	r2, r1
 80059fc:	46a6      	mov	lr, r4
 80059fe:	fb07 1516 	mls	r5, r7, r6, r1
 8005a02:	2a63      	cmp	r2, #99	; 0x63
 8005a04:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005a08:	4631      	mov	r1, r6
 8005a0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a12:	dcf0      	bgt.n	80059f6 <__exponent+0x20>
 8005a14:	3130      	adds	r1, #48	; 0x30
 8005a16:	f1ae 0502 	sub.w	r5, lr, #2
 8005a1a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	1c44      	adds	r4, r0, #1
 8005a22:	4561      	cmp	r1, ip
 8005a24:	d30a      	bcc.n	8005a3c <__exponent+0x66>
 8005a26:	f10d 0209 	add.w	r2, sp, #9
 8005a2a:	eba2 020e 	sub.w	r2, r2, lr
 8005a2e:	4565      	cmp	r5, ip
 8005a30:	bf88      	it	hi
 8005a32:	2200      	movhi	r2, #0
 8005a34:	4413      	add	r3, r2
 8005a36:	1a18      	subs	r0, r3, r0
 8005a38:	b003      	add	sp, #12
 8005a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a40:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a44:	e7ed      	b.n	8005a22 <__exponent+0x4c>
 8005a46:	2330      	movs	r3, #48	; 0x30
 8005a48:	3130      	adds	r1, #48	; 0x30
 8005a4a:	7083      	strb	r3, [r0, #2]
 8005a4c:	70c1      	strb	r1, [r0, #3]
 8005a4e:	1d03      	adds	r3, r0, #4
 8005a50:	e7f1      	b.n	8005a36 <__exponent+0x60>
	...

08005a54 <_printf_float>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	b091      	sub	sp, #68	; 0x44
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a60:	4616      	mov	r6, r2
 8005a62:	461f      	mov	r7, r3
 8005a64:	4605      	mov	r5, r0
 8005a66:	f001 fbd7 	bl	8007218 <_localeconv_r>
 8005a6a:	6803      	ldr	r3, [r0, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a70:	f7fa fb6e 	bl	8000150 <strlen>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930e      	str	r3, [sp, #56]	; 0x38
 8005a78:	f8d8 3000 	ldr.w	r3, [r8]
 8005a7c:	900a      	str	r0, [sp, #40]	; 0x28
 8005a7e:	3307      	adds	r3, #7
 8005a80:	f023 0307 	bic.w	r3, r3, #7
 8005a84:	f103 0208 	add.w	r2, r3, #8
 8005a88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a90:	f8c8 2000 	str.w	r2, [r8]
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a9c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005aa0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4b9c      	ldr	r3, [pc, #624]	; (8005d20 <_printf_float+0x2cc>)
 8005aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ab0:	f7fb f860 	bl	8000b74 <__aeabi_dcmpun>
 8005ab4:	bb70      	cbnz	r0, 8005b14 <_printf_float+0xc0>
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	4640      	mov	r0, r8
 8005abc:	4b98      	ldr	r3, [pc, #608]	; (8005d20 <_printf_float+0x2cc>)
 8005abe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ac0:	f7fb f83a 	bl	8000b38 <__aeabi_dcmple>
 8005ac4:	bb30      	cbnz	r0, 8005b14 <_printf_float+0xc0>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4640      	mov	r0, r8
 8005acc:	4651      	mov	r1, sl
 8005ace:	f7fb f829 	bl	8000b24 <__aeabi_dcmplt>
 8005ad2:	b110      	cbz	r0, 8005ada <_printf_float+0x86>
 8005ad4:	232d      	movs	r3, #45	; 0x2d
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ada:	4b92      	ldr	r3, [pc, #584]	; (8005d24 <_printf_float+0x2d0>)
 8005adc:	4892      	ldr	r0, [pc, #584]	; (8005d28 <_printf_float+0x2d4>)
 8005ade:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ae2:	bf94      	ite	ls
 8005ae4:	4698      	movls	r8, r3
 8005ae6:	4680      	movhi	r8, r0
 8005ae8:	2303      	movs	r3, #3
 8005aea:	f04f 0a00 	mov.w	sl, #0
 8005aee:	6123      	str	r3, [r4, #16]
 8005af0:	f02b 0304 	bic.w	r3, fp, #4
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	4633      	mov	r3, r6
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	9700      	str	r7, [sp, #0]
 8005afe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005b00:	f000 f9d4 	bl	8005eac <_printf_common>
 8005b04:	3001      	adds	r0, #1
 8005b06:	f040 8090 	bne.w	8005c2a <_printf_float+0x1d6>
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	b011      	add	sp, #68	; 0x44
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	4642      	mov	r2, r8
 8005b16:	4653      	mov	r3, sl
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	f7fb f82a 	bl	8000b74 <__aeabi_dcmpun>
 8005b20:	b148      	cbz	r0, 8005b36 <_printf_float+0xe2>
 8005b22:	f1ba 0f00 	cmp.w	sl, #0
 8005b26:	bfb8      	it	lt
 8005b28:	232d      	movlt	r3, #45	; 0x2d
 8005b2a:	4880      	ldr	r0, [pc, #512]	; (8005d2c <_printf_float+0x2d8>)
 8005b2c:	bfb8      	it	lt
 8005b2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b32:	4b7f      	ldr	r3, [pc, #508]	; (8005d30 <_printf_float+0x2dc>)
 8005b34:	e7d3      	b.n	8005ade <_printf_float+0x8a>
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	d142      	bne.n	8005bc6 <_printf_float+0x172>
 8005b40:	2306      	movs	r3, #6
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	9206      	str	r2, [sp, #24]
 8005b48:	aa0e      	add	r2, sp, #56	; 0x38
 8005b4a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b4e:	aa0d      	add	r2, sp, #52	; 0x34
 8005b50:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b54:	9203      	str	r2, [sp, #12]
 8005b56:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	4642      	mov	r2, r8
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	4628      	mov	r0, r5
 8005b68:	4653      	mov	r3, sl
 8005b6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b6c:	f7ff fed4 	bl	8005918 <__cvt>
 8005b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b72:	4680      	mov	r8, r0
 8005b74:	2947      	cmp	r1, #71	; 0x47
 8005b76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b78:	d108      	bne.n	8005b8c <_printf_float+0x138>
 8005b7a:	1cc8      	adds	r0, r1, #3
 8005b7c:	db02      	blt.n	8005b84 <_printf_float+0x130>
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	4299      	cmp	r1, r3
 8005b82:	dd40      	ble.n	8005c06 <_printf_float+0x1b2>
 8005b84:	f1a9 0902 	sub.w	r9, r9, #2
 8005b88:	fa5f f989 	uxtb.w	r9, r9
 8005b8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b90:	d81f      	bhi.n	8005bd2 <_printf_float+0x17e>
 8005b92:	464a      	mov	r2, r9
 8005b94:	3901      	subs	r1, #1
 8005b96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b9c:	f7ff ff1b 	bl	80059d6 <__exponent>
 8005ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ba2:	4682      	mov	sl, r0
 8005ba4:	1813      	adds	r3, r2, r0
 8005ba6:	2a01      	cmp	r2, #1
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	dc02      	bgt.n	8005bb2 <_printf_float+0x15e>
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	07d2      	lsls	r2, r2, #31
 8005bb0:	d501      	bpl.n	8005bb6 <_printf_float+0x162>
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d09b      	beq.n	8005af6 <_printf_float+0xa2>
 8005bbe:	232d      	movs	r3, #45	; 0x2d
 8005bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc4:	e797      	b.n	8005af6 <_printf_float+0xa2>
 8005bc6:	2947      	cmp	r1, #71	; 0x47
 8005bc8:	d1bc      	bne.n	8005b44 <_printf_float+0xf0>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ba      	bne.n	8005b44 <_printf_float+0xf0>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e7b7      	b.n	8005b42 <_printf_float+0xee>
 8005bd2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005bd6:	d118      	bne.n	8005c0a <_printf_float+0x1b6>
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	dd0b      	ble.n	8005bf6 <_printf_float+0x1a2>
 8005bde:	6121      	str	r1, [r4, #16]
 8005be0:	b913      	cbnz	r3, 8005be8 <_printf_float+0x194>
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	07d0      	lsls	r0, r2, #31
 8005be6:	d502      	bpl.n	8005bee <_printf_float+0x19a>
 8005be8:	3301      	adds	r3, #1
 8005bea:	440b      	add	r3, r1
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	f04f 0a00 	mov.w	sl, #0
 8005bf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bf4:	e7df      	b.n	8005bb6 <_printf_float+0x162>
 8005bf6:	b913      	cbnz	r3, 8005bfe <_printf_float+0x1aa>
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	07d2      	lsls	r2, r2, #31
 8005bfc:	d501      	bpl.n	8005c02 <_printf_float+0x1ae>
 8005bfe:	3302      	adds	r3, #2
 8005c00:	e7f4      	b.n	8005bec <_printf_float+0x198>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7f2      	b.n	8005bec <_printf_float+0x198>
 8005c06:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	db05      	blt.n	8005c1c <_printf_float+0x1c8>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	6121      	str	r1, [r4, #16]
 8005c14:	07d8      	lsls	r0, r3, #31
 8005c16:	d5ea      	bpl.n	8005bee <_printf_float+0x19a>
 8005c18:	1c4b      	adds	r3, r1, #1
 8005c1a:	e7e7      	b.n	8005bec <_printf_float+0x198>
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	bfcc      	ite	gt
 8005c20:	2201      	movgt	r2, #1
 8005c22:	f1c1 0202 	rsble	r2, r1, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	e7e0      	b.n	8005bec <_printf_float+0x198>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	055a      	lsls	r2, r3, #21
 8005c2e:	d407      	bmi.n	8005c40 <_printf_float+0x1ec>
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	4642      	mov	r2, r8
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d12b      	bne.n	8005c96 <_printf_float+0x242>
 8005c3e:	e764      	b.n	8005b0a <_printf_float+0xb6>
 8005c40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c44:	f240 80dd 	bls.w	8005e02 <_printf_float+0x3ae>
 8005c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f7fa ff5e 	bl	8000b10 <__aeabi_dcmpeq>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d033      	beq.n	8005cc0 <_printf_float+0x26c>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <_printf_float+0x2e0>)
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af51 	beq.w	8005b0a <_printf_float+0xb6>
 8005c68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	db02      	blt.n	8005c76 <_printf_float+0x222>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	07d8      	lsls	r0, r3, #31
 8005c74:	d50f      	bpl.n	8005c96 <_printf_float+0x242>
 8005c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f af42 	beq.w	8005b0a <_printf_float+0xb6>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 091a 	add.w	r9, r4, #26
 8005c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c90:	3b01      	subs	r3, #1
 8005c92:	4543      	cmp	r3, r8
 8005c94:	dc09      	bgt.n	8005caa <_printf_float+0x256>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	079b      	lsls	r3, r3, #30
 8005c9a:	f100 8102 	bmi.w	8005ea2 <_printf_float+0x44e>
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca2:	4298      	cmp	r0, r3
 8005ca4:	bfb8      	it	lt
 8005ca6:	4618      	movlt	r0, r3
 8005ca8:	e731      	b.n	8005b0e <_printf_float+0xba>
 8005caa:	2301      	movs	r3, #1
 8005cac:	464a      	mov	r2, r9
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f af28 	beq.w	8005b0a <_printf_float+0xb6>
 8005cba:	f108 0801 	add.w	r8, r8, #1
 8005cbe:	e7e6      	b.n	8005c8e <_printf_float+0x23a>
 8005cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dc38      	bgt.n	8005d38 <_printf_float+0x2e4>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <_printf_float+0x2e0>)
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f af1a 	beq.w	8005b0a <_printf_float+0xb6>
 8005cd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	d102      	bne.n	8005ce4 <_printf_float+0x290>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	07d9      	lsls	r1, r3, #31
 8005ce2:	d5d8      	bpl.n	8005c96 <_printf_float+0x242>
 8005ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f af0b 	beq.w	8005b0a <_printf_float+0xb6>
 8005cf4:	f04f 0900 	mov.w	r9, #0
 8005cf8:	f104 0a1a 	add.w	sl, r4, #26
 8005cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cfe:	425b      	negs	r3, r3
 8005d00:	454b      	cmp	r3, r9
 8005d02:	dc01      	bgt.n	8005d08 <_printf_float+0x2b4>
 8005d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d06:	e794      	b.n	8005c32 <_printf_float+0x1de>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f aef9 	beq.w	8005b0a <_printf_float+0xb6>
 8005d18:	f109 0901 	add.w	r9, r9, #1
 8005d1c:	e7ee      	b.n	8005cfc <_printf_float+0x2a8>
 8005d1e:	bf00      	nop
 8005d20:	7fefffff 	.word	0x7fefffff
 8005d24:	080082f8 	.word	0x080082f8
 8005d28:	080082fc 	.word	0x080082fc
 8005d2c:	08008304 	.word	0x08008304
 8005d30:	08008300 	.word	0x08008300
 8005d34:	08008308 	.word	0x08008308
 8005d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	bfa8      	it	ge
 8005d40:	461a      	movge	r2, r3
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	4691      	mov	r9, r2
 8005d46:	dc37      	bgt.n	8005db8 <_printf_float+0x364>
 8005d48:	f04f 0b00 	mov.w	fp, #0
 8005d4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d50:	f104 021a 	add.w	r2, r4, #26
 8005d54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d58:	ebaa 0309 	sub.w	r3, sl, r9
 8005d5c:	455b      	cmp	r3, fp
 8005d5e:	dc33      	bgt.n	8005dc8 <_printf_float+0x374>
 8005d60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d64:	429a      	cmp	r2, r3
 8005d66:	db3b      	blt.n	8005de0 <_printf_float+0x38c>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07da      	lsls	r2, r3, #31
 8005d6c:	d438      	bmi.n	8005de0 <_printf_float+0x38c>
 8005d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d72:	eba3 020a 	sub.w	r2, r3, sl
 8005d76:	eba3 0901 	sub.w	r9, r3, r1
 8005d7a:	4591      	cmp	r9, r2
 8005d7c:	bfa8      	it	ge
 8005d7e:	4691      	movge	r9, r2
 8005d80:	f1b9 0f00 	cmp.w	r9, #0
 8005d84:	dc34      	bgt.n	8005df0 <_printf_float+0x39c>
 8005d86:	f04f 0800 	mov.w	r8, #0
 8005d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8e:	f104 0a1a 	add.w	sl, r4, #26
 8005d92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	eba3 0309 	sub.w	r3, r3, r9
 8005d9c:	4543      	cmp	r3, r8
 8005d9e:	f77f af7a 	ble.w	8005c96 <_printf_float+0x242>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4652      	mov	r2, sl
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f aeac 	beq.w	8005b0a <_printf_float+0xb6>
 8005db2:	f108 0801 	add.w	r8, r8, #1
 8005db6:	e7ec      	b.n	8005d92 <_printf_float+0x33e>
 8005db8:	4613      	mov	r3, r2
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b8      	blx	r7
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d1c0      	bne.n	8005d48 <_printf_float+0x2f4>
 8005dc6:	e6a0      	b.n	8005b0a <_printf_float+0xb6>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f ae99 	beq.w	8005b0a <_printf_float+0xb6>
 8005dd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dda:	f10b 0b01 	add.w	fp, fp, #1
 8005dde:	e7b9      	b.n	8005d54 <_printf_float+0x300>
 8005de0:	4631      	mov	r1, r6
 8005de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	d1bf      	bne.n	8005d6e <_printf_float+0x31a>
 8005dee:	e68c      	b.n	8005b0a <_printf_float+0xb6>
 8005df0:	464b      	mov	r3, r9
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	eb08 020a 	add.w	r2, r8, sl
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d1c2      	bne.n	8005d86 <_printf_float+0x332>
 8005e00:	e683      	b.n	8005b0a <_printf_float+0xb6>
 8005e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e04:	2a01      	cmp	r2, #1
 8005e06:	dc01      	bgt.n	8005e0c <_printf_float+0x3b8>
 8005e08:	07db      	lsls	r3, r3, #31
 8005e0a:	d537      	bpl.n	8005e7c <_printf_float+0x428>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4642      	mov	r2, r8
 8005e10:	4631      	mov	r1, r6
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	f43f ae77 	beq.w	8005b0a <_printf_float+0xb6>
 8005e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f ae6f 	beq.w	8005b0a <_printf_float+0xb6>
 8005e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	f7fa fe6c 	bl	8000b10 <__aeabi_dcmpeq>
 8005e38:	b9d8      	cbnz	r0, 8005e72 <_printf_float+0x41e>
 8005e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3c:	f108 0201 	add.w	r2, r8, #1
 8005e40:	3b01      	subs	r3, #1
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d10e      	bne.n	8005e6a <_printf_float+0x416>
 8005e4c:	e65d      	b.n	8005b0a <_printf_float+0xb6>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	464a      	mov	r2, r9
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f ae56 	beq.w	8005b0a <_printf_float+0xb6>
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e64:	3b01      	subs	r3, #1
 8005e66:	4543      	cmp	r3, r8
 8005e68:	dcf1      	bgt.n	8005e4e <_printf_float+0x3fa>
 8005e6a:	4653      	mov	r3, sl
 8005e6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e70:	e6e0      	b.n	8005c34 <_printf_float+0x1e0>
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	f104 091a 	add.w	r9, r4, #26
 8005e7a:	e7f2      	b.n	8005e62 <_printf_float+0x40e>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4642      	mov	r2, r8
 8005e80:	e7df      	b.n	8005e42 <_printf_float+0x3ee>
 8005e82:	2301      	movs	r3, #1
 8005e84:	464a      	mov	r2, r9
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f ae3c 	beq.w	8005b0a <_printf_float+0xb6>
 8005e92:	f108 0801 	add.w	r8, r8, #1
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e9a:	1a5b      	subs	r3, r3, r1
 8005e9c:	4543      	cmp	r3, r8
 8005e9e:	dcf0      	bgt.n	8005e82 <_printf_float+0x42e>
 8005ea0:	e6fd      	b.n	8005c9e <_printf_float+0x24a>
 8005ea2:	f04f 0800 	mov.w	r8, #0
 8005ea6:	f104 0919 	add.w	r9, r4, #25
 8005eaa:	e7f4      	b.n	8005e96 <_printf_float+0x442>

08005eac <_printf_common>:
 8005eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb0:	4616      	mov	r6, r2
 8005eb2:	4699      	mov	r9, r3
 8005eb4:	688a      	ldr	r2, [r1, #8]
 8005eb6:	690b      	ldr	r3, [r1, #16]
 8005eb8:	4607      	mov	r7, r0
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	bfb8      	it	lt
 8005ebe:	4613      	movlt	r3, r2
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ecc:	b10a      	cbz	r2, 8005ed2 <_printf_common+0x26>
 8005ece:	3301      	adds	r3, #1
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	0699      	lsls	r1, r3, #26
 8005ed6:	bf42      	ittt	mi
 8005ed8:	6833      	ldrmi	r3, [r6, #0]
 8005eda:	3302      	addmi	r3, #2
 8005edc:	6033      	strmi	r3, [r6, #0]
 8005ede:	6825      	ldr	r5, [r4, #0]
 8005ee0:	f015 0506 	ands.w	r5, r5, #6
 8005ee4:	d106      	bne.n	8005ef4 <_printf_common+0x48>
 8005ee6:	f104 0a19 	add.w	sl, r4, #25
 8005eea:	68e3      	ldr	r3, [r4, #12]
 8005eec:	6832      	ldr	r2, [r6, #0]
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	dc28      	bgt.n	8005f46 <_printf_common+0x9a>
 8005ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ef8:	1e13      	subs	r3, r2, #0
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	bf18      	it	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	0692      	lsls	r2, r2, #26
 8005f02:	d42d      	bmi.n	8005f60 <_printf_common+0xb4>
 8005f04:	4649      	mov	r1, r9
 8005f06:	4638      	mov	r0, r7
 8005f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f0c:	47c0      	blx	r8
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d020      	beq.n	8005f54 <_printf_common+0xa8>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	68e5      	ldr	r5, [r4, #12]
 8005f16:	f003 0306 	and.w	r3, r3, #6
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	bf18      	it	ne
 8005f1e:	2500      	movne	r5, #0
 8005f20:	6832      	ldr	r2, [r6, #0]
 8005f22:	f04f 0600 	mov.w	r6, #0
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	bf08      	it	eq
 8005f2a:	1aad      	subeq	r5, r5, r2
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	bf08      	it	eq
 8005f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bfc4      	itt	gt
 8005f38:	1a9b      	subgt	r3, r3, r2
 8005f3a:	18ed      	addgt	r5, r5, r3
 8005f3c:	341a      	adds	r4, #26
 8005f3e:	42b5      	cmp	r5, r6
 8005f40:	d11a      	bne.n	8005f78 <_printf_common+0xcc>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e008      	b.n	8005f58 <_printf_common+0xac>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	47c0      	blx	r8
 8005f50:	3001      	adds	r0, #1
 8005f52:	d103      	bne.n	8005f5c <_printf_common+0xb0>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	e7c4      	b.n	8005eea <_printf_common+0x3e>
 8005f60:	2030      	movs	r0, #48	; 0x30
 8005f62:	18e1      	adds	r1, r4, r3
 8005f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f6e:	4422      	add	r2, r4
 8005f70:	3302      	adds	r3, #2
 8005f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f76:	e7c5      	b.n	8005f04 <_printf_common+0x58>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4638      	mov	r0, r7
 8005f80:	47c0      	blx	r8
 8005f82:	3001      	adds	r0, #1
 8005f84:	d0e6      	beq.n	8005f54 <_printf_common+0xa8>
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7d9      	b.n	8005f3e <_printf_common+0x92>
	...

08005f8c <_printf_i>:
 8005f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	7e0f      	ldrb	r7, [r1, #24]
 8005f92:	4691      	mov	r9, r2
 8005f94:	2f78      	cmp	r7, #120	; 0x78
 8005f96:	4680      	mov	r8, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	469a      	mov	sl, r3
 8005f9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fa2:	d807      	bhi.n	8005fb4 <_printf_i+0x28>
 8005fa4:	2f62      	cmp	r7, #98	; 0x62
 8005fa6:	d80a      	bhi.n	8005fbe <_printf_i+0x32>
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	f000 80d9 	beq.w	8006160 <_printf_i+0x1d4>
 8005fae:	2f58      	cmp	r7, #88	; 0x58
 8005fb0:	f000 80a4 	beq.w	80060fc <_printf_i+0x170>
 8005fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fbc:	e03a      	b.n	8006034 <_printf_i+0xa8>
 8005fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fc2:	2b15      	cmp	r3, #21
 8005fc4:	d8f6      	bhi.n	8005fb4 <_printf_i+0x28>
 8005fc6:	a101      	add	r1, pc, #4	; (adr r1, 8005fcc <_printf_i+0x40>)
 8005fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	08006039 	.word	0x08006039
 8005fd4:	08005fb5 	.word	0x08005fb5
 8005fd8:	08005fb5 	.word	0x08005fb5
 8005fdc:	08005fb5 	.word	0x08005fb5
 8005fe0:	08005fb5 	.word	0x08005fb5
 8005fe4:	08006039 	.word	0x08006039
 8005fe8:	08005fb5 	.word	0x08005fb5
 8005fec:	08005fb5 	.word	0x08005fb5
 8005ff0:	08005fb5 	.word	0x08005fb5
 8005ff4:	08005fb5 	.word	0x08005fb5
 8005ff8:	08006147 	.word	0x08006147
 8005ffc:	08006069 	.word	0x08006069
 8006000:	08006129 	.word	0x08006129
 8006004:	08005fb5 	.word	0x08005fb5
 8006008:	08005fb5 	.word	0x08005fb5
 800600c:	08006169 	.word	0x08006169
 8006010:	08005fb5 	.word	0x08005fb5
 8006014:	08006069 	.word	0x08006069
 8006018:	08005fb5 	.word	0x08005fb5
 800601c:	08005fb5 	.word	0x08005fb5
 8006020:	08006131 	.word	0x08006131
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	602a      	str	r2, [r5, #0]
 800602c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006034:	2301      	movs	r3, #1
 8006036:	e0a4      	b.n	8006182 <_printf_i+0x1f6>
 8006038:	6820      	ldr	r0, [r4, #0]
 800603a:	6829      	ldr	r1, [r5, #0]
 800603c:	0606      	lsls	r6, r0, #24
 800603e:	f101 0304 	add.w	r3, r1, #4
 8006042:	d50a      	bpl.n	800605a <_printf_i+0xce>
 8006044:	680e      	ldr	r6, [r1, #0]
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	2e00      	cmp	r6, #0
 800604a:	da03      	bge.n	8006054 <_printf_i+0xc8>
 800604c:	232d      	movs	r3, #45	; 0x2d
 800604e:	4276      	negs	r6, r6
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006054:	230a      	movs	r3, #10
 8006056:	485e      	ldr	r0, [pc, #376]	; (80061d0 <_printf_i+0x244>)
 8006058:	e019      	b.n	800608e <_printf_i+0x102>
 800605a:	680e      	ldr	r6, [r1, #0]
 800605c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	bf18      	it	ne
 8006064:	b236      	sxthne	r6, r6
 8006066:	e7ef      	b.n	8006048 <_printf_i+0xbc>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	1d19      	adds	r1, r3, #4
 800606e:	6029      	str	r1, [r5, #0]
 8006070:	0601      	lsls	r1, r0, #24
 8006072:	d501      	bpl.n	8006078 <_printf_i+0xec>
 8006074:	681e      	ldr	r6, [r3, #0]
 8006076:	e002      	b.n	800607e <_printf_i+0xf2>
 8006078:	0646      	lsls	r6, r0, #25
 800607a:	d5fb      	bpl.n	8006074 <_printf_i+0xe8>
 800607c:	881e      	ldrh	r6, [r3, #0]
 800607e:	2f6f      	cmp	r7, #111	; 0x6f
 8006080:	bf0c      	ite	eq
 8006082:	2308      	moveq	r3, #8
 8006084:	230a      	movne	r3, #10
 8006086:	4852      	ldr	r0, [pc, #328]	; (80061d0 <_printf_i+0x244>)
 8006088:	2100      	movs	r1, #0
 800608a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800608e:	6865      	ldr	r5, [r4, #4]
 8006090:	2d00      	cmp	r5, #0
 8006092:	bfa8      	it	ge
 8006094:	6821      	ldrge	r1, [r4, #0]
 8006096:	60a5      	str	r5, [r4, #8]
 8006098:	bfa4      	itt	ge
 800609a:	f021 0104 	bicge.w	r1, r1, #4
 800609e:	6021      	strge	r1, [r4, #0]
 80060a0:	b90e      	cbnz	r6, 80060a6 <_printf_i+0x11a>
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	d04d      	beq.n	8006142 <_printf_i+0x1b6>
 80060a6:	4615      	mov	r5, r2
 80060a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80060ac:	fb03 6711 	mls	r7, r3, r1, r6
 80060b0:	5dc7      	ldrb	r7, [r0, r7]
 80060b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060b6:	4637      	mov	r7, r6
 80060b8:	42bb      	cmp	r3, r7
 80060ba:	460e      	mov	r6, r1
 80060bc:	d9f4      	bls.n	80060a8 <_printf_i+0x11c>
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d10b      	bne.n	80060da <_printf_i+0x14e>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	07de      	lsls	r6, r3, #31
 80060c6:	d508      	bpl.n	80060da <_printf_i+0x14e>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	6861      	ldr	r1, [r4, #4]
 80060cc:	4299      	cmp	r1, r3
 80060ce:	bfde      	ittt	le
 80060d0:	2330      	movle	r3, #48	; 0x30
 80060d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060da:	1b52      	subs	r2, r2, r5
 80060dc:	6122      	str	r2, [r4, #16]
 80060de:	464b      	mov	r3, r9
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f8cd a000 	str.w	sl, [sp]
 80060e8:	aa03      	add	r2, sp, #12
 80060ea:	f7ff fedf 	bl	8005eac <_printf_common>
 80060ee:	3001      	adds	r0, #1
 80060f0:	d14c      	bne.n	800618c <_printf_i+0x200>
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295
 80060f6:	b004      	add	sp, #16
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	4834      	ldr	r0, [pc, #208]	; (80061d0 <_printf_i+0x244>)
 80060fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006102:	6829      	ldr	r1, [r5, #0]
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	f851 6b04 	ldr.w	r6, [r1], #4
 800610a:	6029      	str	r1, [r5, #0]
 800610c:	061d      	lsls	r5, r3, #24
 800610e:	d514      	bpl.n	800613a <_printf_i+0x1ae>
 8006110:	07df      	lsls	r7, r3, #31
 8006112:	bf44      	itt	mi
 8006114:	f043 0320 	orrmi.w	r3, r3, #32
 8006118:	6023      	strmi	r3, [r4, #0]
 800611a:	b91e      	cbnz	r6, 8006124 <_printf_i+0x198>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	f023 0320 	bic.w	r3, r3, #32
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	2310      	movs	r3, #16
 8006126:	e7af      	b.n	8006088 <_printf_i+0xfc>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	f043 0320 	orr.w	r3, r3, #32
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	2378      	movs	r3, #120	; 0x78
 8006132:	4828      	ldr	r0, [pc, #160]	; (80061d4 <_printf_i+0x248>)
 8006134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006138:	e7e3      	b.n	8006102 <_printf_i+0x176>
 800613a:	0659      	lsls	r1, r3, #25
 800613c:	bf48      	it	mi
 800613e:	b2b6      	uxthmi	r6, r6
 8006140:	e7e6      	b.n	8006110 <_printf_i+0x184>
 8006142:	4615      	mov	r5, r2
 8006144:	e7bb      	b.n	80060be <_printf_i+0x132>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	6826      	ldr	r6, [r4, #0]
 800614a:	1d18      	adds	r0, r3, #4
 800614c:	6961      	ldr	r1, [r4, #20]
 800614e:	6028      	str	r0, [r5, #0]
 8006150:	0635      	lsls	r5, r6, #24
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	d501      	bpl.n	800615a <_printf_i+0x1ce>
 8006156:	6019      	str	r1, [r3, #0]
 8006158:	e002      	b.n	8006160 <_printf_i+0x1d4>
 800615a:	0670      	lsls	r0, r6, #25
 800615c:	d5fb      	bpl.n	8006156 <_printf_i+0x1ca>
 800615e:	8019      	strh	r1, [r3, #0]
 8006160:	2300      	movs	r3, #0
 8006162:	4615      	mov	r5, r2
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	e7ba      	b.n	80060de <_printf_i+0x152>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	2100      	movs	r1, #0
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	602a      	str	r2, [r5, #0]
 8006170:	681d      	ldr	r5, [r3, #0]
 8006172:	6862      	ldr	r2, [r4, #4]
 8006174:	4628      	mov	r0, r5
 8006176:	f001 f856 	bl	8007226 <memchr>
 800617a:	b108      	cbz	r0, 8006180 <_printf_i+0x1f4>
 800617c:	1b40      	subs	r0, r0, r5
 800617e:	6060      	str	r0, [r4, #4]
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	2300      	movs	r3, #0
 8006186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800618a:	e7a8      	b.n	80060de <_printf_i+0x152>
 800618c:	462a      	mov	r2, r5
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	47d0      	blx	sl
 8006196:	3001      	adds	r0, #1
 8006198:	d0ab      	beq.n	80060f2 <_printf_i+0x166>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	079b      	lsls	r3, r3, #30
 800619e:	d413      	bmi.n	80061c8 <_printf_i+0x23c>
 80061a0:	68e0      	ldr	r0, [r4, #12]
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	4298      	cmp	r0, r3
 80061a6:	bfb8      	it	lt
 80061a8:	4618      	movlt	r0, r3
 80061aa:	e7a4      	b.n	80060f6 <_printf_i+0x16a>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4632      	mov	r2, r6
 80061b0:	4649      	mov	r1, r9
 80061b2:	4640      	mov	r0, r8
 80061b4:	47d0      	blx	sl
 80061b6:	3001      	adds	r0, #1
 80061b8:	d09b      	beq.n	80060f2 <_printf_i+0x166>
 80061ba:	3501      	adds	r5, #1
 80061bc:	68e3      	ldr	r3, [r4, #12]
 80061be:	9903      	ldr	r1, [sp, #12]
 80061c0:	1a5b      	subs	r3, r3, r1
 80061c2:	42ab      	cmp	r3, r5
 80061c4:	dcf2      	bgt.n	80061ac <_printf_i+0x220>
 80061c6:	e7eb      	b.n	80061a0 <_printf_i+0x214>
 80061c8:	2500      	movs	r5, #0
 80061ca:	f104 0619 	add.w	r6, r4, #25
 80061ce:	e7f5      	b.n	80061bc <_printf_i+0x230>
 80061d0:	0800830a 	.word	0x0800830a
 80061d4:	0800831b 	.word	0x0800831b

080061d8 <iprintf>:
 80061d8:	b40f      	push	{r0, r1, r2, r3}
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <iprintf+0x2c>)
 80061dc:	b513      	push	{r0, r1, r4, lr}
 80061de:	681c      	ldr	r4, [r3, #0]
 80061e0:	b124      	cbz	r4, 80061ec <iprintf+0x14>
 80061e2:	69a3      	ldr	r3, [r4, #24]
 80061e4:	b913      	cbnz	r3, 80061ec <iprintf+0x14>
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 ff78 	bl	80070dc <__sinit>
 80061ec:	ab05      	add	r3, sp, #20
 80061ee:	4620      	mov	r0, r4
 80061f0:	9a04      	ldr	r2, [sp, #16]
 80061f2:	68a1      	ldr	r1, [r4, #8]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	f001 fbfd 	bl	80079f4 <_vfiprintf_r>
 80061fa:	b002      	add	sp, #8
 80061fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006200:	b004      	add	sp, #16
 8006202:	4770      	bx	lr
 8006204:	2000000c 	.word	0x2000000c

08006208 <_sbrk_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	2300      	movs	r3, #0
 800620c:	4d05      	ldr	r5, [pc, #20]	; (8006224 <_sbrk_r+0x1c>)
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fc fb70 	bl	80028f8 <_sbrk>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_sbrk_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_sbrk_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000450 	.word	0x20000450

08006228 <_strtol_l.constprop.0>:
 8006228:	2b01      	cmp	r3, #1
 800622a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622e:	4680      	mov	r8, r0
 8006230:	d001      	beq.n	8006236 <_strtol_l.constprop.0+0xe>
 8006232:	2b24      	cmp	r3, #36	; 0x24
 8006234:	d906      	bls.n	8006244 <_strtol_l.constprop.0+0x1c>
 8006236:	f7ff fa59 	bl	80056ec <__errno>
 800623a:	2316      	movs	r3, #22
 800623c:	6003      	str	r3, [r0, #0]
 800623e:	2000      	movs	r0, #0
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	460d      	mov	r5, r1
 8006246:	4f35      	ldr	r7, [pc, #212]	; (800631c <_strtol_l.constprop.0+0xf4>)
 8006248:	4628      	mov	r0, r5
 800624a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800624e:	5de6      	ldrb	r6, [r4, r7]
 8006250:	f016 0608 	ands.w	r6, r6, #8
 8006254:	d1f8      	bne.n	8006248 <_strtol_l.constprop.0+0x20>
 8006256:	2c2d      	cmp	r4, #45	; 0x2d
 8006258:	d12f      	bne.n	80062ba <_strtol_l.constprop.0+0x92>
 800625a:	2601      	movs	r6, #1
 800625c:	782c      	ldrb	r4, [r5, #0]
 800625e:	1c85      	adds	r5, r0, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d057      	beq.n	8006314 <_strtol_l.constprop.0+0xec>
 8006264:	2b10      	cmp	r3, #16
 8006266:	d109      	bne.n	800627c <_strtol_l.constprop.0+0x54>
 8006268:	2c30      	cmp	r4, #48	; 0x30
 800626a:	d107      	bne.n	800627c <_strtol_l.constprop.0+0x54>
 800626c:	7828      	ldrb	r0, [r5, #0]
 800626e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006272:	2858      	cmp	r0, #88	; 0x58
 8006274:	d149      	bne.n	800630a <_strtol_l.constprop.0+0xe2>
 8006276:	2310      	movs	r3, #16
 8006278:	786c      	ldrb	r4, [r5, #1]
 800627a:	3502      	adds	r5, #2
 800627c:	2700      	movs	r7, #0
 800627e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006282:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006286:	fbbe f9f3 	udiv	r9, lr, r3
 800628a:	4638      	mov	r0, r7
 800628c:	fb03 ea19 	mls	sl, r3, r9, lr
 8006290:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006294:	f1bc 0f09 	cmp.w	ip, #9
 8006298:	d814      	bhi.n	80062c4 <_strtol_l.constprop.0+0x9c>
 800629a:	4664      	mov	r4, ip
 800629c:	42a3      	cmp	r3, r4
 800629e:	dd22      	ble.n	80062e6 <_strtol_l.constprop.0+0xbe>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	db1d      	blt.n	80062e0 <_strtol_l.constprop.0+0xb8>
 80062a4:	4581      	cmp	r9, r0
 80062a6:	d31b      	bcc.n	80062e0 <_strtol_l.constprop.0+0xb8>
 80062a8:	d101      	bne.n	80062ae <_strtol_l.constprop.0+0x86>
 80062aa:	45a2      	cmp	sl, r4
 80062ac:	db18      	blt.n	80062e0 <_strtol_l.constprop.0+0xb8>
 80062ae:	2701      	movs	r7, #1
 80062b0:	fb00 4003 	mla	r0, r0, r3, r4
 80062b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062b8:	e7ea      	b.n	8006290 <_strtol_l.constprop.0+0x68>
 80062ba:	2c2b      	cmp	r4, #43	; 0x2b
 80062bc:	bf04      	itt	eq
 80062be:	782c      	ldrbeq	r4, [r5, #0]
 80062c0:	1c85      	addeq	r5, r0, #2
 80062c2:	e7cd      	b.n	8006260 <_strtol_l.constprop.0+0x38>
 80062c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062c8:	f1bc 0f19 	cmp.w	ip, #25
 80062cc:	d801      	bhi.n	80062d2 <_strtol_l.constprop.0+0xaa>
 80062ce:	3c37      	subs	r4, #55	; 0x37
 80062d0:	e7e4      	b.n	800629c <_strtol_l.constprop.0+0x74>
 80062d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80062d6:	f1bc 0f19 	cmp.w	ip, #25
 80062da:	d804      	bhi.n	80062e6 <_strtol_l.constprop.0+0xbe>
 80062dc:	3c57      	subs	r4, #87	; 0x57
 80062de:	e7dd      	b.n	800629c <_strtol_l.constprop.0+0x74>
 80062e0:	f04f 37ff 	mov.w	r7, #4294967295
 80062e4:	e7e6      	b.n	80062b4 <_strtol_l.constprop.0+0x8c>
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	da07      	bge.n	80062fa <_strtol_l.constprop.0+0xd2>
 80062ea:	2322      	movs	r3, #34	; 0x22
 80062ec:	4670      	mov	r0, lr
 80062ee:	f8c8 3000 	str.w	r3, [r8]
 80062f2:	2a00      	cmp	r2, #0
 80062f4:	d0a4      	beq.n	8006240 <_strtol_l.constprop.0+0x18>
 80062f6:	1e69      	subs	r1, r5, #1
 80062f8:	e005      	b.n	8006306 <_strtol_l.constprop.0+0xde>
 80062fa:	b106      	cbz	r6, 80062fe <_strtol_l.constprop.0+0xd6>
 80062fc:	4240      	negs	r0, r0
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d09e      	beq.n	8006240 <_strtol_l.constprop.0+0x18>
 8006302:	2f00      	cmp	r7, #0
 8006304:	d1f7      	bne.n	80062f6 <_strtol_l.constprop.0+0xce>
 8006306:	6011      	str	r1, [r2, #0]
 8006308:	e79a      	b.n	8006240 <_strtol_l.constprop.0+0x18>
 800630a:	2430      	movs	r4, #48	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1b5      	bne.n	800627c <_strtol_l.constprop.0+0x54>
 8006310:	2308      	movs	r3, #8
 8006312:	e7b3      	b.n	800627c <_strtol_l.constprop.0+0x54>
 8006314:	2c30      	cmp	r4, #48	; 0x30
 8006316:	d0a9      	beq.n	800626c <_strtol_l.constprop.0+0x44>
 8006318:	230a      	movs	r3, #10
 800631a:	e7af      	b.n	800627c <_strtol_l.constprop.0+0x54>
 800631c:	0800832d 	.word	0x0800832d

08006320 <strtol>:
 8006320:	4613      	mov	r3, r2
 8006322:	460a      	mov	r2, r1
 8006324:	4601      	mov	r1, r0
 8006326:	4802      	ldr	r0, [pc, #8]	; (8006330 <strtol+0x10>)
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f7ff bf7d 	b.w	8006228 <_strtol_l.constprop.0>
 800632e:	bf00      	nop
 8006330:	2000000c 	.word	0x2000000c

08006334 <quorem>:
 8006334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	6903      	ldr	r3, [r0, #16]
 800633a:	690c      	ldr	r4, [r1, #16]
 800633c:	4607      	mov	r7, r0
 800633e:	42a3      	cmp	r3, r4
 8006340:	f2c0 8082 	blt.w	8006448 <quorem+0x114>
 8006344:	3c01      	subs	r4, #1
 8006346:	f100 0514 	add.w	r5, r0, #20
 800634a:	f101 0814 	add.w	r8, r1, #20
 800634e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800635c:	3301      	adds	r3, #1
 800635e:	429a      	cmp	r2, r3
 8006360:	fbb2 f6f3 	udiv	r6, r2, r3
 8006364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800636c:	d331      	bcc.n	80063d2 <quorem+0x9e>
 800636e:	f04f 0e00 	mov.w	lr, #0
 8006372:	4640      	mov	r0, r8
 8006374:	46ac      	mov	ip, r5
 8006376:	46f2      	mov	sl, lr
 8006378:	f850 2b04 	ldr.w	r2, [r0], #4
 800637c:	b293      	uxth	r3, r2
 800637e:	fb06 e303 	mla	r3, r6, r3, lr
 8006382:	0c12      	lsrs	r2, r2, #16
 8006384:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006388:	b29b      	uxth	r3, r3
 800638a:	fb06 e202 	mla	r2, r6, r2, lr
 800638e:	ebaa 0303 	sub.w	r3, sl, r3
 8006392:	f8dc a000 	ldr.w	sl, [ip]
 8006396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800639a:	fa1f fa8a 	uxth.w	sl, sl
 800639e:	4453      	add	r3, sl
 80063a0:	f8dc a000 	ldr.w	sl, [ip]
 80063a4:	b292      	uxth	r2, r2
 80063a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063b4:	4581      	cmp	r9, r0
 80063b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063ba:	f84c 3b04 	str.w	r3, [ip], #4
 80063be:	d2db      	bcs.n	8006378 <quorem+0x44>
 80063c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80063c4:	b92b      	cbnz	r3, 80063d2 <quorem+0x9e>
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	3b04      	subs	r3, #4
 80063ca:	429d      	cmp	r5, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	d32f      	bcc.n	8006430 <quorem+0xfc>
 80063d0:	613c      	str	r4, [r7, #16]
 80063d2:	4638      	mov	r0, r7
 80063d4:	f001 f9ce 	bl	8007774 <__mcmp>
 80063d8:	2800      	cmp	r0, #0
 80063da:	db25      	blt.n	8006428 <quorem+0xf4>
 80063dc:	4628      	mov	r0, r5
 80063de:	f04f 0c00 	mov.w	ip, #0
 80063e2:	3601      	adds	r6, #1
 80063e4:	f858 1b04 	ldr.w	r1, [r8], #4
 80063e8:	f8d0 e000 	ldr.w	lr, [r0]
 80063ec:	b28b      	uxth	r3, r1
 80063ee:	ebac 0303 	sub.w	r3, ip, r3
 80063f2:	fa1f f28e 	uxth.w	r2, lr
 80063f6:	4413      	add	r3, r2
 80063f8:	0c0a      	lsrs	r2, r1, #16
 80063fa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006408:	45c1      	cmp	r9, r8
 800640a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800640e:	f840 3b04 	str.w	r3, [r0], #4
 8006412:	d2e7      	bcs.n	80063e4 <quorem+0xb0>
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641c:	b922      	cbnz	r2, 8006428 <quorem+0xf4>
 800641e:	3b04      	subs	r3, #4
 8006420:	429d      	cmp	r5, r3
 8006422:	461a      	mov	r2, r3
 8006424:	d30a      	bcc.n	800643c <quorem+0x108>
 8006426:	613c      	str	r4, [r7, #16]
 8006428:	4630      	mov	r0, r6
 800642a:	b003      	add	sp, #12
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	3b04      	subs	r3, #4
 8006434:	2a00      	cmp	r2, #0
 8006436:	d1cb      	bne.n	80063d0 <quorem+0x9c>
 8006438:	3c01      	subs	r4, #1
 800643a:	e7c6      	b.n	80063ca <quorem+0x96>
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	3b04      	subs	r3, #4
 8006440:	2a00      	cmp	r2, #0
 8006442:	d1f0      	bne.n	8006426 <quorem+0xf2>
 8006444:	3c01      	subs	r4, #1
 8006446:	e7eb      	b.n	8006420 <quorem+0xec>
 8006448:	2000      	movs	r0, #0
 800644a:	e7ee      	b.n	800642a <quorem+0xf6>
 800644c:	0000      	movs	r0, r0
	...

08006450 <_dtoa_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	4616      	mov	r6, r2
 8006456:	461f      	mov	r7, r3
 8006458:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800645a:	b099      	sub	sp, #100	; 0x64
 800645c:	4605      	mov	r5, r0
 800645e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006462:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006466:	b974      	cbnz	r4, 8006486 <_dtoa_r+0x36>
 8006468:	2010      	movs	r0, #16
 800646a:	f7ff f969 	bl	8005740 <malloc>
 800646e:	4602      	mov	r2, r0
 8006470:	6268      	str	r0, [r5, #36]	; 0x24
 8006472:	b920      	cbnz	r0, 800647e <_dtoa_r+0x2e>
 8006474:	21ea      	movs	r1, #234	; 0xea
 8006476:	4ba8      	ldr	r3, [pc, #672]	; (8006718 <_dtoa_r+0x2c8>)
 8006478:	48a8      	ldr	r0, [pc, #672]	; (800671c <_dtoa_r+0x2cc>)
 800647a:	f001 fd01 	bl	8007e80 <__assert_func>
 800647e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006482:	6004      	str	r4, [r0, #0]
 8006484:	60c4      	str	r4, [r0, #12]
 8006486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006488:	6819      	ldr	r1, [r3, #0]
 800648a:	b151      	cbz	r1, 80064a2 <_dtoa_r+0x52>
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	2301      	movs	r3, #1
 8006490:	4093      	lsls	r3, r2
 8006492:	604a      	str	r2, [r1, #4]
 8006494:	608b      	str	r3, [r1, #8]
 8006496:	4628      	mov	r0, r5
 8006498:	f000 ff2e 	bl	80072f8 <_Bfree>
 800649c:	2200      	movs	r2, #0
 800649e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	1e3b      	subs	r3, r7, #0
 80064a4:	bfaf      	iteee	ge
 80064a6:	2300      	movge	r3, #0
 80064a8:	2201      	movlt	r2, #1
 80064aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064ae:	9305      	strlt	r3, [sp, #20]
 80064b0:	bfa8      	it	ge
 80064b2:	f8c8 3000 	strge.w	r3, [r8]
 80064b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064ba:	4b99      	ldr	r3, [pc, #612]	; (8006720 <_dtoa_r+0x2d0>)
 80064bc:	bfb8      	it	lt
 80064be:	f8c8 2000 	strlt.w	r2, [r8]
 80064c2:	ea33 0309 	bics.w	r3, r3, r9
 80064c6:	d119      	bne.n	80064fc <_dtoa_r+0xac>
 80064c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064d4:	4333      	orrs	r3, r6
 80064d6:	f000 857f 	beq.w	8006fd8 <_dtoa_r+0xb88>
 80064da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064dc:	b953      	cbnz	r3, 80064f4 <_dtoa_r+0xa4>
 80064de:	4b91      	ldr	r3, [pc, #580]	; (8006724 <_dtoa_r+0x2d4>)
 80064e0:	e022      	b.n	8006528 <_dtoa_r+0xd8>
 80064e2:	4b91      	ldr	r3, [pc, #580]	; (8006728 <_dtoa_r+0x2d8>)
 80064e4:	9303      	str	r3, [sp, #12]
 80064e6:	3308      	adds	r3, #8
 80064e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	9803      	ldr	r0, [sp, #12]
 80064ee:	b019      	add	sp, #100	; 0x64
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	4b8b      	ldr	r3, [pc, #556]	; (8006724 <_dtoa_r+0x2d4>)
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	3303      	adds	r3, #3
 80064fa:	e7f5      	b.n	80064e8 <_dtoa_r+0x98>
 80064fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006500:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	f7fa fb00 	bl	8000b10 <__aeabi_dcmpeq>
 8006510:	4680      	mov	r8, r0
 8006512:	b158      	cbz	r0, 800652c <_dtoa_r+0xdc>
 8006514:	2301      	movs	r3, #1
 8006516:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8558 	beq.w	8006fd2 <_dtoa_r+0xb82>
 8006522:	4882      	ldr	r0, [pc, #520]	; (800672c <_dtoa_r+0x2dc>)
 8006524:	6018      	str	r0, [r3, #0]
 8006526:	1e43      	subs	r3, r0, #1
 8006528:	9303      	str	r3, [sp, #12]
 800652a:	e7df      	b.n	80064ec <_dtoa_r+0x9c>
 800652c:	ab16      	add	r3, sp, #88	; 0x58
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	ab17      	add	r3, sp, #92	; 0x5c
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4628      	mov	r0, r5
 8006536:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800653a:	f001 f9c3 	bl	80078c4 <__d2b>
 800653e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006542:	4683      	mov	fp, r0
 8006544:	2c00      	cmp	r4, #0
 8006546:	d07f      	beq.n	8006648 <_dtoa_r+0x1f8>
 8006548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800654c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800654e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006556:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800655a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800655e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006562:	2200      	movs	r2, #0
 8006564:	4b72      	ldr	r3, [pc, #456]	; (8006730 <_dtoa_r+0x2e0>)
 8006566:	f7f9 feb3 	bl	80002d0 <__aeabi_dsub>
 800656a:	a365      	add	r3, pc, #404	; (adr r3, 8006700 <_dtoa_r+0x2b0>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7fa f866 	bl	8000640 <__aeabi_dmul>
 8006574:	a364      	add	r3, pc, #400	; (adr r3, 8006708 <_dtoa_r+0x2b8>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7f9 feab 	bl	80002d4 <__adddf3>
 800657e:	4606      	mov	r6, r0
 8006580:	4620      	mov	r0, r4
 8006582:	460f      	mov	r7, r1
 8006584:	f7f9 fff2 	bl	800056c <__aeabi_i2d>
 8006588:	a361      	add	r3, pc, #388	; (adr r3, 8006710 <_dtoa_r+0x2c0>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f7fa f857 	bl	8000640 <__aeabi_dmul>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4630      	mov	r0, r6
 8006598:	4639      	mov	r1, r7
 800659a:	f7f9 fe9b 	bl	80002d4 <__adddf3>
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	f7fa fafd 	bl	8000ba0 <__aeabi_d2iz>
 80065a6:	2200      	movs	r2, #0
 80065a8:	4682      	mov	sl, r0
 80065aa:	2300      	movs	r3, #0
 80065ac:	4630      	mov	r0, r6
 80065ae:	4639      	mov	r1, r7
 80065b0:	f7fa fab8 	bl	8000b24 <__aeabi_dcmplt>
 80065b4:	b148      	cbz	r0, 80065ca <_dtoa_r+0x17a>
 80065b6:	4650      	mov	r0, sl
 80065b8:	f7f9 ffd8 	bl	800056c <__aeabi_i2d>
 80065bc:	4632      	mov	r2, r6
 80065be:	463b      	mov	r3, r7
 80065c0:	f7fa faa6 	bl	8000b10 <__aeabi_dcmpeq>
 80065c4:	b908      	cbnz	r0, 80065ca <_dtoa_r+0x17a>
 80065c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ca:	f1ba 0f16 	cmp.w	sl, #22
 80065ce:	d858      	bhi.n	8006682 <_dtoa_r+0x232>
 80065d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065d4:	4b57      	ldr	r3, [pc, #348]	; (8006734 <_dtoa_r+0x2e4>)
 80065d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7fa faa1 	bl	8000b24 <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d04f      	beq.n	8006686 <_dtoa_r+0x236>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065f0:	1b1c      	subs	r4, r3, r4
 80065f2:	1e63      	subs	r3, r4, #1
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	bf49      	itett	mi
 80065f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80065fc:	2300      	movpl	r3, #0
 80065fe:	9306      	strmi	r3, [sp, #24]
 8006600:	2300      	movmi	r3, #0
 8006602:	bf54      	ite	pl
 8006604:	9306      	strpl	r3, [sp, #24]
 8006606:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006608:	f1ba 0f00 	cmp.w	sl, #0
 800660c:	db3d      	blt.n	800668a <_dtoa_r+0x23a>
 800660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006610:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006614:	4453      	add	r3, sl
 8006616:	9309      	str	r3, [sp, #36]	; 0x24
 8006618:	2300      	movs	r3, #0
 800661a:	930a      	str	r3, [sp, #40]	; 0x28
 800661c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800661e:	2b09      	cmp	r3, #9
 8006620:	f200 808c 	bhi.w	800673c <_dtoa_r+0x2ec>
 8006624:	2b05      	cmp	r3, #5
 8006626:	bfc4      	itt	gt
 8006628:	3b04      	subgt	r3, #4
 800662a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800662c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800662e:	bfc8      	it	gt
 8006630:	2400      	movgt	r4, #0
 8006632:	f1a3 0302 	sub.w	r3, r3, #2
 8006636:	bfd8      	it	le
 8006638:	2401      	movle	r4, #1
 800663a:	2b03      	cmp	r3, #3
 800663c:	f200 808a 	bhi.w	8006754 <_dtoa_r+0x304>
 8006640:	e8df f003 	tbb	[pc, r3]
 8006644:	5b4d4f2d 	.word	0x5b4d4f2d
 8006648:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800664c:	441c      	add	r4, r3
 800664e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006652:	2b20      	cmp	r3, #32
 8006654:	bfc3      	ittte	gt
 8006656:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800665a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800665e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006662:	f1c3 0320 	rsble	r3, r3, #32
 8006666:	bfc6      	itte	gt
 8006668:	fa26 f000 	lsrgt.w	r0, r6, r0
 800666c:	4318      	orrgt	r0, r3
 800666e:	fa06 f003 	lslle.w	r0, r6, r3
 8006672:	f7f9 ff6b 	bl	800054c <__aeabi_ui2d>
 8006676:	2301      	movs	r3, #1
 8006678:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800667c:	3c01      	subs	r4, #1
 800667e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006680:	e76f      	b.n	8006562 <_dtoa_r+0x112>
 8006682:	2301      	movs	r3, #1
 8006684:	e7b2      	b.n	80065ec <_dtoa_r+0x19c>
 8006686:	900f      	str	r0, [sp, #60]	; 0x3c
 8006688:	e7b1      	b.n	80065ee <_dtoa_r+0x19e>
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	eba3 030a 	sub.w	r3, r3, sl
 8006690:	9306      	str	r3, [sp, #24]
 8006692:	f1ca 0300 	rsb	r3, sl, #0
 8006696:	930a      	str	r3, [sp, #40]	; 0x28
 8006698:	2300      	movs	r3, #0
 800669a:	930e      	str	r3, [sp, #56]	; 0x38
 800669c:	e7be      	b.n	800661c <_dtoa_r+0x1cc>
 800669e:	2300      	movs	r3, #0
 80066a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dc58      	bgt.n	800675a <_dtoa_r+0x30a>
 80066a8:	f04f 0901 	mov.w	r9, #1
 80066ac:	464b      	mov	r3, r9
 80066ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80066b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80066b6:	2200      	movs	r2, #0
 80066b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80066ba:	6042      	str	r2, [r0, #4]
 80066bc:	2204      	movs	r2, #4
 80066be:	f102 0614 	add.w	r6, r2, #20
 80066c2:	429e      	cmp	r6, r3
 80066c4:	6841      	ldr	r1, [r0, #4]
 80066c6:	d94e      	bls.n	8006766 <_dtoa_r+0x316>
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 fdd5 	bl	8007278 <_Balloc>
 80066ce:	9003      	str	r0, [sp, #12]
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d14c      	bne.n	800676e <_dtoa_r+0x31e>
 80066d4:	4602      	mov	r2, r0
 80066d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066da:	4b17      	ldr	r3, [pc, #92]	; (8006738 <_dtoa_r+0x2e8>)
 80066dc:	e6cc      	b.n	8006478 <_dtoa_r+0x28>
 80066de:	2301      	movs	r3, #1
 80066e0:	e7de      	b.n	80066a0 <_dtoa_r+0x250>
 80066e2:	2300      	movs	r3, #0
 80066e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066e8:	eb0a 0903 	add.w	r9, sl, r3
 80066ec:	f109 0301 	add.w	r3, r9, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	9308      	str	r3, [sp, #32]
 80066f4:	bfb8      	it	lt
 80066f6:	2301      	movlt	r3, #1
 80066f8:	e7dd      	b.n	80066b6 <_dtoa_r+0x266>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e7f2      	b.n	80066e4 <_dtoa_r+0x294>
 80066fe:	bf00      	nop
 8006700:	636f4361 	.word	0x636f4361
 8006704:	3fd287a7 	.word	0x3fd287a7
 8006708:	8b60c8b3 	.word	0x8b60c8b3
 800670c:	3fc68a28 	.word	0x3fc68a28
 8006710:	509f79fb 	.word	0x509f79fb
 8006714:	3fd34413 	.word	0x3fd34413
 8006718:	0800843a 	.word	0x0800843a
 800671c:	08008451 	.word	0x08008451
 8006720:	7ff00000 	.word	0x7ff00000
 8006724:	08008436 	.word	0x08008436
 8006728:	0800842d 	.word	0x0800842d
 800672c:	08008309 	.word	0x08008309
 8006730:	3ff80000 	.word	0x3ff80000
 8006734:	080085a8 	.word	0x080085a8
 8006738:	080084ac 	.word	0x080084ac
 800673c:	2401      	movs	r4, #1
 800673e:	2300      	movs	r3, #0
 8006740:	940b      	str	r4, [sp, #44]	; 0x2c
 8006742:	9322      	str	r3, [sp, #136]	; 0x88
 8006744:	f04f 39ff 	mov.w	r9, #4294967295
 8006748:	2200      	movs	r2, #0
 800674a:	2312      	movs	r3, #18
 800674c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006750:	9223      	str	r2, [sp, #140]	; 0x8c
 8006752:	e7b0      	b.n	80066b6 <_dtoa_r+0x266>
 8006754:	2301      	movs	r3, #1
 8006756:	930b      	str	r3, [sp, #44]	; 0x2c
 8006758:	e7f4      	b.n	8006744 <_dtoa_r+0x2f4>
 800675a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800675e:	464b      	mov	r3, r9
 8006760:	f8cd 9020 	str.w	r9, [sp, #32]
 8006764:	e7a7      	b.n	80066b6 <_dtoa_r+0x266>
 8006766:	3101      	adds	r1, #1
 8006768:	6041      	str	r1, [r0, #4]
 800676a:	0052      	lsls	r2, r2, #1
 800676c:	e7a7      	b.n	80066be <_dtoa_r+0x26e>
 800676e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006770:	9a03      	ldr	r2, [sp, #12]
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	2b0e      	cmp	r3, #14
 8006778:	f200 80a8 	bhi.w	80068cc <_dtoa_r+0x47c>
 800677c:	2c00      	cmp	r4, #0
 800677e:	f000 80a5 	beq.w	80068cc <_dtoa_r+0x47c>
 8006782:	f1ba 0f00 	cmp.w	sl, #0
 8006786:	dd34      	ble.n	80067f2 <_dtoa_r+0x3a2>
 8006788:	4a9a      	ldr	r2, [pc, #616]	; (80069f4 <_dtoa_r+0x5a4>)
 800678a:	f00a 030f 	and.w	r3, sl, #15
 800678e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006792:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006796:	e9d3 3400 	ldrd	r3, r4, [r3]
 800679a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800679e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80067a2:	d016      	beq.n	80067d2 <_dtoa_r+0x382>
 80067a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067a8:	4b93      	ldr	r3, [pc, #588]	; (80069f8 <_dtoa_r+0x5a8>)
 80067aa:	2703      	movs	r7, #3
 80067ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067b0:	f7fa f870 	bl	8000894 <__aeabi_ddiv>
 80067b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b8:	f004 040f 	and.w	r4, r4, #15
 80067bc:	4e8e      	ldr	r6, [pc, #568]	; (80069f8 <_dtoa_r+0x5a8>)
 80067be:	b954      	cbnz	r4, 80067d6 <_dtoa_r+0x386>
 80067c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067c8:	f7fa f864 	bl	8000894 <__aeabi_ddiv>
 80067cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067d0:	e029      	b.n	8006826 <_dtoa_r+0x3d6>
 80067d2:	2702      	movs	r7, #2
 80067d4:	e7f2      	b.n	80067bc <_dtoa_r+0x36c>
 80067d6:	07e1      	lsls	r1, r4, #31
 80067d8:	d508      	bpl.n	80067ec <_dtoa_r+0x39c>
 80067da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067e2:	f7f9 ff2d 	bl	8000640 <__aeabi_dmul>
 80067e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ea:	3701      	adds	r7, #1
 80067ec:	1064      	asrs	r4, r4, #1
 80067ee:	3608      	adds	r6, #8
 80067f0:	e7e5      	b.n	80067be <_dtoa_r+0x36e>
 80067f2:	f000 80a5 	beq.w	8006940 <_dtoa_r+0x4f0>
 80067f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067fa:	f1ca 0400 	rsb	r4, sl, #0
 80067fe:	4b7d      	ldr	r3, [pc, #500]	; (80069f4 <_dtoa_r+0x5a4>)
 8006800:	f004 020f 	and.w	r2, r4, #15
 8006804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7f9 ff18 	bl	8000640 <__aeabi_dmul>
 8006810:	2702      	movs	r7, #2
 8006812:	2300      	movs	r3, #0
 8006814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006818:	4e77      	ldr	r6, [pc, #476]	; (80069f8 <_dtoa_r+0x5a8>)
 800681a:	1124      	asrs	r4, r4, #4
 800681c:	2c00      	cmp	r4, #0
 800681e:	f040 8084 	bne.w	800692a <_dtoa_r+0x4da>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1d2      	bne.n	80067cc <_dtoa_r+0x37c>
 8006826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 808b 	beq.w	8006944 <_dtoa_r+0x4f4>
 800682e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006832:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006836:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800683a:	2200      	movs	r2, #0
 800683c:	4b6f      	ldr	r3, [pc, #444]	; (80069fc <_dtoa_r+0x5ac>)
 800683e:	f7fa f971 	bl	8000b24 <__aeabi_dcmplt>
 8006842:	2800      	cmp	r0, #0
 8006844:	d07e      	beq.n	8006944 <_dtoa_r+0x4f4>
 8006846:	9b08      	ldr	r3, [sp, #32]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d07b      	beq.n	8006944 <_dtoa_r+0x4f4>
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	dd38      	ble.n	80068c4 <_dtoa_r+0x474>
 8006852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006856:	2200      	movs	r2, #0
 8006858:	4b69      	ldr	r3, [pc, #420]	; (8006a00 <_dtoa_r+0x5b0>)
 800685a:	f7f9 fef1 	bl	8000640 <__aeabi_dmul>
 800685e:	464c      	mov	r4, r9
 8006860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006864:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006868:	3701      	adds	r7, #1
 800686a:	4638      	mov	r0, r7
 800686c:	f7f9 fe7e 	bl	800056c <__aeabi_i2d>
 8006870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006874:	f7f9 fee4 	bl	8000640 <__aeabi_dmul>
 8006878:	2200      	movs	r2, #0
 800687a:	4b62      	ldr	r3, [pc, #392]	; (8006a04 <_dtoa_r+0x5b4>)
 800687c:	f7f9 fd2a 	bl	80002d4 <__adddf3>
 8006880:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006884:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006888:	9611      	str	r6, [sp, #68]	; 0x44
 800688a:	2c00      	cmp	r4, #0
 800688c:	d15d      	bne.n	800694a <_dtoa_r+0x4fa>
 800688e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006892:	2200      	movs	r2, #0
 8006894:	4b5c      	ldr	r3, [pc, #368]	; (8006a08 <_dtoa_r+0x5b8>)
 8006896:	f7f9 fd1b 	bl	80002d0 <__aeabi_dsub>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068a2:	4633      	mov	r3, r6
 80068a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068a6:	f7fa f95b 	bl	8000b60 <__aeabi_dcmpgt>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f040 829c 	bne.w	8006de8 <_dtoa_r+0x998>
 80068b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068ba:	f7fa f933 	bl	8000b24 <__aeabi_dcmplt>
 80068be:	2800      	cmp	r0, #0
 80068c0:	f040 8290 	bne.w	8006de4 <_dtoa_r+0x994>
 80068c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f2c0 8152 	blt.w	8006b78 <_dtoa_r+0x728>
 80068d4:	f1ba 0f0e 	cmp.w	sl, #14
 80068d8:	f300 814e 	bgt.w	8006b78 <_dtoa_r+0x728>
 80068dc:	4b45      	ldr	r3, [pc, #276]	; (80069f4 <_dtoa_r+0x5a4>)
 80068de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80068ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f280 80db 	bge.w	8006aa8 <_dtoa_r+0x658>
 80068f2:	9b08      	ldr	r3, [sp, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f300 80d7 	bgt.w	8006aa8 <_dtoa_r+0x658>
 80068fa:	f040 8272 	bne.w	8006de2 <_dtoa_r+0x992>
 80068fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006902:	2200      	movs	r2, #0
 8006904:	4b40      	ldr	r3, [pc, #256]	; (8006a08 <_dtoa_r+0x5b8>)
 8006906:	f7f9 fe9b 	bl	8000640 <__aeabi_dmul>
 800690a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690e:	f7fa f91d 	bl	8000b4c <__aeabi_dcmpge>
 8006912:	9c08      	ldr	r4, [sp, #32]
 8006914:	4626      	mov	r6, r4
 8006916:	2800      	cmp	r0, #0
 8006918:	f040 8248 	bne.w	8006dac <_dtoa_r+0x95c>
 800691c:	2331      	movs	r3, #49	; 0x31
 800691e:	9f03      	ldr	r7, [sp, #12]
 8006920:	f10a 0a01 	add.w	sl, sl, #1
 8006924:	f807 3b01 	strb.w	r3, [r7], #1
 8006928:	e244      	b.n	8006db4 <_dtoa_r+0x964>
 800692a:	07e2      	lsls	r2, r4, #31
 800692c:	d505      	bpl.n	800693a <_dtoa_r+0x4ea>
 800692e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006932:	f7f9 fe85 	bl	8000640 <__aeabi_dmul>
 8006936:	2301      	movs	r3, #1
 8006938:	3701      	adds	r7, #1
 800693a:	1064      	asrs	r4, r4, #1
 800693c:	3608      	adds	r6, #8
 800693e:	e76d      	b.n	800681c <_dtoa_r+0x3cc>
 8006940:	2702      	movs	r7, #2
 8006942:	e770      	b.n	8006826 <_dtoa_r+0x3d6>
 8006944:	46d0      	mov	r8, sl
 8006946:	9c08      	ldr	r4, [sp, #32]
 8006948:	e78f      	b.n	800686a <_dtoa_r+0x41a>
 800694a:	9903      	ldr	r1, [sp, #12]
 800694c:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <_dtoa_r+0x5a4>)
 800694e:	4421      	add	r1, r4
 8006950:	9112      	str	r1, [sp, #72]	; 0x48
 8006952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006954:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006958:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800695c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006960:	2900      	cmp	r1, #0
 8006962:	d055      	beq.n	8006a10 <_dtoa_r+0x5c0>
 8006964:	2000      	movs	r0, #0
 8006966:	4929      	ldr	r1, [pc, #164]	; (8006a0c <_dtoa_r+0x5bc>)
 8006968:	f7f9 ff94 	bl	8000894 <__aeabi_ddiv>
 800696c:	463b      	mov	r3, r7
 800696e:	4632      	mov	r2, r6
 8006970:	f7f9 fcae 	bl	80002d0 <__aeabi_dsub>
 8006974:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006978:	9f03      	ldr	r7, [sp, #12]
 800697a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800697e:	f7fa f90f 	bl	8000ba0 <__aeabi_d2iz>
 8006982:	4604      	mov	r4, r0
 8006984:	f7f9 fdf2 	bl	800056c <__aeabi_i2d>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006990:	f7f9 fc9e 	bl	80002d0 <__aeabi_dsub>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	3430      	adds	r4, #48	; 0x30
 800699a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800699e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069a2:	f807 4b01 	strb.w	r4, [r7], #1
 80069a6:	f7fa f8bd 	bl	8000b24 <__aeabi_dcmplt>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d174      	bne.n	8006a98 <_dtoa_r+0x648>
 80069ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b2:	2000      	movs	r0, #0
 80069b4:	4911      	ldr	r1, [pc, #68]	; (80069fc <_dtoa_r+0x5ac>)
 80069b6:	f7f9 fc8b 	bl	80002d0 <__aeabi_dsub>
 80069ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069be:	f7fa f8b1 	bl	8000b24 <__aeabi_dcmplt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	f040 80b7 	bne.w	8006b36 <_dtoa_r+0x6e6>
 80069c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069ca:	429f      	cmp	r7, r3
 80069cc:	f43f af7a 	beq.w	80068c4 <_dtoa_r+0x474>
 80069d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069d4:	2200      	movs	r2, #0
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <_dtoa_r+0x5b0>)
 80069d8:	f7f9 fe32 	bl	8000640 <__aeabi_dmul>
 80069dc:	2200      	movs	r2, #0
 80069de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e6:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <_dtoa_r+0x5b0>)
 80069e8:	f7f9 fe2a 	bl	8000640 <__aeabi_dmul>
 80069ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069f0:	e7c3      	b.n	800697a <_dtoa_r+0x52a>
 80069f2:	bf00      	nop
 80069f4:	080085a8 	.word	0x080085a8
 80069f8:	08008580 	.word	0x08008580
 80069fc:	3ff00000 	.word	0x3ff00000
 8006a00:	40240000 	.word	0x40240000
 8006a04:	401c0000 	.word	0x401c0000
 8006a08:	40140000 	.word	0x40140000
 8006a0c:	3fe00000 	.word	0x3fe00000
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7f9 fe14 	bl	8000640 <__aeabi_dmul>
 8006a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a1e:	9c03      	ldr	r4, [sp, #12]
 8006a20:	9314      	str	r3, [sp, #80]	; 0x50
 8006a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a26:	f7fa f8bb 	bl	8000ba0 <__aeabi_d2iz>
 8006a2a:	9015      	str	r0, [sp, #84]	; 0x54
 8006a2c:	f7f9 fd9e 	bl	800056c <__aeabi_i2d>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a38:	f7f9 fc4a 	bl	80002d0 <__aeabi_dsub>
 8006a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a3e:	4606      	mov	r6, r0
 8006a40:	3330      	adds	r3, #48	; 0x30
 8006a42:	f804 3b01 	strb.w	r3, [r4], #1
 8006a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a48:	460f      	mov	r7, r1
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	d124      	bne.n	8006a9c <_dtoa_r+0x64c>
 8006a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a56:	4bb0      	ldr	r3, [pc, #704]	; (8006d18 <_dtoa_r+0x8c8>)
 8006a58:	f7f9 fc3c 	bl	80002d4 <__adddf3>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	f7fa f87c 	bl	8000b60 <__aeabi_dcmpgt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d163      	bne.n	8006b34 <_dtoa_r+0x6e4>
 8006a6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a70:	2000      	movs	r0, #0
 8006a72:	49a9      	ldr	r1, [pc, #676]	; (8006d18 <_dtoa_r+0x8c8>)
 8006a74:	f7f9 fc2c 	bl	80002d0 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7fa f850 	bl	8000b24 <__aeabi_dcmplt>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f43f af1d 	beq.w	80068c4 <_dtoa_r+0x474>
 8006a8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a8c:	1e7b      	subs	r3, r7, #1
 8006a8e:	9314      	str	r3, [sp, #80]	; 0x50
 8006a90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d0f8      	beq.n	8006a8a <_dtoa_r+0x63a>
 8006a98:	46c2      	mov	sl, r8
 8006a9a:	e03b      	b.n	8006b14 <_dtoa_r+0x6c4>
 8006a9c:	4b9f      	ldr	r3, [pc, #636]	; (8006d1c <_dtoa_r+0x8cc>)
 8006a9e:	f7f9 fdcf 	bl	8000640 <__aeabi_dmul>
 8006aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa6:	e7bc      	b.n	8006a22 <_dtoa_r+0x5d2>
 8006aa8:	9f03      	ldr	r7, [sp, #12]
 8006aaa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006aae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	f7f9 feed 	bl	8000894 <__aeabi_ddiv>
 8006aba:	f7fa f871 	bl	8000ba0 <__aeabi_d2iz>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	f7f9 fd54 	bl	800056c <__aeabi_i2d>
 8006ac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ac8:	f7f9 fdba 	bl	8000640 <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7f9 fbfc 	bl	80002d0 <__aeabi_dsub>
 8006ad8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006adc:	f807 6b01 	strb.w	r6, [r7], #1
 8006ae0:	9e03      	ldr	r6, [sp, #12]
 8006ae2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006ae6:	1bbe      	subs	r6, r7, r6
 8006ae8:	45b4      	cmp	ip, r6
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	d136      	bne.n	8006b5e <_dtoa_r+0x70e>
 8006af0:	f7f9 fbf0 	bl	80002d4 <__adddf3>
 8006af4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006af8:	4680      	mov	r8, r0
 8006afa:	4689      	mov	r9, r1
 8006afc:	f7fa f830 	bl	8000b60 <__aeabi_dcmpgt>
 8006b00:	bb58      	cbnz	r0, 8006b5a <_dtoa_r+0x70a>
 8006b02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7fa f801 	bl	8000b10 <__aeabi_dcmpeq>
 8006b0e:	b108      	cbz	r0, 8006b14 <_dtoa_r+0x6c4>
 8006b10:	07e1      	lsls	r1, r4, #31
 8006b12:	d422      	bmi.n	8006b5a <_dtoa_r+0x70a>
 8006b14:	4628      	mov	r0, r5
 8006b16:	4659      	mov	r1, fp
 8006b18:	f000 fbee 	bl	80072f8 <_Bfree>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	703b      	strb	r3, [r7, #0]
 8006b20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b22:	f10a 0001 	add.w	r0, sl, #1
 8006b26:	6018      	str	r0, [r3, #0]
 8006b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f43f acde 	beq.w	80064ec <_dtoa_r+0x9c>
 8006b30:	601f      	str	r7, [r3, #0]
 8006b32:	e4db      	b.n	80064ec <_dtoa_r+0x9c>
 8006b34:	4627      	mov	r7, r4
 8006b36:	463b      	mov	r3, r7
 8006b38:	461f      	mov	r7, r3
 8006b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3e:	2a39      	cmp	r2, #57	; 0x39
 8006b40:	d107      	bne.n	8006b52 <_dtoa_r+0x702>
 8006b42:	9a03      	ldr	r2, [sp, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1f7      	bne.n	8006b38 <_dtoa_r+0x6e8>
 8006b48:	2230      	movs	r2, #48	; 0x30
 8006b4a:	9903      	ldr	r1, [sp, #12]
 8006b4c:	f108 0801 	add.w	r8, r8, #1
 8006b50:	700a      	strb	r2, [r1, #0]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	3201      	adds	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e79e      	b.n	8006a98 <_dtoa_r+0x648>
 8006b5a:	46d0      	mov	r8, sl
 8006b5c:	e7eb      	b.n	8006b36 <_dtoa_r+0x6e6>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4b6e      	ldr	r3, [pc, #440]	; (8006d1c <_dtoa_r+0x8cc>)
 8006b62:	f7f9 fd6d 	bl	8000640 <__aeabi_dmul>
 8006b66:	2200      	movs	r2, #0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	f7f9 ffcf 	bl	8000b10 <__aeabi_dcmpeq>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d09b      	beq.n	8006aae <_dtoa_r+0x65e>
 8006b76:	e7cd      	b.n	8006b14 <_dtoa_r+0x6c4>
 8006b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	f000 80d0 	beq.w	8006d20 <_dtoa_r+0x8d0>
 8006b80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b82:	2a01      	cmp	r2, #1
 8006b84:	f300 80ae 	bgt.w	8006ce4 <_dtoa_r+0x894>
 8006b88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	f000 80a6 	beq.w	8006cdc <_dtoa_r+0x88c>
 8006b90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b96:	9f06      	ldr	r7, [sp, #24]
 8006b98:	9a06      	ldr	r2, [sp, #24]
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	441a      	add	r2, r3
 8006b9e:	9206      	str	r2, [sp, #24]
 8006ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	441a      	add	r2, r3
 8006ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba8:	f000 fc5c 	bl	8007464 <__i2b>
 8006bac:	4606      	mov	r6, r0
 8006bae:	2f00      	cmp	r7, #0
 8006bb0:	dd0c      	ble.n	8006bcc <_dtoa_r+0x77c>
 8006bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd09      	ble.n	8006bcc <_dtoa_r+0x77c>
 8006bb8:	42bb      	cmp	r3, r7
 8006bba:	bfa8      	it	ge
 8006bbc:	463b      	movge	r3, r7
 8006bbe:	9a06      	ldr	r2, [sp, #24]
 8006bc0:	1aff      	subs	r7, r7, r3
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	9206      	str	r2, [sp, #24]
 8006bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	9309      	str	r3, [sp, #36]	; 0x24
 8006bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bce:	b1f3      	cbz	r3, 8006c0e <_dtoa_r+0x7be>
 8006bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80a8 	beq.w	8006d28 <_dtoa_r+0x8d8>
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	dd10      	ble.n	8006bfe <_dtoa_r+0x7ae>
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4622      	mov	r2, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 fcfd 	bl	80075e0 <__pow5mult>
 8006be6:	465a      	mov	r2, fp
 8006be8:	4601      	mov	r1, r0
 8006bea:	4606      	mov	r6, r0
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 fc4f 	bl	8007490 <__multiply>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fb7e 	bl	80072f8 <_Bfree>
 8006bfc:	46c3      	mov	fp, r8
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c00:	1b1a      	subs	r2, r3, r4
 8006c02:	d004      	beq.n	8006c0e <_dtoa_r+0x7be>
 8006c04:	4659      	mov	r1, fp
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 fcea 	bl	80075e0 <__pow5mult>
 8006c0c:	4683      	mov	fp, r0
 8006c0e:	2101      	movs	r1, #1
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 fc27 	bl	8007464 <__i2b>
 8006c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c18:	4604      	mov	r4, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f340 8086 	ble.w	8006d2c <_dtoa_r+0x8dc>
 8006c20:	461a      	mov	r2, r3
 8006c22:	4601      	mov	r1, r0
 8006c24:	4628      	mov	r0, r5
 8006c26:	f000 fcdb 	bl	80075e0 <__pow5mult>
 8006c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	dd7f      	ble.n	8006d32 <_dtoa_r+0x8e2>
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c3c:	6918      	ldr	r0, [r3, #16]
 8006c3e:	f000 fbc3 	bl	80073c8 <__hi0bits>
 8006c42:	f1c0 0020 	rsb	r0, r0, #32
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	4418      	add	r0, r3
 8006c4a:	f010 001f 	ands.w	r0, r0, #31
 8006c4e:	f000 8092 	beq.w	8006d76 <_dtoa_r+0x926>
 8006c52:	f1c0 0320 	rsb	r3, r0, #32
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	f340 808a 	ble.w	8006d70 <_dtoa_r+0x920>
 8006c5c:	f1c0 001c 	rsb	r0, r0, #28
 8006c60:	9b06      	ldr	r3, [sp, #24]
 8006c62:	4407      	add	r7, r0
 8006c64:	4403      	add	r3, r0
 8006c66:	9306      	str	r3, [sp, #24]
 8006c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6a:	4403      	add	r3, r0
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dd05      	ble.n	8006c80 <_dtoa_r+0x830>
 8006c74:	4659      	mov	r1, fp
 8006c76:	461a      	mov	r2, r3
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fd0b 	bl	8007694 <__lshift>
 8006c7e:	4683      	mov	fp, r0
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dd05      	ble.n	8006c92 <_dtoa_r+0x842>
 8006c86:	4621      	mov	r1, r4
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fd02 	bl	8007694 <__lshift>
 8006c90:	4604      	mov	r4, r0
 8006c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d070      	beq.n	8006d7a <_dtoa_r+0x92a>
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f000 fd6a 	bl	8007774 <__mcmp>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	da6a      	bge.n	8006d7a <_dtoa_r+0x92a>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	220a      	movs	r2, #10
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 fb46 	bl	800733c <__multadd>
 8006cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb2:	4683      	mov	fp, r0
 8006cb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8194 	beq.w	8006fe6 <_dtoa_r+0xb96>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 fb39 	bl	800733c <__multadd>
 8006cca:	f1b9 0f00 	cmp.w	r9, #0
 8006cce:	4606      	mov	r6, r0
 8006cd0:	f300 8093 	bgt.w	8006dfa <_dtoa_r+0x9aa>
 8006cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	dc57      	bgt.n	8006d8a <_dtoa_r+0x93a>
 8006cda:	e08e      	b.n	8006dfa <_dtoa_r+0x9aa>
 8006cdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ce2:	e757      	b.n	8006b94 <_dtoa_r+0x744>
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	1e5c      	subs	r4, r3, #1
 8006ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	bfb7      	itett	lt
 8006cee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cf0:	1b1c      	subge	r4, r3, r4
 8006cf2:	1ae2      	sublt	r2, r4, r3
 8006cf4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006cf6:	bfbe      	ittt	lt
 8006cf8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006cfa:	189b      	addlt	r3, r3, r2
 8006cfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006cfe:	9b08      	ldr	r3, [sp, #32]
 8006d00:	bfb8      	it	lt
 8006d02:	2400      	movlt	r4, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bfbb      	ittet	lt
 8006d08:	9b06      	ldrlt	r3, [sp, #24]
 8006d0a:	9a08      	ldrlt	r2, [sp, #32]
 8006d0c:	9f06      	ldrge	r7, [sp, #24]
 8006d0e:	1a9f      	sublt	r7, r3, r2
 8006d10:	bfac      	ite	ge
 8006d12:	9b08      	ldrge	r3, [sp, #32]
 8006d14:	2300      	movlt	r3, #0
 8006d16:	e73f      	b.n	8006b98 <_dtoa_r+0x748>
 8006d18:	3fe00000 	.word	0x3fe00000
 8006d1c:	40240000 	.word	0x40240000
 8006d20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d22:	9f06      	ldr	r7, [sp, #24]
 8006d24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d26:	e742      	b.n	8006bae <_dtoa_r+0x75e>
 8006d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d2a:	e76b      	b.n	8006c04 <_dtoa_r+0x7b4>
 8006d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	dc19      	bgt.n	8006d66 <_dtoa_r+0x916>
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	b9bb      	cbnz	r3, 8006d66 <_dtoa_r+0x916>
 8006d36:	9b05      	ldr	r3, [sp, #20]
 8006d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d3c:	b99b      	cbnz	r3, 8006d66 <_dtoa_r+0x916>
 8006d3e:	9b05      	ldr	r3, [sp, #20]
 8006d40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d44:	0d1b      	lsrs	r3, r3, #20
 8006d46:	051b      	lsls	r3, r3, #20
 8006d48:	b183      	cbz	r3, 8006d6c <_dtoa_r+0x91c>
 8006d4a:	f04f 0801 	mov.w	r8, #1
 8006d4e:	9b06      	ldr	r3, [sp, #24]
 8006d50:	3301      	adds	r3, #1
 8006d52:	9306      	str	r3, [sp, #24]
 8006d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d56:	3301      	adds	r3, #1
 8006d58:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f47f af6a 	bne.w	8006c36 <_dtoa_r+0x7e6>
 8006d62:	2001      	movs	r0, #1
 8006d64:	e76f      	b.n	8006c46 <_dtoa_r+0x7f6>
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	e7f6      	b.n	8006d5a <_dtoa_r+0x90a>
 8006d6c:	4698      	mov	r8, r3
 8006d6e:	e7f4      	b.n	8006d5a <_dtoa_r+0x90a>
 8006d70:	f43f af7d 	beq.w	8006c6e <_dtoa_r+0x81e>
 8006d74:	4618      	mov	r0, r3
 8006d76:	301c      	adds	r0, #28
 8006d78:	e772      	b.n	8006c60 <_dtoa_r+0x810>
 8006d7a:	9b08      	ldr	r3, [sp, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dc36      	bgt.n	8006dee <_dtoa_r+0x99e>
 8006d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	dd33      	ble.n	8006dee <_dtoa_r+0x99e>
 8006d86:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d8a:	f1b9 0f00 	cmp.w	r9, #0
 8006d8e:	d10d      	bne.n	8006dac <_dtoa_r+0x95c>
 8006d90:	4621      	mov	r1, r4
 8006d92:	464b      	mov	r3, r9
 8006d94:	2205      	movs	r2, #5
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 fad0 	bl	800733c <__multadd>
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4658      	mov	r0, fp
 8006da2:	f000 fce7 	bl	8007774 <__mcmp>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f73f adb8 	bgt.w	800691c <_dtoa_r+0x4cc>
 8006dac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dae:	9f03      	ldr	r7, [sp, #12]
 8006db0:	ea6f 0a03 	mvn.w	sl, r3
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	4621      	mov	r1, r4
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 fa9c 	bl	80072f8 <_Bfree>
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	f43f aea7 	beq.w	8006b14 <_dtoa_r+0x6c4>
 8006dc6:	f1b8 0f00 	cmp.w	r8, #0
 8006dca:	d005      	beq.n	8006dd8 <_dtoa_r+0x988>
 8006dcc:	45b0      	cmp	r8, r6
 8006dce:	d003      	beq.n	8006dd8 <_dtoa_r+0x988>
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fa90 	bl	80072f8 <_Bfree>
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f000 fa8c 	bl	80072f8 <_Bfree>
 8006de0:	e698      	b.n	8006b14 <_dtoa_r+0x6c4>
 8006de2:	2400      	movs	r4, #0
 8006de4:	4626      	mov	r6, r4
 8006de6:	e7e1      	b.n	8006dac <_dtoa_r+0x95c>
 8006de8:	46c2      	mov	sl, r8
 8006dea:	4626      	mov	r6, r4
 8006dec:	e596      	b.n	800691c <_dtoa_r+0x4cc>
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80fd 	beq.w	8006ff4 <_dtoa_r+0xba4>
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	dd05      	ble.n	8006e0a <_dtoa_r+0x9ba>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	463a      	mov	r2, r7
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 fc46 	bl	8007694 <__lshift>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	f1b8 0f00 	cmp.w	r8, #0
 8006e0e:	d05c      	beq.n	8006eca <_dtoa_r+0xa7a>
 8006e10:	4628      	mov	r0, r5
 8006e12:	6871      	ldr	r1, [r6, #4]
 8006e14:	f000 fa30 	bl	8007278 <_Balloc>
 8006e18:	4607      	mov	r7, r0
 8006e1a:	b928      	cbnz	r0, 8006e28 <_dtoa_r+0x9d8>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e22:	4b7f      	ldr	r3, [pc, #508]	; (8007020 <_dtoa_r+0xbd0>)
 8006e24:	f7ff bb28 	b.w	8006478 <_dtoa_r+0x28>
 8006e28:	6932      	ldr	r2, [r6, #16]
 8006e2a:	f106 010c 	add.w	r1, r6, #12
 8006e2e:	3202      	adds	r2, #2
 8006e30:	0092      	lsls	r2, r2, #2
 8006e32:	300c      	adds	r0, #12
 8006e34:	f000 fa05 	bl	8007242 <memcpy>
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 fc29 	bl	8007694 <__lshift>
 8006e42:	46b0      	mov	r8, r6
 8006e44:	4606      	mov	r6, r0
 8006e46:	9b03      	ldr	r3, [sp, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	9308      	str	r3, [sp, #32]
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	444b      	add	r3, r9
 8006e50:	930a      	str	r3, [sp, #40]	; 0x28
 8006e52:	9b04      	ldr	r3, [sp, #16]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	4658      	mov	r0, fp
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	f7ff fa66 	bl	8006334 <quorem>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	3330      	adds	r3, #48	; 0x30
 8006e6e:	9006      	str	r0, [sp, #24]
 8006e70:	4658      	mov	r0, fp
 8006e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e74:	f000 fc7e 	bl	8007774 <__mcmp>
 8006e78:	4632      	mov	r2, r6
 8006e7a:	4681      	mov	r9, r0
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 fc94 	bl	80077ac <__mdiff>
 8006e84:	68c2      	ldr	r2, [r0, #12]
 8006e86:	4607      	mov	r7, r0
 8006e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8a:	bb02      	cbnz	r2, 8006ece <_dtoa_r+0xa7e>
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	4658      	mov	r0, fp
 8006e90:	f000 fc70 	bl	8007774 <__mcmp>
 8006e94:	4602      	mov	r2, r0
 8006e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ea0:	f000 fa2a 	bl	80072f8 <_Bfree>
 8006ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea8:	9f08      	ldr	r7, [sp, #32]
 8006eaa:	ea43 0102 	orr.w	r1, r3, r2
 8006eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb4:	d10d      	bne.n	8006ed2 <_dtoa_r+0xa82>
 8006eb6:	2b39      	cmp	r3, #57	; 0x39
 8006eb8:	d029      	beq.n	8006f0e <_dtoa_r+0xabe>
 8006eba:	f1b9 0f00 	cmp.w	r9, #0
 8006ebe:	dd01      	ble.n	8006ec4 <_dtoa_r+0xa74>
 8006ec0:	9b06      	ldr	r3, [sp, #24]
 8006ec2:	3331      	adds	r3, #49	; 0x31
 8006ec4:	9a04      	ldr	r2, [sp, #16]
 8006ec6:	7013      	strb	r3, [r2, #0]
 8006ec8:	e776      	b.n	8006db8 <_dtoa_r+0x968>
 8006eca:	4630      	mov	r0, r6
 8006ecc:	e7b9      	b.n	8006e42 <_dtoa_r+0x9f2>
 8006ece:	2201      	movs	r2, #1
 8006ed0:	e7e2      	b.n	8006e98 <_dtoa_r+0xa48>
 8006ed2:	f1b9 0f00 	cmp.w	r9, #0
 8006ed6:	db06      	blt.n	8006ee6 <_dtoa_r+0xa96>
 8006ed8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006eda:	ea41 0909 	orr.w	r9, r1, r9
 8006ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee0:	ea59 0101 	orrs.w	r1, r9, r1
 8006ee4:	d120      	bne.n	8006f28 <_dtoa_r+0xad8>
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	ddec      	ble.n	8006ec4 <_dtoa_r+0xa74>
 8006eea:	4659      	mov	r1, fp
 8006eec:	2201      	movs	r2, #1
 8006eee:	4628      	mov	r0, r5
 8006ef0:	9308      	str	r3, [sp, #32]
 8006ef2:	f000 fbcf 	bl	8007694 <__lshift>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4683      	mov	fp, r0
 8006efa:	f000 fc3b 	bl	8007774 <__mcmp>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	dc02      	bgt.n	8006f0a <_dtoa_r+0xaba>
 8006f04:	d1de      	bne.n	8006ec4 <_dtoa_r+0xa74>
 8006f06:	07da      	lsls	r2, r3, #31
 8006f08:	d5dc      	bpl.n	8006ec4 <_dtoa_r+0xa74>
 8006f0a:	2b39      	cmp	r3, #57	; 0x39
 8006f0c:	d1d8      	bne.n	8006ec0 <_dtoa_r+0xa70>
 8006f0e:	2339      	movs	r3, #57	; 0x39
 8006f10:	9a04      	ldr	r2, [sp, #16]
 8006f12:	7013      	strb	r3, [r2, #0]
 8006f14:	463b      	mov	r3, r7
 8006f16:	461f      	mov	r7, r3
 8006f18:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	2a39      	cmp	r2, #57	; 0x39
 8006f20:	d050      	beq.n	8006fc4 <_dtoa_r+0xb74>
 8006f22:	3201      	adds	r2, #1
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	e747      	b.n	8006db8 <_dtoa_r+0x968>
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	dd03      	ble.n	8006f34 <_dtoa_r+0xae4>
 8006f2c:	2b39      	cmp	r3, #57	; 0x39
 8006f2e:	d0ee      	beq.n	8006f0e <_dtoa_r+0xabe>
 8006f30:	3301      	adds	r3, #1
 8006f32:	e7c7      	b.n	8006ec4 <_dtoa_r+0xa74>
 8006f34:	9a08      	ldr	r2, [sp, #32]
 8006f36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f38:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f3c:	428a      	cmp	r2, r1
 8006f3e:	d02a      	beq.n	8006f96 <_dtoa_r+0xb46>
 8006f40:	4659      	mov	r1, fp
 8006f42:	2300      	movs	r3, #0
 8006f44:	220a      	movs	r2, #10
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 f9f8 	bl	800733c <__multadd>
 8006f4c:	45b0      	cmp	r8, r6
 8006f4e:	4683      	mov	fp, r0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	f04f 020a 	mov.w	r2, #10
 8006f58:	4641      	mov	r1, r8
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	d107      	bne.n	8006f6e <_dtoa_r+0xb1e>
 8006f5e:	f000 f9ed 	bl	800733c <__multadd>
 8006f62:	4680      	mov	r8, r0
 8006f64:	4606      	mov	r6, r0
 8006f66:	9b08      	ldr	r3, [sp, #32]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	9308      	str	r3, [sp, #32]
 8006f6c:	e775      	b.n	8006e5a <_dtoa_r+0xa0a>
 8006f6e:	f000 f9e5 	bl	800733c <__multadd>
 8006f72:	4631      	mov	r1, r6
 8006f74:	4680      	mov	r8, r0
 8006f76:	2300      	movs	r3, #0
 8006f78:	220a      	movs	r2, #10
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 f9de 	bl	800733c <__multadd>
 8006f80:	4606      	mov	r6, r0
 8006f82:	e7f0      	b.n	8006f66 <_dtoa_r+0xb16>
 8006f84:	f1b9 0f00 	cmp.w	r9, #0
 8006f88:	bfcc      	ite	gt
 8006f8a:	464f      	movgt	r7, r9
 8006f8c:	2701      	movle	r7, #1
 8006f8e:	f04f 0800 	mov.w	r8, #0
 8006f92:	9a03      	ldr	r2, [sp, #12]
 8006f94:	4417      	add	r7, r2
 8006f96:	4659      	mov	r1, fp
 8006f98:	2201      	movs	r2, #1
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	9308      	str	r3, [sp, #32]
 8006f9e:	f000 fb79 	bl	8007694 <__lshift>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4683      	mov	fp, r0
 8006fa6:	f000 fbe5 	bl	8007774 <__mcmp>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	dcb2      	bgt.n	8006f14 <_dtoa_r+0xac4>
 8006fae:	d102      	bne.n	8006fb6 <_dtoa_r+0xb66>
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	d4ae      	bmi.n	8006f14 <_dtoa_r+0xac4>
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	461f      	mov	r7, r3
 8006fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fbe:	2a30      	cmp	r2, #48	; 0x30
 8006fc0:	d0fa      	beq.n	8006fb8 <_dtoa_r+0xb68>
 8006fc2:	e6f9      	b.n	8006db8 <_dtoa_r+0x968>
 8006fc4:	9a03      	ldr	r2, [sp, #12]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d1a5      	bne.n	8006f16 <_dtoa_r+0xac6>
 8006fca:	2331      	movs	r3, #49	; 0x31
 8006fcc:	f10a 0a01 	add.w	sl, sl, #1
 8006fd0:	e779      	b.n	8006ec6 <_dtoa_r+0xa76>
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <_dtoa_r+0xbd4>)
 8006fd4:	f7ff baa8 	b.w	8006528 <_dtoa_r+0xd8>
 8006fd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f47f aa81 	bne.w	80064e2 <_dtoa_r+0x92>
 8006fe0:	4b11      	ldr	r3, [pc, #68]	; (8007028 <_dtoa_r+0xbd8>)
 8006fe2:	f7ff baa1 	b.w	8006528 <_dtoa_r+0xd8>
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	dc03      	bgt.n	8006ff4 <_dtoa_r+0xba4>
 8006fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	f73f aecb 	bgt.w	8006d8a <_dtoa_r+0x93a>
 8006ff4:	9f03      	ldr	r7, [sp, #12]
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4658      	mov	r0, fp
 8006ffa:	f7ff f99b 	bl	8006334 <quorem>
 8006ffe:	9a03      	ldr	r2, [sp, #12]
 8007000:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007004:	f807 3b01 	strb.w	r3, [r7], #1
 8007008:	1aba      	subs	r2, r7, r2
 800700a:	4591      	cmp	r9, r2
 800700c:	ddba      	ble.n	8006f84 <_dtoa_r+0xb34>
 800700e:	4659      	mov	r1, fp
 8007010:	2300      	movs	r3, #0
 8007012:	220a      	movs	r2, #10
 8007014:	4628      	mov	r0, r5
 8007016:	f000 f991 	bl	800733c <__multadd>
 800701a:	4683      	mov	fp, r0
 800701c:	e7eb      	b.n	8006ff6 <_dtoa_r+0xba6>
 800701e:	bf00      	nop
 8007020:	080084ac 	.word	0x080084ac
 8007024:	08008308 	.word	0x08008308
 8007028:	0800842d 	.word	0x0800842d

0800702c <std>:
 800702c:	2300      	movs	r3, #0
 800702e:	b510      	push	{r4, lr}
 8007030:	4604      	mov	r4, r0
 8007032:	e9c0 3300 	strd	r3, r3, [r0]
 8007036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800703a:	6083      	str	r3, [r0, #8]
 800703c:	8181      	strh	r1, [r0, #12]
 800703e:	6643      	str	r3, [r0, #100]	; 0x64
 8007040:	81c2      	strh	r2, [r0, #14]
 8007042:	6183      	str	r3, [r0, #24]
 8007044:	4619      	mov	r1, r3
 8007046:	2208      	movs	r2, #8
 8007048:	305c      	adds	r0, #92	; 0x5c
 800704a:	f7fe fb81 	bl	8005750 <memset>
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <std+0x38>)
 8007050:	6224      	str	r4, [r4, #32]
 8007052:	6263      	str	r3, [r4, #36]	; 0x24
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <std+0x3c>)
 8007056:	62a3      	str	r3, [r4, #40]	; 0x28
 8007058:	4b04      	ldr	r3, [pc, #16]	; (800706c <std+0x40>)
 800705a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <std+0x44>)
 800705e:	6323      	str	r3, [r4, #48]	; 0x30
 8007060:	bd10      	pop	{r4, pc}
 8007062:	bf00      	nop
 8007064:	08007c55 	.word	0x08007c55
 8007068:	08007c77 	.word	0x08007c77
 800706c:	08007caf 	.word	0x08007caf
 8007070:	08007cd3 	.word	0x08007cd3

08007074 <_cleanup_r>:
 8007074:	4901      	ldr	r1, [pc, #4]	; (800707c <_cleanup_r+0x8>)
 8007076:	f000 b8af 	b.w	80071d8 <_fwalk_reent>
 800707a:	bf00      	nop
 800707c:	08007fe1 	.word	0x08007fe1

08007080 <__sfmoreglue>:
 8007080:	2268      	movs	r2, #104	; 0x68
 8007082:	b570      	push	{r4, r5, r6, lr}
 8007084:	1e4d      	subs	r5, r1, #1
 8007086:	4355      	muls	r5, r2
 8007088:	460e      	mov	r6, r1
 800708a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800708e:	f7fe fbcf 	bl	8005830 <_malloc_r>
 8007092:	4604      	mov	r4, r0
 8007094:	b140      	cbz	r0, 80070a8 <__sfmoreglue+0x28>
 8007096:	2100      	movs	r1, #0
 8007098:	e9c0 1600 	strd	r1, r6, [r0]
 800709c:	300c      	adds	r0, #12
 800709e:	60a0      	str	r0, [r4, #8]
 80070a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070a4:	f7fe fb54 	bl	8005750 <memset>
 80070a8:	4620      	mov	r0, r4
 80070aa:	bd70      	pop	{r4, r5, r6, pc}

080070ac <__sfp_lock_acquire>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__sfp_lock_acquire+0x8>)
 80070ae:	f000 b8b8 	b.w	8007222 <__retarget_lock_acquire_recursive>
 80070b2:	bf00      	nop
 80070b4:	2000044d 	.word	0x2000044d

080070b8 <__sfp_lock_release>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__sfp_lock_release+0x8>)
 80070ba:	f000 b8b3 	b.w	8007224 <__retarget_lock_release_recursive>
 80070be:	bf00      	nop
 80070c0:	2000044d 	.word	0x2000044d

080070c4 <__sinit_lock_acquire>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__sinit_lock_acquire+0x8>)
 80070c6:	f000 b8ac 	b.w	8007222 <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	2000044e 	.word	0x2000044e

080070d0 <__sinit_lock_release>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__sinit_lock_release+0x8>)
 80070d2:	f000 b8a7 	b.w	8007224 <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	2000044e 	.word	0x2000044e

080070dc <__sinit>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	4604      	mov	r4, r0
 80070e0:	f7ff fff0 	bl	80070c4 <__sinit_lock_acquire>
 80070e4:	69a3      	ldr	r3, [r4, #24]
 80070e6:	b11b      	cbz	r3, 80070f0 <__sinit+0x14>
 80070e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ec:	f7ff bff0 	b.w	80070d0 <__sinit_lock_release>
 80070f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070f4:	6523      	str	r3, [r4, #80]	; 0x50
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <__sinit+0x68>)
 80070f8:	4a13      	ldr	r2, [pc, #76]	; (8007148 <__sinit+0x6c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80070fe:	42a3      	cmp	r3, r4
 8007100:	bf08      	it	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	4620      	mov	r0, r4
 8007106:	bf08      	it	eq
 8007108:	61a3      	streq	r3, [r4, #24]
 800710a:	f000 f81f 	bl	800714c <__sfp>
 800710e:	6060      	str	r0, [r4, #4]
 8007110:	4620      	mov	r0, r4
 8007112:	f000 f81b 	bl	800714c <__sfp>
 8007116:	60a0      	str	r0, [r4, #8]
 8007118:	4620      	mov	r0, r4
 800711a:	f000 f817 	bl	800714c <__sfp>
 800711e:	2200      	movs	r2, #0
 8007120:	2104      	movs	r1, #4
 8007122:	60e0      	str	r0, [r4, #12]
 8007124:	6860      	ldr	r0, [r4, #4]
 8007126:	f7ff ff81 	bl	800702c <std>
 800712a:	2201      	movs	r2, #1
 800712c:	2109      	movs	r1, #9
 800712e:	68a0      	ldr	r0, [r4, #8]
 8007130:	f7ff ff7c 	bl	800702c <std>
 8007134:	2202      	movs	r2, #2
 8007136:	2112      	movs	r1, #18
 8007138:	68e0      	ldr	r0, [r4, #12]
 800713a:	f7ff ff77 	bl	800702c <std>
 800713e:	2301      	movs	r3, #1
 8007140:	61a3      	str	r3, [r4, #24]
 8007142:	e7d1      	b.n	80070e8 <__sinit+0xc>
 8007144:	080082f4 	.word	0x080082f4
 8007148:	08007075 	.word	0x08007075

0800714c <__sfp>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	4607      	mov	r7, r0
 8007150:	f7ff ffac 	bl	80070ac <__sfp_lock_acquire>
 8007154:	4b1e      	ldr	r3, [pc, #120]	; (80071d0 <__sfp+0x84>)
 8007156:	681e      	ldr	r6, [r3, #0]
 8007158:	69b3      	ldr	r3, [r6, #24]
 800715a:	b913      	cbnz	r3, 8007162 <__sfp+0x16>
 800715c:	4630      	mov	r0, r6
 800715e:	f7ff ffbd 	bl	80070dc <__sinit>
 8007162:	3648      	adds	r6, #72	; 0x48
 8007164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007168:	3b01      	subs	r3, #1
 800716a:	d503      	bpl.n	8007174 <__sfp+0x28>
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	b30b      	cbz	r3, 80071b4 <__sfp+0x68>
 8007170:	6836      	ldr	r6, [r6, #0]
 8007172:	e7f7      	b.n	8007164 <__sfp+0x18>
 8007174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007178:	b9d5      	cbnz	r5, 80071b0 <__sfp+0x64>
 800717a:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <__sfp+0x88>)
 800717c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007180:	60e3      	str	r3, [r4, #12]
 8007182:	6665      	str	r5, [r4, #100]	; 0x64
 8007184:	f000 f84c 	bl	8007220 <__retarget_lock_init_recursive>
 8007188:	f7ff ff96 	bl	80070b8 <__sfp_lock_release>
 800718c:	2208      	movs	r2, #8
 800718e:	4629      	mov	r1, r5
 8007190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007198:	6025      	str	r5, [r4, #0]
 800719a:	61a5      	str	r5, [r4, #24]
 800719c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071a0:	f7fe fad6 	bl	8005750 <memset>
 80071a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071ac:	4620      	mov	r0, r4
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b0:	3468      	adds	r4, #104	; 0x68
 80071b2:	e7d9      	b.n	8007168 <__sfp+0x1c>
 80071b4:	2104      	movs	r1, #4
 80071b6:	4638      	mov	r0, r7
 80071b8:	f7ff ff62 	bl	8007080 <__sfmoreglue>
 80071bc:	4604      	mov	r4, r0
 80071be:	6030      	str	r0, [r6, #0]
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d1d5      	bne.n	8007170 <__sfp+0x24>
 80071c4:	f7ff ff78 	bl	80070b8 <__sfp_lock_release>
 80071c8:	230c      	movs	r3, #12
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	e7ee      	b.n	80071ac <__sfp+0x60>
 80071ce:	bf00      	nop
 80071d0:	080082f4 	.word	0x080082f4
 80071d4:	ffff0001 	.word	0xffff0001

080071d8 <_fwalk_reent>:
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	4606      	mov	r6, r0
 80071de:	4688      	mov	r8, r1
 80071e0:	2700      	movs	r7, #0
 80071e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071ea:	f1b9 0901 	subs.w	r9, r9, #1
 80071ee:	d505      	bpl.n	80071fc <_fwalk_reent+0x24>
 80071f0:	6824      	ldr	r4, [r4, #0]
 80071f2:	2c00      	cmp	r4, #0
 80071f4:	d1f7      	bne.n	80071e6 <_fwalk_reent+0xe>
 80071f6:	4638      	mov	r0, r7
 80071f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fc:	89ab      	ldrh	r3, [r5, #12]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d907      	bls.n	8007212 <_fwalk_reent+0x3a>
 8007202:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007206:	3301      	adds	r3, #1
 8007208:	d003      	beq.n	8007212 <_fwalk_reent+0x3a>
 800720a:	4629      	mov	r1, r5
 800720c:	4630      	mov	r0, r6
 800720e:	47c0      	blx	r8
 8007210:	4307      	orrs	r7, r0
 8007212:	3568      	adds	r5, #104	; 0x68
 8007214:	e7e9      	b.n	80071ea <_fwalk_reent+0x12>
	...

08007218 <_localeconv_r>:
 8007218:	4800      	ldr	r0, [pc, #0]	; (800721c <_localeconv_r+0x4>)
 800721a:	4770      	bx	lr
 800721c:	20000160 	.word	0x20000160

08007220 <__retarget_lock_init_recursive>:
 8007220:	4770      	bx	lr

08007222 <__retarget_lock_acquire_recursive>:
 8007222:	4770      	bx	lr

08007224 <__retarget_lock_release_recursive>:
 8007224:	4770      	bx	lr

08007226 <memchr>:
 8007226:	4603      	mov	r3, r0
 8007228:	b510      	push	{r4, lr}
 800722a:	b2c9      	uxtb	r1, r1
 800722c:	4402      	add	r2, r0
 800722e:	4293      	cmp	r3, r2
 8007230:	4618      	mov	r0, r3
 8007232:	d101      	bne.n	8007238 <memchr+0x12>
 8007234:	2000      	movs	r0, #0
 8007236:	e003      	b.n	8007240 <memchr+0x1a>
 8007238:	7804      	ldrb	r4, [r0, #0]
 800723a:	3301      	adds	r3, #1
 800723c:	428c      	cmp	r4, r1
 800723e:	d1f6      	bne.n	800722e <memchr+0x8>
 8007240:	bd10      	pop	{r4, pc}

08007242 <memcpy>:
 8007242:	440a      	add	r2, r1
 8007244:	4291      	cmp	r1, r2
 8007246:	f100 33ff 	add.w	r3, r0, #4294967295
 800724a:	d100      	bne.n	800724e <memcpy+0xc>
 800724c:	4770      	bx	lr
 800724e:	b510      	push	{r4, lr}
 8007250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007254:	4291      	cmp	r1, r2
 8007256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800725a:	d1f9      	bne.n	8007250 <memcpy+0xe>
 800725c:	bd10      	pop	{r4, pc}
	...

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff bfde 	b.w	8007222 <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	2000044c 	.word	0x2000044c

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff bfd9 	b.w	8007224 <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	2000044c 	.word	0x2000044c

08007278 <_Balloc>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	b976      	cbnz	r6, 80072a0 <_Balloc+0x28>
 8007282:	2010      	movs	r0, #16
 8007284:	f7fe fa5c 	bl	8005740 <malloc>
 8007288:	4602      	mov	r2, r0
 800728a:	6260      	str	r0, [r4, #36]	; 0x24
 800728c:	b920      	cbnz	r0, 8007298 <_Balloc+0x20>
 800728e:	2166      	movs	r1, #102	; 0x66
 8007290:	4b17      	ldr	r3, [pc, #92]	; (80072f0 <_Balloc+0x78>)
 8007292:	4818      	ldr	r0, [pc, #96]	; (80072f4 <_Balloc+0x7c>)
 8007294:	f000 fdf4 	bl	8007e80 <__assert_func>
 8007298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800729c:	6006      	str	r6, [r0, #0]
 800729e:	60c6      	str	r6, [r0, #12]
 80072a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072a2:	68f3      	ldr	r3, [r6, #12]
 80072a4:	b183      	cbz	r3, 80072c8 <_Balloc+0x50>
 80072a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072ae:	b9b8      	cbnz	r0, 80072e0 <_Balloc+0x68>
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f605 	lsl.w	r6, r1, r5
 80072b6:	1d72      	adds	r2, r6, #5
 80072b8:	4620      	mov	r0, r4
 80072ba:	0092      	lsls	r2, r2, #2
 80072bc:	f000 fb5e 	bl	800797c <_calloc_r>
 80072c0:	b160      	cbz	r0, 80072dc <_Balloc+0x64>
 80072c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072c6:	e00e      	b.n	80072e6 <_Balloc+0x6e>
 80072c8:	2221      	movs	r2, #33	; 0x21
 80072ca:	2104      	movs	r1, #4
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 fb55 	bl	800797c <_calloc_r>
 80072d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d4:	60f0      	str	r0, [r6, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e4      	bne.n	80072a6 <_Balloc+0x2e>
 80072dc:	2000      	movs	r0, #0
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	6802      	ldr	r2, [r0, #0]
 80072e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072e6:	2300      	movs	r3, #0
 80072e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072ec:	e7f7      	b.n	80072de <_Balloc+0x66>
 80072ee:	bf00      	nop
 80072f0:	0800843a 	.word	0x0800843a
 80072f4:	08008520 	.word	0x08008520

080072f8 <_Bfree>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	b976      	cbnz	r6, 8007320 <_Bfree+0x28>
 8007302:	2010      	movs	r0, #16
 8007304:	f7fe fa1c 	bl	8005740 <malloc>
 8007308:	4602      	mov	r2, r0
 800730a:	6268      	str	r0, [r5, #36]	; 0x24
 800730c:	b920      	cbnz	r0, 8007318 <_Bfree+0x20>
 800730e:	218a      	movs	r1, #138	; 0x8a
 8007310:	4b08      	ldr	r3, [pc, #32]	; (8007334 <_Bfree+0x3c>)
 8007312:	4809      	ldr	r0, [pc, #36]	; (8007338 <_Bfree+0x40>)
 8007314:	f000 fdb4 	bl	8007e80 <__assert_func>
 8007318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800731c:	6006      	str	r6, [r0, #0]
 800731e:	60c6      	str	r6, [r0, #12]
 8007320:	b13c      	cbz	r4, 8007332 <_Bfree+0x3a>
 8007322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007324:	6862      	ldr	r2, [r4, #4]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800732c:	6021      	str	r1, [r4, #0]
 800732e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	0800843a 	.word	0x0800843a
 8007338:	08008520 	.word	0x08008520

0800733c <__multadd>:
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	4607      	mov	r7, r0
 8007342:	460c      	mov	r4, r1
 8007344:	461e      	mov	r6, r3
 8007346:	2000      	movs	r0, #0
 8007348:	690d      	ldr	r5, [r1, #16]
 800734a:	f101 0c14 	add.w	ip, r1, #20
 800734e:	f8dc 3000 	ldr.w	r3, [ip]
 8007352:	3001      	adds	r0, #1
 8007354:	b299      	uxth	r1, r3
 8007356:	fb02 6101 	mla	r1, r2, r1, r6
 800735a:	0c1e      	lsrs	r6, r3, #16
 800735c:	0c0b      	lsrs	r3, r1, #16
 800735e:	fb02 3306 	mla	r3, r2, r6, r3
 8007362:	b289      	uxth	r1, r1
 8007364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007368:	4285      	cmp	r5, r0
 800736a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800736e:	f84c 1b04 	str.w	r1, [ip], #4
 8007372:	dcec      	bgt.n	800734e <__multadd+0x12>
 8007374:	b30e      	cbz	r6, 80073ba <__multadd+0x7e>
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	42ab      	cmp	r3, r5
 800737a:	dc19      	bgt.n	80073b0 <__multadd+0x74>
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	4638      	mov	r0, r7
 8007380:	3101      	adds	r1, #1
 8007382:	f7ff ff79 	bl	8007278 <_Balloc>
 8007386:	4680      	mov	r8, r0
 8007388:	b928      	cbnz	r0, 8007396 <__multadd+0x5a>
 800738a:	4602      	mov	r2, r0
 800738c:	21b5      	movs	r1, #181	; 0xb5
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <__multadd+0x84>)
 8007390:	480c      	ldr	r0, [pc, #48]	; (80073c4 <__multadd+0x88>)
 8007392:	f000 fd75 	bl	8007e80 <__assert_func>
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	f104 010c 	add.w	r1, r4, #12
 800739c:	3202      	adds	r2, #2
 800739e:	0092      	lsls	r2, r2, #2
 80073a0:	300c      	adds	r0, #12
 80073a2:	f7ff ff4e 	bl	8007242 <memcpy>
 80073a6:	4621      	mov	r1, r4
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff ffa5 	bl	80072f8 <_Bfree>
 80073ae:	4644      	mov	r4, r8
 80073b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073b4:	3501      	adds	r5, #1
 80073b6:	615e      	str	r6, [r3, #20]
 80073b8:	6125      	str	r5, [r4, #16]
 80073ba:	4620      	mov	r0, r4
 80073bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c0:	080084ac 	.word	0x080084ac
 80073c4:	08008520 	.word	0x08008520

080073c8 <__hi0bits>:
 80073c8:	0c02      	lsrs	r2, r0, #16
 80073ca:	0412      	lsls	r2, r2, #16
 80073cc:	4603      	mov	r3, r0
 80073ce:	b9ca      	cbnz	r2, 8007404 <__hi0bits+0x3c>
 80073d0:	0403      	lsls	r3, r0, #16
 80073d2:	2010      	movs	r0, #16
 80073d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073d8:	bf04      	itt	eq
 80073da:	021b      	lsleq	r3, r3, #8
 80073dc:	3008      	addeq	r0, #8
 80073de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073e2:	bf04      	itt	eq
 80073e4:	011b      	lsleq	r3, r3, #4
 80073e6:	3004      	addeq	r0, #4
 80073e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073ec:	bf04      	itt	eq
 80073ee:	009b      	lsleq	r3, r3, #2
 80073f0:	3002      	addeq	r0, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	db05      	blt.n	8007402 <__hi0bits+0x3a>
 80073f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80073fa:	f100 0001 	add.w	r0, r0, #1
 80073fe:	bf08      	it	eq
 8007400:	2020      	moveq	r0, #32
 8007402:	4770      	bx	lr
 8007404:	2000      	movs	r0, #0
 8007406:	e7e5      	b.n	80073d4 <__hi0bits+0xc>

08007408 <__lo0bits>:
 8007408:	6803      	ldr	r3, [r0, #0]
 800740a:	4602      	mov	r2, r0
 800740c:	f013 0007 	ands.w	r0, r3, #7
 8007410:	d00b      	beq.n	800742a <__lo0bits+0x22>
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	d421      	bmi.n	800745a <__lo0bits+0x52>
 8007416:	0798      	lsls	r0, r3, #30
 8007418:	bf49      	itett	mi
 800741a:	085b      	lsrmi	r3, r3, #1
 800741c:	089b      	lsrpl	r3, r3, #2
 800741e:	2001      	movmi	r0, #1
 8007420:	6013      	strmi	r3, [r2, #0]
 8007422:	bf5c      	itt	pl
 8007424:	2002      	movpl	r0, #2
 8007426:	6013      	strpl	r3, [r2, #0]
 8007428:	4770      	bx	lr
 800742a:	b299      	uxth	r1, r3
 800742c:	b909      	cbnz	r1, 8007432 <__lo0bits+0x2a>
 800742e:	2010      	movs	r0, #16
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	b2d9      	uxtb	r1, r3
 8007434:	b909      	cbnz	r1, 800743a <__lo0bits+0x32>
 8007436:	3008      	adds	r0, #8
 8007438:	0a1b      	lsrs	r3, r3, #8
 800743a:	0719      	lsls	r1, r3, #28
 800743c:	bf04      	itt	eq
 800743e:	091b      	lsreq	r3, r3, #4
 8007440:	3004      	addeq	r0, #4
 8007442:	0799      	lsls	r1, r3, #30
 8007444:	bf04      	itt	eq
 8007446:	089b      	lsreq	r3, r3, #2
 8007448:	3002      	addeq	r0, #2
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d403      	bmi.n	8007456 <__lo0bits+0x4e>
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	f100 0001 	add.w	r0, r0, #1
 8007454:	d003      	beq.n	800745e <__lo0bits+0x56>
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	4770      	bx	lr
 800745a:	2000      	movs	r0, #0
 800745c:	4770      	bx	lr
 800745e:	2020      	movs	r0, #32
 8007460:	4770      	bx	lr
	...

08007464 <__i2b>:
 8007464:	b510      	push	{r4, lr}
 8007466:	460c      	mov	r4, r1
 8007468:	2101      	movs	r1, #1
 800746a:	f7ff ff05 	bl	8007278 <_Balloc>
 800746e:	4602      	mov	r2, r0
 8007470:	b928      	cbnz	r0, 800747e <__i2b+0x1a>
 8007472:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007476:	4b04      	ldr	r3, [pc, #16]	; (8007488 <__i2b+0x24>)
 8007478:	4804      	ldr	r0, [pc, #16]	; (800748c <__i2b+0x28>)
 800747a:	f000 fd01 	bl	8007e80 <__assert_func>
 800747e:	2301      	movs	r3, #1
 8007480:	6144      	str	r4, [r0, #20]
 8007482:	6103      	str	r3, [r0, #16]
 8007484:	bd10      	pop	{r4, pc}
 8007486:	bf00      	nop
 8007488:	080084ac 	.word	0x080084ac
 800748c:	08008520 	.word	0x08008520

08007490 <__multiply>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	4691      	mov	r9, r2
 8007496:	690a      	ldr	r2, [r1, #16]
 8007498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800749c:	460c      	mov	r4, r1
 800749e:	429a      	cmp	r2, r3
 80074a0:	bfbe      	ittt	lt
 80074a2:	460b      	movlt	r3, r1
 80074a4:	464c      	movlt	r4, r9
 80074a6:	4699      	movlt	r9, r3
 80074a8:	6927      	ldr	r7, [r4, #16]
 80074aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074ae:	68a3      	ldr	r3, [r4, #8]
 80074b0:	6861      	ldr	r1, [r4, #4]
 80074b2:	eb07 060a 	add.w	r6, r7, sl
 80074b6:	42b3      	cmp	r3, r6
 80074b8:	b085      	sub	sp, #20
 80074ba:	bfb8      	it	lt
 80074bc:	3101      	addlt	r1, #1
 80074be:	f7ff fedb 	bl	8007278 <_Balloc>
 80074c2:	b930      	cbnz	r0, 80074d2 <__multiply+0x42>
 80074c4:	4602      	mov	r2, r0
 80074c6:	f240 115d 	movw	r1, #349	; 0x15d
 80074ca:	4b43      	ldr	r3, [pc, #268]	; (80075d8 <__multiply+0x148>)
 80074cc:	4843      	ldr	r0, [pc, #268]	; (80075dc <__multiply+0x14c>)
 80074ce:	f000 fcd7 	bl	8007e80 <__assert_func>
 80074d2:	f100 0514 	add.w	r5, r0, #20
 80074d6:	462b      	mov	r3, r5
 80074d8:	2200      	movs	r2, #0
 80074da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074de:	4543      	cmp	r3, r8
 80074e0:	d321      	bcc.n	8007526 <__multiply+0x96>
 80074e2:	f104 0314 	add.w	r3, r4, #20
 80074e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074ea:	f109 0314 	add.w	r3, r9, #20
 80074ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074f2:	9202      	str	r2, [sp, #8]
 80074f4:	1b3a      	subs	r2, r7, r4
 80074f6:	3a15      	subs	r2, #21
 80074f8:	f022 0203 	bic.w	r2, r2, #3
 80074fc:	3204      	adds	r2, #4
 80074fe:	f104 0115 	add.w	r1, r4, #21
 8007502:	428f      	cmp	r7, r1
 8007504:	bf38      	it	cc
 8007506:	2204      	movcc	r2, #4
 8007508:	9201      	str	r2, [sp, #4]
 800750a:	9a02      	ldr	r2, [sp, #8]
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	429a      	cmp	r2, r3
 8007510:	d80c      	bhi.n	800752c <__multiply+0x9c>
 8007512:	2e00      	cmp	r6, #0
 8007514:	dd03      	ble.n	800751e <__multiply+0x8e>
 8007516:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800751a:	2b00      	cmp	r3, #0
 800751c:	d059      	beq.n	80075d2 <__multiply+0x142>
 800751e:	6106      	str	r6, [r0, #16]
 8007520:	b005      	add	sp, #20
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	f843 2b04 	str.w	r2, [r3], #4
 800752a:	e7d8      	b.n	80074de <__multiply+0x4e>
 800752c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007530:	f1ba 0f00 	cmp.w	sl, #0
 8007534:	d023      	beq.n	800757e <__multiply+0xee>
 8007536:	46a9      	mov	r9, r5
 8007538:	f04f 0c00 	mov.w	ip, #0
 800753c:	f104 0e14 	add.w	lr, r4, #20
 8007540:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007544:	f8d9 1000 	ldr.w	r1, [r9]
 8007548:	fa1f fb82 	uxth.w	fp, r2
 800754c:	b289      	uxth	r1, r1
 800754e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007552:	4461      	add	r1, ip
 8007554:	f8d9 c000 	ldr.w	ip, [r9]
 8007558:	0c12      	lsrs	r2, r2, #16
 800755a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800755e:	fb0a c202 	mla	r2, sl, r2, ip
 8007562:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007566:	b289      	uxth	r1, r1
 8007568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800756c:	4577      	cmp	r7, lr
 800756e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007572:	f849 1b04 	str.w	r1, [r9], #4
 8007576:	d8e3      	bhi.n	8007540 <__multiply+0xb0>
 8007578:	9a01      	ldr	r2, [sp, #4]
 800757a:	f845 c002 	str.w	ip, [r5, r2]
 800757e:	9a03      	ldr	r2, [sp, #12]
 8007580:	3304      	adds	r3, #4
 8007582:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	d020      	beq.n	80075ce <__multiply+0x13e>
 800758c:	46ae      	mov	lr, r5
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	6829      	ldr	r1, [r5, #0]
 8007594:	f104 0c14 	add.w	ip, r4, #20
 8007598:	f8bc b000 	ldrh.w	fp, [ip]
 800759c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075a0:	b289      	uxth	r1, r1
 80075a2:	fb09 220b 	mla	r2, r9, fp, r2
 80075a6:	4492      	add	sl, r2
 80075a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075ac:	f84e 1b04 	str.w	r1, [lr], #4
 80075b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075b4:	f8be 1000 	ldrh.w	r1, [lr]
 80075b8:	0c12      	lsrs	r2, r2, #16
 80075ba:	fb09 1102 	mla	r1, r9, r2, r1
 80075be:	4567      	cmp	r7, ip
 80075c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80075c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075c8:	d8e6      	bhi.n	8007598 <__multiply+0x108>
 80075ca:	9a01      	ldr	r2, [sp, #4]
 80075cc:	50a9      	str	r1, [r5, r2]
 80075ce:	3504      	adds	r5, #4
 80075d0:	e79b      	b.n	800750a <__multiply+0x7a>
 80075d2:	3e01      	subs	r6, #1
 80075d4:	e79d      	b.n	8007512 <__multiply+0x82>
 80075d6:	bf00      	nop
 80075d8:	080084ac 	.word	0x080084ac
 80075dc:	08008520 	.word	0x08008520

080075e0 <__pow5mult>:
 80075e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e4:	4615      	mov	r5, r2
 80075e6:	f012 0203 	ands.w	r2, r2, #3
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	d007      	beq.n	8007600 <__pow5mult+0x20>
 80075f0:	4c25      	ldr	r4, [pc, #148]	; (8007688 <__pow5mult+0xa8>)
 80075f2:	3a01      	subs	r2, #1
 80075f4:	2300      	movs	r3, #0
 80075f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075fa:	f7ff fe9f 	bl	800733c <__multadd>
 80075fe:	4607      	mov	r7, r0
 8007600:	10ad      	asrs	r5, r5, #2
 8007602:	d03d      	beq.n	8007680 <__pow5mult+0xa0>
 8007604:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007606:	b97c      	cbnz	r4, 8007628 <__pow5mult+0x48>
 8007608:	2010      	movs	r0, #16
 800760a:	f7fe f899 	bl	8005740 <malloc>
 800760e:	4602      	mov	r2, r0
 8007610:	6270      	str	r0, [r6, #36]	; 0x24
 8007612:	b928      	cbnz	r0, 8007620 <__pow5mult+0x40>
 8007614:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007618:	4b1c      	ldr	r3, [pc, #112]	; (800768c <__pow5mult+0xac>)
 800761a:	481d      	ldr	r0, [pc, #116]	; (8007690 <__pow5mult+0xb0>)
 800761c:	f000 fc30 	bl	8007e80 <__assert_func>
 8007620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007624:	6004      	str	r4, [r0, #0]
 8007626:	60c4      	str	r4, [r0, #12]
 8007628:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800762c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007630:	b94c      	cbnz	r4, 8007646 <__pow5mult+0x66>
 8007632:	f240 2171 	movw	r1, #625	; 0x271
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ff14 	bl	8007464 <__i2b>
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	f8c8 0008 	str.w	r0, [r8, #8]
 8007644:	6003      	str	r3, [r0, #0]
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	07eb      	lsls	r3, r5, #31
 800764c:	d50a      	bpl.n	8007664 <__pow5mult+0x84>
 800764e:	4639      	mov	r1, r7
 8007650:	4622      	mov	r2, r4
 8007652:	4630      	mov	r0, r6
 8007654:	f7ff ff1c 	bl	8007490 <__multiply>
 8007658:	4680      	mov	r8, r0
 800765a:	4639      	mov	r1, r7
 800765c:	4630      	mov	r0, r6
 800765e:	f7ff fe4b 	bl	80072f8 <_Bfree>
 8007662:	4647      	mov	r7, r8
 8007664:	106d      	asrs	r5, r5, #1
 8007666:	d00b      	beq.n	8007680 <__pow5mult+0xa0>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	b938      	cbnz	r0, 800767c <__pow5mult+0x9c>
 800766c:	4622      	mov	r2, r4
 800766e:	4621      	mov	r1, r4
 8007670:	4630      	mov	r0, r6
 8007672:	f7ff ff0d 	bl	8007490 <__multiply>
 8007676:	6020      	str	r0, [r4, #0]
 8007678:	f8c0 9000 	str.w	r9, [r0]
 800767c:	4604      	mov	r4, r0
 800767e:	e7e4      	b.n	800764a <__pow5mult+0x6a>
 8007680:	4638      	mov	r0, r7
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	bf00      	nop
 8007688:	08008670 	.word	0x08008670
 800768c:	0800843a 	.word	0x0800843a
 8007690:	08008520 	.word	0x08008520

08007694 <__lshift>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	460c      	mov	r4, r1
 800769a:	4607      	mov	r7, r0
 800769c:	4691      	mov	r9, r2
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	6849      	ldr	r1, [r1, #4]
 80076a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076ac:	f108 0601 	add.w	r6, r8, #1
 80076b0:	42b3      	cmp	r3, r6
 80076b2:	db0b      	blt.n	80076cc <__lshift+0x38>
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7ff fddf 	bl	8007278 <_Balloc>
 80076ba:	4605      	mov	r5, r0
 80076bc:	b948      	cbnz	r0, 80076d2 <__lshift+0x3e>
 80076be:	4602      	mov	r2, r0
 80076c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076c4:	4b29      	ldr	r3, [pc, #164]	; (800776c <__lshift+0xd8>)
 80076c6:	482a      	ldr	r0, [pc, #168]	; (8007770 <__lshift+0xdc>)
 80076c8:	f000 fbda 	bl	8007e80 <__assert_func>
 80076cc:	3101      	adds	r1, #1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	e7ee      	b.n	80076b0 <__lshift+0x1c>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f100 0114 	add.w	r1, r0, #20
 80076d8:	f100 0210 	add.w	r2, r0, #16
 80076dc:	4618      	mov	r0, r3
 80076de:	4553      	cmp	r3, sl
 80076e0:	db37      	blt.n	8007752 <__lshift+0xbe>
 80076e2:	6920      	ldr	r0, [r4, #16]
 80076e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076e8:	f104 0314 	add.w	r3, r4, #20
 80076ec:	f019 091f 	ands.w	r9, r9, #31
 80076f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076f8:	d02f      	beq.n	800775a <__lshift+0xc6>
 80076fa:	468a      	mov	sl, r1
 80076fc:	f04f 0c00 	mov.w	ip, #0
 8007700:	f1c9 0e20 	rsb	lr, r9, #32
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	fa02 f209 	lsl.w	r2, r2, r9
 800770a:	ea42 020c 	orr.w	r2, r2, ip
 800770e:	f84a 2b04 	str.w	r2, [sl], #4
 8007712:	f853 2b04 	ldr.w	r2, [r3], #4
 8007716:	4298      	cmp	r0, r3
 8007718:	fa22 fc0e 	lsr.w	ip, r2, lr
 800771c:	d8f2      	bhi.n	8007704 <__lshift+0x70>
 800771e:	1b03      	subs	r3, r0, r4
 8007720:	3b15      	subs	r3, #21
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	3304      	adds	r3, #4
 8007728:	f104 0215 	add.w	r2, r4, #21
 800772c:	4290      	cmp	r0, r2
 800772e:	bf38      	it	cc
 8007730:	2304      	movcc	r3, #4
 8007732:	f841 c003 	str.w	ip, [r1, r3]
 8007736:	f1bc 0f00 	cmp.w	ip, #0
 800773a:	d001      	beq.n	8007740 <__lshift+0xac>
 800773c:	f108 0602 	add.w	r6, r8, #2
 8007740:	3e01      	subs	r6, #1
 8007742:	4638      	mov	r0, r7
 8007744:	4621      	mov	r1, r4
 8007746:	612e      	str	r6, [r5, #16]
 8007748:	f7ff fdd6 	bl	80072f8 <_Bfree>
 800774c:	4628      	mov	r0, r5
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	f842 0f04 	str.w	r0, [r2, #4]!
 8007756:	3301      	adds	r3, #1
 8007758:	e7c1      	b.n	80076de <__lshift+0x4a>
 800775a:	3904      	subs	r1, #4
 800775c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007760:	4298      	cmp	r0, r3
 8007762:	f841 2f04 	str.w	r2, [r1, #4]!
 8007766:	d8f9      	bhi.n	800775c <__lshift+0xc8>
 8007768:	e7ea      	b.n	8007740 <__lshift+0xac>
 800776a:	bf00      	nop
 800776c:	080084ac 	.word	0x080084ac
 8007770:	08008520 	.word	0x08008520

08007774 <__mcmp>:
 8007774:	4603      	mov	r3, r0
 8007776:	690a      	ldr	r2, [r1, #16]
 8007778:	6900      	ldr	r0, [r0, #16]
 800777a:	b530      	push	{r4, r5, lr}
 800777c:	1a80      	subs	r0, r0, r2
 800777e:	d10d      	bne.n	800779c <__mcmp+0x28>
 8007780:	3314      	adds	r3, #20
 8007782:	3114      	adds	r1, #20
 8007784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800778c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007794:	4295      	cmp	r5, r2
 8007796:	d002      	beq.n	800779e <__mcmp+0x2a>
 8007798:	d304      	bcc.n	80077a4 <__mcmp+0x30>
 800779a:	2001      	movs	r0, #1
 800779c:	bd30      	pop	{r4, r5, pc}
 800779e:	42a3      	cmp	r3, r4
 80077a0:	d3f4      	bcc.n	800778c <__mcmp+0x18>
 80077a2:	e7fb      	b.n	800779c <__mcmp+0x28>
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e7f8      	b.n	800779c <__mcmp+0x28>
	...

080077ac <__mdiff>:
 80077ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	460d      	mov	r5, r1
 80077b2:	4607      	mov	r7, r0
 80077b4:	4611      	mov	r1, r2
 80077b6:	4628      	mov	r0, r5
 80077b8:	4614      	mov	r4, r2
 80077ba:	f7ff ffdb 	bl	8007774 <__mcmp>
 80077be:	1e06      	subs	r6, r0, #0
 80077c0:	d111      	bne.n	80077e6 <__mdiff+0x3a>
 80077c2:	4631      	mov	r1, r6
 80077c4:	4638      	mov	r0, r7
 80077c6:	f7ff fd57 	bl	8007278 <_Balloc>
 80077ca:	4602      	mov	r2, r0
 80077cc:	b928      	cbnz	r0, 80077da <__mdiff+0x2e>
 80077ce:	f240 2132 	movw	r1, #562	; 0x232
 80077d2:	4b3a      	ldr	r3, [pc, #232]	; (80078bc <__mdiff+0x110>)
 80077d4:	483a      	ldr	r0, [pc, #232]	; (80078c0 <__mdiff+0x114>)
 80077d6:	f000 fb53 	bl	8007e80 <__assert_func>
 80077da:	2301      	movs	r3, #1
 80077dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077e0:	4610      	mov	r0, r2
 80077e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e6:	bfa4      	itt	ge
 80077e8:	4623      	movge	r3, r4
 80077ea:	462c      	movge	r4, r5
 80077ec:	4638      	mov	r0, r7
 80077ee:	6861      	ldr	r1, [r4, #4]
 80077f0:	bfa6      	itte	ge
 80077f2:	461d      	movge	r5, r3
 80077f4:	2600      	movge	r6, #0
 80077f6:	2601      	movlt	r6, #1
 80077f8:	f7ff fd3e 	bl	8007278 <_Balloc>
 80077fc:	4602      	mov	r2, r0
 80077fe:	b918      	cbnz	r0, 8007808 <__mdiff+0x5c>
 8007800:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007804:	4b2d      	ldr	r3, [pc, #180]	; (80078bc <__mdiff+0x110>)
 8007806:	e7e5      	b.n	80077d4 <__mdiff+0x28>
 8007808:	f102 0814 	add.w	r8, r2, #20
 800780c:	46c2      	mov	sl, r8
 800780e:	f04f 0c00 	mov.w	ip, #0
 8007812:	6927      	ldr	r7, [r4, #16]
 8007814:	60c6      	str	r6, [r0, #12]
 8007816:	692e      	ldr	r6, [r5, #16]
 8007818:	f104 0014 	add.w	r0, r4, #20
 800781c:	f105 0914 	add.w	r9, r5, #20
 8007820:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007828:	3410      	adds	r4, #16
 800782a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800782e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007832:	fa1f f18b 	uxth.w	r1, fp
 8007836:	448c      	add	ip, r1
 8007838:	b299      	uxth	r1, r3
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	ebac 0101 	sub.w	r1, ip, r1
 8007840:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007844:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007848:	b289      	uxth	r1, r1
 800784a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800784e:	454e      	cmp	r6, r9
 8007850:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007854:	f84a 3b04 	str.w	r3, [sl], #4
 8007858:	d8e7      	bhi.n	800782a <__mdiff+0x7e>
 800785a:	1b73      	subs	r3, r6, r5
 800785c:	3b15      	subs	r3, #21
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	3515      	adds	r5, #21
 8007864:	3304      	adds	r3, #4
 8007866:	42ae      	cmp	r6, r5
 8007868:	bf38      	it	cc
 800786a:	2304      	movcc	r3, #4
 800786c:	4418      	add	r0, r3
 800786e:	4443      	add	r3, r8
 8007870:	461e      	mov	r6, r3
 8007872:	4605      	mov	r5, r0
 8007874:	4575      	cmp	r5, lr
 8007876:	d30e      	bcc.n	8007896 <__mdiff+0xea>
 8007878:	f10e 0103 	add.w	r1, lr, #3
 800787c:	1a09      	subs	r1, r1, r0
 800787e:	f021 0103 	bic.w	r1, r1, #3
 8007882:	3803      	subs	r0, #3
 8007884:	4586      	cmp	lr, r0
 8007886:	bf38      	it	cc
 8007888:	2100      	movcc	r1, #0
 800788a:	4419      	add	r1, r3
 800788c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007890:	b18b      	cbz	r3, 80078b6 <__mdiff+0x10a>
 8007892:	6117      	str	r7, [r2, #16]
 8007894:	e7a4      	b.n	80077e0 <__mdiff+0x34>
 8007896:	f855 8b04 	ldr.w	r8, [r5], #4
 800789a:	fa1f f188 	uxth.w	r1, r8
 800789e:	4461      	add	r1, ip
 80078a0:	140c      	asrs	r4, r1, #16
 80078a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078a6:	b289      	uxth	r1, r1
 80078a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80078ac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80078b0:	f846 1b04 	str.w	r1, [r6], #4
 80078b4:	e7de      	b.n	8007874 <__mdiff+0xc8>
 80078b6:	3f01      	subs	r7, #1
 80078b8:	e7e8      	b.n	800788c <__mdiff+0xe0>
 80078ba:	bf00      	nop
 80078bc:	080084ac 	.word	0x080084ac
 80078c0:	08008520 	.word	0x08008520

080078c4 <__d2b>:
 80078c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078c8:	2101      	movs	r1, #1
 80078ca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078ce:	4690      	mov	r8, r2
 80078d0:	461d      	mov	r5, r3
 80078d2:	f7ff fcd1 	bl	8007278 <_Balloc>
 80078d6:	4604      	mov	r4, r0
 80078d8:	b930      	cbnz	r0, 80078e8 <__d2b+0x24>
 80078da:	4602      	mov	r2, r0
 80078dc:	f240 310a 	movw	r1, #778	; 0x30a
 80078e0:	4b24      	ldr	r3, [pc, #144]	; (8007974 <__d2b+0xb0>)
 80078e2:	4825      	ldr	r0, [pc, #148]	; (8007978 <__d2b+0xb4>)
 80078e4:	f000 facc 	bl	8007e80 <__assert_func>
 80078e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078ec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80078f0:	bb2d      	cbnz	r5, 800793e <__d2b+0x7a>
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	f1b8 0300 	subs.w	r3, r8, #0
 80078f8:	d026      	beq.n	8007948 <__d2b+0x84>
 80078fa:	4668      	mov	r0, sp
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f7ff fd83 	bl	8007408 <__lo0bits>
 8007902:	9900      	ldr	r1, [sp, #0]
 8007904:	b1f0      	cbz	r0, 8007944 <__d2b+0x80>
 8007906:	9a01      	ldr	r2, [sp, #4]
 8007908:	f1c0 0320 	rsb	r3, r0, #32
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	430b      	orrs	r3, r1
 8007912:	40c2      	lsrs	r2, r0
 8007914:	6163      	str	r3, [r4, #20]
 8007916:	9201      	str	r2, [sp, #4]
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2102      	movne	r1, #2
 8007920:	2101      	moveq	r1, #1
 8007922:	61a3      	str	r3, [r4, #24]
 8007924:	6121      	str	r1, [r4, #16]
 8007926:	b1c5      	cbz	r5, 800795a <__d2b+0x96>
 8007928:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800792c:	4405      	add	r5, r0
 800792e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007932:	603d      	str	r5, [r7, #0]
 8007934:	6030      	str	r0, [r6, #0]
 8007936:	4620      	mov	r0, r4
 8007938:	b002      	add	sp, #8
 800793a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007942:	e7d6      	b.n	80078f2 <__d2b+0x2e>
 8007944:	6161      	str	r1, [r4, #20]
 8007946:	e7e7      	b.n	8007918 <__d2b+0x54>
 8007948:	a801      	add	r0, sp, #4
 800794a:	f7ff fd5d 	bl	8007408 <__lo0bits>
 800794e:	2101      	movs	r1, #1
 8007950:	9b01      	ldr	r3, [sp, #4]
 8007952:	6121      	str	r1, [r4, #16]
 8007954:	6163      	str	r3, [r4, #20]
 8007956:	3020      	adds	r0, #32
 8007958:	e7e5      	b.n	8007926 <__d2b+0x62>
 800795a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800795e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007962:	6038      	str	r0, [r7, #0]
 8007964:	6918      	ldr	r0, [r3, #16]
 8007966:	f7ff fd2f 	bl	80073c8 <__hi0bits>
 800796a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800796e:	6031      	str	r1, [r6, #0]
 8007970:	e7e1      	b.n	8007936 <__d2b+0x72>
 8007972:	bf00      	nop
 8007974:	080084ac 	.word	0x080084ac
 8007978:	08008520 	.word	0x08008520

0800797c <_calloc_r>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	fba1 5402 	umull	r5, r4, r1, r2
 8007982:	b934      	cbnz	r4, 8007992 <_calloc_r+0x16>
 8007984:	4629      	mov	r1, r5
 8007986:	f7fd ff53 	bl	8005830 <_malloc_r>
 800798a:	4606      	mov	r6, r0
 800798c:	b928      	cbnz	r0, 800799a <_calloc_r+0x1e>
 800798e:	4630      	mov	r0, r6
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	220c      	movs	r2, #12
 8007994:	2600      	movs	r6, #0
 8007996:	6002      	str	r2, [r0, #0]
 8007998:	e7f9      	b.n	800798e <_calloc_r+0x12>
 800799a:	462a      	mov	r2, r5
 800799c:	4621      	mov	r1, r4
 800799e:	f7fd fed7 	bl	8005750 <memset>
 80079a2:	e7f4      	b.n	800798e <_calloc_r+0x12>

080079a4 <__sfputc_r>:
 80079a4:	6893      	ldr	r3, [r2, #8]
 80079a6:	b410      	push	{r4}
 80079a8:	3b01      	subs	r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	6093      	str	r3, [r2, #8]
 80079ae:	da07      	bge.n	80079c0 <__sfputc_r+0x1c>
 80079b0:	6994      	ldr	r4, [r2, #24]
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	db01      	blt.n	80079ba <__sfputc_r+0x16>
 80079b6:	290a      	cmp	r1, #10
 80079b8:	d102      	bne.n	80079c0 <__sfputc_r+0x1c>
 80079ba:	bc10      	pop	{r4}
 80079bc:	f000 b98e 	b.w	8007cdc <__swbuf_r>
 80079c0:	6813      	ldr	r3, [r2, #0]
 80079c2:	1c58      	adds	r0, r3, #1
 80079c4:	6010      	str	r0, [r2, #0]
 80079c6:	7019      	strb	r1, [r3, #0]
 80079c8:	4608      	mov	r0, r1
 80079ca:	bc10      	pop	{r4}
 80079cc:	4770      	bx	lr

080079ce <__sfputs_r>:
 80079ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d0:	4606      	mov	r6, r0
 80079d2:	460f      	mov	r7, r1
 80079d4:	4614      	mov	r4, r2
 80079d6:	18d5      	adds	r5, r2, r3
 80079d8:	42ac      	cmp	r4, r5
 80079da:	d101      	bne.n	80079e0 <__sfputs_r+0x12>
 80079dc:	2000      	movs	r0, #0
 80079de:	e007      	b.n	80079f0 <__sfputs_r+0x22>
 80079e0:	463a      	mov	r2, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e8:	f7ff ffdc 	bl	80079a4 <__sfputc_r>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d1f3      	bne.n	80079d8 <__sfputs_r+0xa>
 80079f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079f4 <_vfiprintf_r>:
 80079f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	460d      	mov	r5, r1
 80079fa:	4614      	mov	r4, r2
 80079fc:	4698      	mov	r8, r3
 80079fe:	4606      	mov	r6, r0
 8007a00:	b09d      	sub	sp, #116	; 0x74
 8007a02:	b118      	cbz	r0, 8007a0c <_vfiprintf_r+0x18>
 8007a04:	6983      	ldr	r3, [r0, #24]
 8007a06:	b90b      	cbnz	r3, 8007a0c <_vfiprintf_r+0x18>
 8007a08:	f7ff fb68 	bl	80070dc <__sinit>
 8007a0c:	4b89      	ldr	r3, [pc, #548]	; (8007c34 <_vfiprintf_r+0x240>)
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	d11b      	bne.n	8007a4a <_vfiprintf_r+0x56>
 8007a12:	6875      	ldr	r5, [r6, #4]
 8007a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a16:	07d9      	lsls	r1, r3, #31
 8007a18:	d405      	bmi.n	8007a26 <_vfiprintf_r+0x32>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	059a      	lsls	r2, r3, #22
 8007a1e:	d402      	bmi.n	8007a26 <_vfiprintf_r+0x32>
 8007a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a22:	f7ff fbfe 	bl	8007222 <__retarget_lock_acquire_recursive>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	071b      	lsls	r3, r3, #28
 8007a2a:	d501      	bpl.n	8007a30 <_vfiprintf_r+0x3c>
 8007a2c:	692b      	ldr	r3, [r5, #16]
 8007a2e:	b9eb      	cbnz	r3, 8007a6c <_vfiprintf_r+0x78>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 f9b6 	bl	8007da4 <__swsetup_r>
 8007a38:	b1c0      	cbz	r0, 8007a6c <_vfiprintf_r+0x78>
 8007a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a3c:	07dc      	lsls	r4, r3, #31
 8007a3e:	d50e      	bpl.n	8007a5e <_vfiprintf_r+0x6a>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	b01d      	add	sp, #116	; 0x74
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <_vfiprintf_r+0x244>)
 8007a4c:	429d      	cmp	r5, r3
 8007a4e:	d101      	bne.n	8007a54 <_vfiprintf_r+0x60>
 8007a50:	68b5      	ldr	r5, [r6, #8]
 8007a52:	e7df      	b.n	8007a14 <_vfiprintf_r+0x20>
 8007a54:	4b79      	ldr	r3, [pc, #484]	; (8007c3c <_vfiprintf_r+0x248>)
 8007a56:	429d      	cmp	r5, r3
 8007a58:	bf08      	it	eq
 8007a5a:	68f5      	ldreq	r5, [r6, #12]
 8007a5c:	e7da      	b.n	8007a14 <_vfiprintf_r+0x20>
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	0598      	lsls	r0, r3, #22
 8007a62:	d4ed      	bmi.n	8007a40 <_vfiprintf_r+0x4c>
 8007a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a66:	f7ff fbdd 	bl	8007224 <__retarget_lock_release_recursive>
 8007a6a:	e7e9      	b.n	8007a40 <_vfiprintf_r+0x4c>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a70:	2320      	movs	r3, #32
 8007a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a76:	2330      	movs	r3, #48	; 0x30
 8007a78:	f04f 0901 	mov.w	r9, #1
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c40 <_vfiprintf_r+0x24c>
 8007a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a88:	4623      	mov	r3, r4
 8007a8a:	469a      	mov	sl, r3
 8007a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a90:	b10a      	cbz	r2, 8007a96 <_vfiprintf_r+0xa2>
 8007a92:	2a25      	cmp	r2, #37	; 0x25
 8007a94:	d1f9      	bne.n	8007a8a <_vfiprintf_r+0x96>
 8007a96:	ebba 0b04 	subs.w	fp, sl, r4
 8007a9a:	d00b      	beq.n	8007ab4 <_vfiprintf_r+0xc0>
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ff93 	bl	80079ce <__sfputs_r>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f000 80aa 	beq.w	8007c02 <_vfiprintf_r+0x20e>
 8007aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab0:	445a      	add	r2, fp
 8007ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80a2 	beq.w	8007c02 <_vfiprintf_r+0x20e>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac8:	f10a 0a01 	add.w	sl, sl, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad6:	4654      	mov	r4, sl
 8007ad8:	2205      	movs	r2, #5
 8007ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ade:	4858      	ldr	r0, [pc, #352]	; (8007c40 <_vfiprintf_r+0x24c>)
 8007ae0:	f7ff fba1 	bl	8007226 <memchr>
 8007ae4:	9a04      	ldr	r2, [sp, #16]
 8007ae6:	b9d8      	cbnz	r0, 8007b20 <_vfiprintf_r+0x12c>
 8007ae8:	06d1      	lsls	r1, r2, #27
 8007aea:	bf44      	itt	mi
 8007aec:	2320      	movmi	r3, #32
 8007aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af2:	0713      	lsls	r3, r2, #28
 8007af4:	bf44      	itt	mi
 8007af6:	232b      	movmi	r3, #43	; 0x2b
 8007af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007afc:	f89a 3000 	ldrb.w	r3, [sl]
 8007b00:	2b2a      	cmp	r3, #42	; 0x2a
 8007b02:	d015      	beq.n	8007b30 <_vfiprintf_r+0x13c>
 8007b04:	4654      	mov	r4, sl
 8007b06:	2000      	movs	r0, #0
 8007b08:	f04f 0c0a 	mov.w	ip, #10
 8007b0c:	9a07      	ldr	r2, [sp, #28]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b14:	3b30      	subs	r3, #48	; 0x30
 8007b16:	2b09      	cmp	r3, #9
 8007b18:	d94e      	bls.n	8007bb8 <_vfiprintf_r+0x1c4>
 8007b1a:	b1b0      	cbz	r0, 8007b4a <_vfiprintf_r+0x156>
 8007b1c:	9207      	str	r2, [sp, #28]
 8007b1e:	e014      	b.n	8007b4a <_vfiprintf_r+0x156>
 8007b20:	eba0 0308 	sub.w	r3, r0, r8
 8007b24:	fa09 f303 	lsl.w	r3, r9, r3
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	46a2      	mov	sl, r4
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	e7d2      	b.n	8007ad6 <_vfiprintf_r+0xe2>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	1d19      	adds	r1, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	9103      	str	r1, [sp, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfbb      	ittet	lt
 8007b3c:	425b      	neglt	r3, r3
 8007b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b42:	9307      	strge	r3, [sp, #28]
 8007b44:	9307      	strlt	r3, [sp, #28]
 8007b46:	bfb8      	it	lt
 8007b48:	9204      	strlt	r2, [sp, #16]
 8007b4a:	7823      	ldrb	r3, [r4, #0]
 8007b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b4e:	d10c      	bne.n	8007b6a <_vfiprintf_r+0x176>
 8007b50:	7863      	ldrb	r3, [r4, #1]
 8007b52:	2b2a      	cmp	r3, #42	; 0x2a
 8007b54:	d135      	bne.n	8007bc2 <_vfiprintf_r+0x1ce>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	3402      	adds	r4, #2
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9203      	str	r2, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfb8      	it	lt
 8007b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007c44 <_vfiprintf_r+0x250>
 8007b6e:	2203      	movs	r2, #3
 8007b70:	4650      	mov	r0, sl
 8007b72:	7821      	ldrb	r1, [r4, #0]
 8007b74:	f7ff fb57 	bl	8007226 <memchr>
 8007b78:	b140      	cbz	r0, 8007b8c <_vfiprintf_r+0x198>
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	eba0 000a 	sub.w	r0, r0, sl
 8007b80:	fa03 f000 	lsl.w	r0, r3, r0
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	3401      	adds	r4, #1
 8007b88:	4303      	orrs	r3, r0
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	2206      	movs	r2, #6
 8007b92:	482d      	ldr	r0, [pc, #180]	; (8007c48 <_vfiprintf_r+0x254>)
 8007b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b98:	f7ff fb45 	bl	8007226 <memchr>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d03f      	beq.n	8007c20 <_vfiprintf_r+0x22c>
 8007ba0:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <_vfiprintf_r+0x258>)
 8007ba2:	bb1b      	cbnz	r3, 8007bec <_vfiprintf_r+0x1f8>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	f023 0307 	bic.w	r3, r3, #7
 8007bac:	3308      	adds	r3, #8
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb2:	443b      	add	r3, r7
 8007bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb6:	e767      	b.n	8007a88 <_vfiprintf_r+0x94>
 8007bb8:	460c      	mov	r4, r1
 8007bba:	2001      	movs	r0, #1
 8007bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc0:	e7a5      	b.n	8007b0e <_vfiprintf_r+0x11a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f04f 0c0a 	mov.w	ip, #10
 8007bc8:	4619      	mov	r1, r3
 8007bca:	3401      	adds	r4, #1
 8007bcc:	9305      	str	r3, [sp, #20]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd4:	3a30      	subs	r2, #48	; 0x30
 8007bd6:	2a09      	cmp	r2, #9
 8007bd8:	d903      	bls.n	8007be2 <_vfiprintf_r+0x1ee>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c5      	beq.n	8007b6a <_vfiprintf_r+0x176>
 8007bde:	9105      	str	r1, [sp, #20]
 8007be0:	e7c3      	b.n	8007b6a <_vfiprintf_r+0x176>
 8007be2:	4604      	mov	r4, r0
 8007be4:	2301      	movs	r3, #1
 8007be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bea:	e7f0      	b.n	8007bce <_vfiprintf_r+0x1da>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4b16      	ldr	r3, [pc, #88]	; (8007c50 <_vfiprintf_r+0x25c>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	f7fd ff2c 	bl	8005a54 <_printf_float>
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	1c78      	adds	r0, r7, #1
 8007c00:	d1d6      	bne.n	8007bb0 <_vfiprintf_r+0x1bc>
 8007c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c04:	07d9      	lsls	r1, r3, #31
 8007c06:	d405      	bmi.n	8007c14 <_vfiprintf_r+0x220>
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	059a      	lsls	r2, r3, #22
 8007c0c:	d402      	bmi.n	8007c14 <_vfiprintf_r+0x220>
 8007c0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c10:	f7ff fb08 	bl	8007224 <__retarget_lock_release_recursive>
 8007c14:	89ab      	ldrh	r3, [r5, #12]
 8007c16:	065b      	lsls	r3, r3, #25
 8007c18:	f53f af12 	bmi.w	8007a40 <_vfiprintf_r+0x4c>
 8007c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c1e:	e711      	b.n	8007a44 <_vfiprintf_r+0x50>
 8007c20:	ab03      	add	r3, sp, #12
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	462a      	mov	r2, r5
 8007c26:	4630      	mov	r0, r6
 8007c28:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <_vfiprintf_r+0x25c>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	f7fe f9ae 	bl	8005f8c <_printf_i>
 8007c30:	e7e4      	b.n	8007bfc <_vfiprintf_r+0x208>
 8007c32:	bf00      	nop
 8007c34:	080084e0 	.word	0x080084e0
 8007c38:	08008500 	.word	0x08008500
 8007c3c:	080084c0 	.word	0x080084c0
 8007c40:	0800867c 	.word	0x0800867c
 8007c44:	08008682 	.word	0x08008682
 8007c48:	08008686 	.word	0x08008686
 8007c4c:	08005a55 	.word	0x08005a55
 8007c50:	080079cf 	.word	0x080079cf

08007c54 <__sread>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	460c      	mov	r4, r1
 8007c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5c:	f000 fa98 	bl	8008190 <_read_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	bfab      	itete	ge
 8007c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c66:	89a3      	ldrhlt	r3, [r4, #12]
 8007c68:	181b      	addge	r3, r3, r0
 8007c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c6e:	bfac      	ite	ge
 8007c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c72:	81a3      	strhlt	r3, [r4, #12]
 8007c74:	bd10      	pop	{r4, pc}

08007c76 <__swrite>:
 8007c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	461f      	mov	r7, r3
 8007c7c:	898b      	ldrh	r3, [r1, #12]
 8007c7e:	4605      	mov	r5, r0
 8007c80:	05db      	lsls	r3, r3, #23
 8007c82:	460c      	mov	r4, r1
 8007c84:	4616      	mov	r6, r2
 8007c86:	d505      	bpl.n	8007c94 <__swrite+0x1e>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c90:	f000 f9f4 	bl	800807c <_lseek_r>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	4632      	mov	r2, r6
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007caa:	f000 b869 	b.w	8007d80 <_write_r>

08007cae <__sseek>:
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb6:	f000 f9e1 	bl	800807c <_lseek_r>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	bf15      	itete	ne
 8007cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cca:	81a3      	strheq	r3, [r4, #12]
 8007ccc:	bf18      	it	ne
 8007cce:	81a3      	strhne	r3, [r4, #12]
 8007cd0:	bd10      	pop	{r4, pc}

08007cd2 <__sclose>:
 8007cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd6:	f000 b8f1 	b.w	8007ebc <_close_r>
	...

08007cdc <__swbuf_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	460e      	mov	r6, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	b118      	cbz	r0, 8007cee <__swbuf_r+0x12>
 8007ce6:	6983      	ldr	r3, [r0, #24]
 8007ce8:	b90b      	cbnz	r3, 8007cee <__swbuf_r+0x12>
 8007cea:	f7ff f9f7 	bl	80070dc <__sinit>
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <__swbuf_r+0x98>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	d12b      	bne.n	8007d4c <__swbuf_r+0x70>
 8007cf4:	686c      	ldr	r4, [r5, #4]
 8007cf6:	69a3      	ldr	r3, [r4, #24]
 8007cf8:	60a3      	str	r3, [r4, #8]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	071a      	lsls	r2, r3, #28
 8007cfe:	d52f      	bpl.n	8007d60 <__swbuf_r+0x84>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	b36b      	cbz	r3, 8007d60 <__swbuf_r+0x84>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	b2f6      	uxtb	r6, r6
 8007d0a:	1ac0      	subs	r0, r0, r3
 8007d0c:	6963      	ldr	r3, [r4, #20]
 8007d0e:	4637      	mov	r7, r6
 8007d10:	4283      	cmp	r3, r0
 8007d12:	dc04      	bgt.n	8007d1e <__swbuf_r+0x42>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f962 	bl	8007fe0 <_fflush_r>
 8007d1c:	bb30      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	3001      	adds	r0, #1
 8007d22:	3b01      	subs	r3, #1
 8007d24:	60a3      	str	r3, [r4, #8]
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	701e      	strb	r6, [r3, #0]
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d004      	beq.n	8007d3e <__swbuf_r+0x62>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	07db      	lsls	r3, r3, #31
 8007d38:	d506      	bpl.n	8007d48 <__swbuf_r+0x6c>
 8007d3a:	2e0a      	cmp	r6, #10
 8007d3c:	d104      	bne.n	8007d48 <__swbuf_r+0x6c>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 f94d 	bl	8007fe0 <_fflush_r>
 8007d46:	b988      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <__swbuf_r+0x9c>)
 8007d4e:	429c      	cmp	r4, r3
 8007d50:	d101      	bne.n	8007d56 <__swbuf_r+0x7a>
 8007d52:	68ac      	ldr	r4, [r5, #8]
 8007d54:	e7cf      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <__swbuf_r+0xa0>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	bf08      	it	eq
 8007d5c:	68ec      	ldreq	r4, [r5, #12]
 8007d5e:	e7ca      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f81e 	bl	8007da4 <__swsetup_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0cb      	beq.n	8007d04 <__swbuf_r+0x28>
 8007d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d70:	e7ea      	b.n	8007d48 <__swbuf_r+0x6c>
 8007d72:	bf00      	nop
 8007d74:	080084e0 	.word	0x080084e0
 8007d78:	08008500 	.word	0x08008500
 8007d7c:	080084c0 	.word	0x080084c0

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4d05      	ldr	r5, [pc, #20]	; (8007da0 <_write_r+0x20>)
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7fa fd66 	bl	8002860 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20000450 	.word	0x20000450

08007da4 <__swsetup_r>:
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <__swsetup_r+0xcc>)
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	681d      	ldr	r5, [r3, #0]
 8007daa:	4606      	mov	r6, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	b125      	cbz	r5, 8007dba <__swsetup_r+0x16>
 8007db0:	69ab      	ldr	r3, [r5, #24]
 8007db2:	b913      	cbnz	r3, 8007dba <__swsetup_r+0x16>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7ff f991 	bl	80070dc <__sinit>
 8007dba:	4b2e      	ldr	r3, [pc, #184]	; (8007e74 <__swsetup_r+0xd0>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d10f      	bne.n	8007de0 <__swsetup_r+0x3c>
 8007dc0:	686c      	ldr	r4, [r5, #4]
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dc8:	0719      	lsls	r1, r3, #28
 8007dca:	d42c      	bmi.n	8007e26 <__swsetup_r+0x82>
 8007dcc:	06dd      	lsls	r5, r3, #27
 8007dce:	d411      	bmi.n	8007df4 <__swsetup_r+0x50>
 8007dd0:	2309      	movs	r3, #9
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e03e      	b.n	8007e5e <__swsetup_r+0xba>
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <__swsetup_r+0xd4>)
 8007de2:	429c      	cmp	r4, r3
 8007de4:	d101      	bne.n	8007dea <__swsetup_r+0x46>
 8007de6:	68ac      	ldr	r4, [r5, #8]
 8007de8:	e7eb      	b.n	8007dc2 <__swsetup_r+0x1e>
 8007dea:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <__swsetup_r+0xd8>)
 8007dec:	429c      	cmp	r4, r3
 8007dee:	bf08      	it	eq
 8007df0:	68ec      	ldreq	r4, [r5, #12]
 8007df2:	e7e6      	b.n	8007dc2 <__swsetup_r+0x1e>
 8007df4:	0758      	lsls	r0, r3, #29
 8007df6:	d512      	bpl.n	8007e1e <__swsetup_r+0x7a>
 8007df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfa:	b141      	cbz	r1, 8007e0e <__swsetup_r+0x6a>
 8007dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e00:	4299      	cmp	r1, r3
 8007e02:	d002      	beq.n	8007e0a <__swsetup_r+0x66>
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7fd fcab 	bl	8005760 <_free_r>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	2300      	movs	r3, #0
 8007e18:	6063      	str	r3, [r4, #4]
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f043 0308 	orr.w	r3, r3, #8
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	b94b      	cbnz	r3, 8007e3e <__swsetup_r+0x9a>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d003      	beq.n	8007e3e <__swsetup_r+0x9a>
 8007e36:	4621      	mov	r1, r4
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f957 	bl	80080ec <__smakebuf_r>
 8007e3e:	89a0      	ldrh	r0, [r4, #12]
 8007e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e44:	f010 0301 	ands.w	r3, r0, #1
 8007e48:	d00a      	beq.n	8007e60 <__swsetup_r+0xbc>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	425b      	negs	r3, r3
 8007e52:	61a3      	str	r3, [r4, #24]
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	b943      	cbnz	r3, 8007e6a <__swsetup_r+0xc6>
 8007e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e5c:	d1ba      	bne.n	8007dd4 <__swsetup_r+0x30>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	0781      	lsls	r1, r0, #30
 8007e62:	bf58      	it	pl
 8007e64:	6963      	ldrpl	r3, [r4, #20]
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	e7f4      	b.n	8007e54 <__swsetup_r+0xb0>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e7f7      	b.n	8007e5e <__swsetup_r+0xba>
 8007e6e:	bf00      	nop
 8007e70:	2000000c 	.word	0x2000000c
 8007e74:	080084e0 	.word	0x080084e0
 8007e78:	08008500 	.word	0x08008500
 8007e7c:	080084c0 	.word	0x080084c0

08007e80 <__assert_func>:
 8007e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e82:	4614      	mov	r4, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <__assert_func+0x2c>)
 8007e88:	4605      	mov	r5, r0
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68d8      	ldr	r0, [r3, #12]
 8007e8e:	b14c      	cbz	r4, 8007ea4 <__assert_func+0x24>
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <__assert_func+0x30>)
 8007e92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e96:	9100      	str	r1, [sp, #0]
 8007e98:	462b      	mov	r3, r5
 8007e9a:	4906      	ldr	r1, [pc, #24]	; (8007eb4 <__assert_func+0x34>)
 8007e9c:	f000 f8dc 	bl	8008058 <fiprintf>
 8007ea0:	f000 f995 	bl	80081ce <abort>
 8007ea4:	4b04      	ldr	r3, [pc, #16]	; (8007eb8 <__assert_func+0x38>)
 8007ea6:	461c      	mov	r4, r3
 8007ea8:	e7f3      	b.n	8007e92 <__assert_func+0x12>
 8007eaa:	bf00      	nop
 8007eac:	2000000c 	.word	0x2000000c
 8007eb0:	0800868d 	.word	0x0800868d
 8007eb4:	0800869a 	.word	0x0800869a
 8007eb8:	080086c8 	.word	0x080086c8

08007ebc <_close_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4d05      	ldr	r5, [pc, #20]	; (8007ed8 <_close_r+0x1c>)
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	602b      	str	r3, [r5, #0]
 8007ec8:	f7fa fce6 	bl	8002898 <_close>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_close_r+0x1a>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_close_r+0x1a>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	20000450 	.word	0x20000450

08007edc <__sflush_r>:
 8007edc:	898a      	ldrh	r2, [r1, #12]
 8007ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	0710      	lsls	r0, r2, #28
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	d457      	bmi.n	8007f98 <__sflush_r+0xbc>
 8007ee8:	684b      	ldr	r3, [r1, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dc04      	bgt.n	8007ef8 <__sflush_r+0x1c>
 8007eee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc01      	bgt.n	8007ef8 <__sflush_r+0x1c>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d0fa      	beq.n	8007ef4 <__sflush_r+0x18>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f04:	682f      	ldr	r7, [r5, #0]
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	d032      	beq.n	8007f70 <__sflush_r+0x94>
 8007f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	075a      	lsls	r2, r3, #29
 8007f10:	d505      	bpl.n	8007f1e <__sflush_r+0x42>
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	1ac0      	subs	r0, r0, r3
 8007f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f18:	b10b      	cbz	r3, 8007f1e <__sflush_r+0x42>
 8007f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1c:	1ac0      	subs	r0, r0, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4602      	mov	r2, r0
 8007f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f24:	4628      	mov	r0, r5
 8007f26:	6a21      	ldr	r1, [r4, #32]
 8007f28:	47b0      	blx	r6
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	d106      	bne.n	8007f3e <__sflush_r+0x62>
 8007f30:	6829      	ldr	r1, [r5, #0]
 8007f32:	291d      	cmp	r1, #29
 8007f34:	d82c      	bhi.n	8007f90 <__sflush_r+0xb4>
 8007f36:	4a29      	ldr	r2, [pc, #164]	; (8007fdc <__sflush_r+0x100>)
 8007f38:	40ca      	lsrs	r2, r1
 8007f3a:	07d6      	lsls	r6, r2, #31
 8007f3c:	d528      	bpl.n	8007f90 <__sflush_r+0xb4>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	6922      	ldr	r2, [r4, #16]
 8007f44:	04d9      	lsls	r1, r3, #19
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	d504      	bpl.n	8007f54 <__sflush_r+0x78>
 8007f4a:	1c42      	adds	r2, r0, #1
 8007f4c:	d101      	bne.n	8007f52 <__sflush_r+0x76>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b903      	cbnz	r3, 8007f54 <__sflush_r+0x78>
 8007f52:	6560      	str	r0, [r4, #84]	; 0x54
 8007f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f56:	602f      	str	r7, [r5, #0]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d0cb      	beq.n	8007ef4 <__sflush_r+0x18>
 8007f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <__sflush_r+0x8e>
 8007f64:	4628      	mov	r0, r5
 8007f66:	f7fd fbfb 	bl	8005760 <_free_r>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f6e:	e7c2      	b.n	8007ef6 <__sflush_r+0x1a>
 8007f70:	6a21      	ldr	r1, [r4, #32]
 8007f72:	2301      	movs	r3, #1
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b0      	blx	r6
 8007f78:	1c41      	adds	r1, r0, #1
 8007f7a:	d1c7      	bne.n	8007f0c <__sflush_r+0x30>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0c4      	beq.n	8007f0c <__sflush_r+0x30>
 8007f82:	2b1d      	cmp	r3, #29
 8007f84:	d001      	beq.n	8007f8a <__sflush_r+0xae>
 8007f86:	2b16      	cmp	r3, #22
 8007f88:	d101      	bne.n	8007f8e <__sflush_r+0xb2>
 8007f8a:	602f      	str	r7, [r5, #0]
 8007f8c:	e7b2      	b.n	8007ef4 <__sflush_r+0x18>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	e7ae      	b.n	8007ef6 <__sflush_r+0x1a>
 8007f98:	690f      	ldr	r7, [r1, #16]
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	d0aa      	beq.n	8007ef4 <__sflush_r+0x18>
 8007f9e:	0793      	lsls	r3, r2, #30
 8007fa0:	bf18      	it	ne
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	680e      	ldr	r6, [r1, #0]
 8007fa6:	bf08      	it	eq
 8007fa8:	694b      	ldreq	r3, [r1, #20]
 8007faa:	1bf6      	subs	r6, r6, r7
 8007fac:	600f      	str	r7, [r1, #0]
 8007fae:	608b      	str	r3, [r1, #8]
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	dd9f      	ble.n	8007ef4 <__sflush_r+0x18>
 8007fb4:	4633      	mov	r3, r6
 8007fb6:	463a      	mov	r2, r7
 8007fb8:	4628      	mov	r0, r5
 8007fba:	6a21      	ldr	r1, [r4, #32]
 8007fbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007fc0:	47e0      	blx	ip
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dc06      	bgt.n	8007fd4 <__sflush_r+0xf8>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	e790      	b.n	8007ef6 <__sflush_r+0x1a>
 8007fd4:	4407      	add	r7, r0
 8007fd6:	1a36      	subs	r6, r6, r0
 8007fd8:	e7ea      	b.n	8007fb0 <__sflush_r+0xd4>
 8007fda:	bf00      	nop
 8007fdc:	20400001 	.word	0x20400001

08007fe0 <_fflush_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	690b      	ldr	r3, [r1, #16]
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	b913      	cbnz	r3, 8007ff0 <_fflush_r+0x10>
 8007fea:	2500      	movs	r5, #0
 8007fec:	4628      	mov	r0, r5
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	b118      	cbz	r0, 8007ffa <_fflush_r+0x1a>
 8007ff2:	6983      	ldr	r3, [r0, #24]
 8007ff4:	b90b      	cbnz	r3, 8007ffa <_fflush_r+0x1a>
 8007ff6:	f7ff f871 	bl	80070dc <__sinit>
 8007ffa:	4b14      	ldr	r3, [pc, #80]	; (800804c <_fflush_r+0x6c>)
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	d11b      	bne.n	8008038 <_fflush_r+0x58>
 8008000:	686c      	ldr	r4, [r5, #4]
 8008002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0ef      	beq.n	8007fea <_fflush_r+0xa>
 800800a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800800c:	07d0      	lsls	r0, r2, #31
 800800e:	d404      	bmi.n	800801a <_fflush_r+0x3a>
 8008010:	0599      	lsls	r1, r3, #22
 8008012:	d402      	bmi.n	800801a <_fflush_r+0x3a>
 8008014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008016:	f7ff f904 	bl	8007222 <__retarget_lock_acquire_recursive>
 800801a:	4628      	mov	r0, r5
 800801c:	4621      	mov	r1, r4
 800801e:	f7ff ff5d 	bl	8007edc <__sflush_r>
 8008022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008024:	4605      	mov	r5, r0
 8008026:	07da      	lsls	r2, r3, #31
 8008028:	d4e0      	bmi.n	8007fec <_fflush_r+0xc>
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	059b      	lsls	r3, r3, #22
 800802e:	d4dd      	bmi.n	8007fec <_fflush_r+0xc>
 8008030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008032:	f7ff f8f7 	bl	8007224 <__retarget_lock_release_recursive>
 8008036:	e7d9      	b.n	8007fec <_fflush_r+0xc>
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <_fflush_r+0x70>)
 800803a:	429c      	cmp	r4, r3
 800803c:	d101      	bne.n	8008042 <_fflush_r+0x62>
 800803e:	68ac      	ldr	r4, [r5, #8]
 8008040:	e7df      	b.n	8008002 <_fflush_r+0x22>
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <_fflush_r+0x74>)
 8008044:	429c      	cmp	r4, r3
 8008046:	bf08      	it	eq
 8008048:	68ec      	ldreq	r4, [r5, #12]
 800804a:	e7da      	b.n	8008002 <_fflush_r+0x22>
 800804c:	080084e0 	.word	0x080084e0
 8008050:	08008500 	.word	0x08008500
 8008054:	080084c0 	.word	0x080084c0

08008058 <fiprintf>:
 8008058:	b40e      	push	{r1, r2, r3}
 800805a:	b503      	push	{r0, r1, lr}
 800805c:	4601      	mov	r1, r0
 800805e:	ab03      	add	r3, sp, #12
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <fiprintf+0x20>)
 8008062:	f853 2b04 	ldr.w	r2, [r3], #4
 8008066:	6800      	ldr	r0, [r0, #0]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	f7ff fcc3 	bl	80079f4 <_vfiprintf_r>
 800806e:	b002      	add	sp, #8
 8008070:	f85d eb04 	ldr.w	lr, [sp], #4
 8008074:	b003      	add	sp, #12
 8008076:	4770      	bx	lr
 8008078:	2000000c 	.word	0x2000000c

0800807c <_lseek_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	2200      	movs	r2, #0
 8008086:	4d05      	ldr	r5, [pc, #20]	; (800809c <_lseek_r+0x20>)
 8008088:	602a      	str	r2, [r5, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f7fa fc28 	bl	80028e0 <_lseek>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_lseek_r+0x1e>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_lseek_r+0x1e>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	20000450 	.word	0x20000450

080080a0 <__swhatbuf_r>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	460e      	mov	r6, r1
 80080a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a8:	4614      	mov	r4, r2
 80080aa:	2900      	cmp	r1, #0
 80080ac:	461d      	mov	r5, r3
 80080ae:	b096      	sub	sp, #88	; 0x58
 80080b0:	da08      	bge.n	80080c4 <__swhatbuf_r+0x24>
 80080b2:	2200      	movs	r2, #0
 80080b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	061a      	lsls	r2, r3, #24
 80080bc:	d410      	bmi.n	80080e0 <__swhatbuf_r+0x40>
 80080be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c2:	e00e      	b.n	80080e2 <__swhatbuf_r+0x42>
 80080c4:	466a      	mov	r2, sp
 80080c6:	f000 f889 	bl	80081dc <_fstat_r>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	dbf1      	blt.n	80080b2 <__swhatbuf_r+0x12>
 80080ce:	9a01      	ldr	r2, [sp, #4]
 80080d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080d8:	425a      	negs	r2, r3
 80080da:	415a      	adcs	r2, r3
 80080dc:	602a      	str	r2, [r5, #0]
 80080de:	e7ee      	b.n	80080be <__swhatbuf_r+0x1e>
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	2000      	movs	r0, #0
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	b016      	add	sp, #88	; 0x58
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080080ec <__smakebuf_r>:
 80080ec:	898b      	ldrh	r3, [r1, #12]
 80080ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080f0:	079d      	lsls	r5, r3, #30
 80080f2:	4606      	mov	r6, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	d507      	bpl.n	8008108 <__smakebuf_r+0x1c>
 80080f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	6123      	str	r3, [r4, #16]
 8008100:	2301      	movs	r3, #1
 8008102:	6163      	str	r3, [r4, #20]
 8008104:	b002      	add	sp, #8
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	466a      	mov	r2, sp
 800810a:	ab01      	add	r3, sp, #4
 800810c:	f7ff ffc8 	bl	80080a0 <__swhatbuf_r>
 8008110:	9900      	ldr	r1, [sp, #0]
 8008112:	4605      	mov	r5, r0
 8008114:	4630      	mov	r0, r6
 8008116:	f7fd fb8b 	bl	8005830 <_malloc_r>
 800811a:	b948      	cbnz	r0, 8008130 <__smakebuf_r+0x44>
 800811c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008120:	059a      	lsls	r2, r3, #22
 8008122:	d4ef      	bmi.n	8008104 <__smakebuf_r+0x18>
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7e3      	b.n	80080f8 <__smakebuf_r+0xc>
 8008130:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <__smakebuf_r+0x7c>)
 8008132:	62b3      	str	r3, [r6, #40]	; 0x28
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	6020      	str	r0, [r4, #0]
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	6120      	str	r0, [r4, #16]
 8008142:	6163      	str	r3, [r4, #20]
 8008144:	9b01      	ldr	r3, [sp, #4]
 8008146:	b15b      	cbz	r3, 8008160 <__smakebuf_r+0x74>
 8008148:	4630      	mov	r0, r6
 800814a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800814e:	f000 f857 	bl	8008200 <_isatty_r>
 8008152:	b128      	cbz	r0, 8008160 <__smakebuf_r+0x74>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	89a0      	ldrh	r0, [r4, #12]
 8008162:	4305      	orrs	r5, r0
 8008164:	81a5      	strh	r5, [r4, #12]
 8008166:	e7cd      	b.n	8008104 <__smakebuf_r+0x18>
 8008168:	08007075 	.word	0x08007075

0800816c <__ascii_mbtowc>:
 800816c:	b082      	sub	sp, #8
 800816e:	b901      	cbnz	r1, 8008172 <__ascii_mbtowc+0x6>
 8008170:	a901      	add	r1, sp, #4
 8008172:	b142      	cbz	r2, 8008186 <__ascii_mbtowc+0x1a>
 8008174:	b14b      	cbz	r3, 800818a <__ascii_mbtowc+0x1e>
 8008176:	7813      	ldrb	r3, [r2, #0]
 8008178:	600b      	str	r3, [r1, #0]
 800817a:	7812      	ldrb	r2, [r2, #0]
 800817c:	1e10      	subs	r0, r2, #0
 800817e:	bf18      	it	ne
 8008180:	2001      	movne	r0, #1
 8008182:	b002      	add	sp, #8
 8008184:	4770      	bx	lr
 8008186:	4610      	mov	r0, r2
 8008188:	e7fb      	b.n	8008182 <__ascii_mbtowc+0x16>
 800818a:	f06f 0001 	mvn.w	r0, #1
 800818e:	e7f8      	b.n	8008182 <__ascii_mbtowc+0x16>

08008190 <_read_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	2200      	movs	r2, #0
 800819a:	4d05      	ldr	r5, [pc, #20]	; (80081b0 <_read_r+0x20>)
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7fa fb41 	bl	8002826 <_read>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_read_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_read_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	20000450 	.word	0x20000450

080081b4 <__ascii_wctomb>:
 80081b4:	4603      	mov	r3, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	b141      	cbz	r1, 80081cc <__ascii_wctomb+0x18>
 80081ba:	2aff      	cmp	r2, #255	; 0xff
 80081bc:	d904      	bls.n	80081c8 <__ascii_wctomb+0x14>
 80081be:	228a      	movs	r2, #138	; 0x8a
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	4770      	bx	lr
 80081c8:	2001      	movs	r0, #1
 80081ca:	700a      	strb	r2, [r1, #0]
 80081cc:	4770      	bx	lr

080081ce <abort>:
 80081ce:	2006      	movs	r0, #6
 80081d0:	b508      	push	{r3, lr}
 80081d2:	f000 f84d 	bl	8008270 <raise>
 80081d6:	2001      	movs	r0, #1
 80081d8:	f7fa fb1b 	bl	8002812 <_exit>

080081dc <_fstat_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	2300      	movs	r3, #0
 80081e0:	4d06      	ldr	r5, [pc, #24]	; (80081fc <_fstat_r+0x20>)
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f7fa fb60 	bl	80028ae <_fstat>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d102      	bne.n	80081f8 <_fstat_r+0x1c>
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	b103      	cbz	r3, 80081f8 <_fstat_r+0x1c>
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	20000450 	.word	0x20000450

08008200 <_isatty_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	2300      	movs	r3, #0
 8008204:	4d05      	ldr	r5, [pc, #20]	; (800821c <_isatty_r+0x1c>)
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa fb5e 	bl	80028cc <_isatty>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_isatty_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_isatty_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000450 	.word	0x20000450

08008220 <_raise_r>:
 8008220:	291f      	cmp	r1, #31
 8008222:	b538      	push	{r3, r4, r5, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	460d      	mov	r5, r1
 8008228:	d904      	bls.n	8008234 <_raise_r+0x14>
 800822a:	2316      	movs	r3, #22
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008236:	b112      	cbz	r2, 800823e <_raise_r+0x1e>
 8008238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800823c:	b94b      	cbnz	r3, 8008252 <_raise_r+0x32>
 800823e:	4620      	mov	r0, r4
 8008240:	f000 f830 	bl	80082a4 <_getpid_r>
 8008244:	462a      	mov	r2, r5
 8008246:	4601      	mov	r1, r0
 8008248:	4620      	mov	r0, r4
 800824a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800824e:	f000 b817 	b.w	8008280 <_kill_r>
 8008252:	2b01      	cmp	r3, #1
 8008254:	d00a      	beq.n	800826c <_raise_r+0x4c>
 8008256:	1c59      	adds	r1, r3, #1
 8008258:	d103      	bne.n	8008262 <_raise_r+0x42>
 800825a:	2316      	movs	r3, #22
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	2001      	movs	r0, #1
 8008260:	e7e7      	b.n	8008232 <_raise_r+0x12>
 8008262:	2400      	movs	r4, #0
 8008264:	4628      	mov	r0, r5
 8008266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800826a:	4798      	blx	r3
 800826c:	2000      	movs	r0, #0
 800826e:	e7e0      	b.n	8008232 <_raise_r+0x12>

08008270 <raise>:
 8008270:	4b02      	ldr	r3, [pc, #8]	; (800827c <raise+0xc>)
 8008272:	4601      	mov	r1, r0
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	f7ff bfd3 	b.w	8008220 <_raise_r>
 800827a:	bf00      	nop
 800827c:	2000000c 	.word	0x2000000c

08008280 <_kill_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	2300      	movs	r3, #0
 8008284:	4d06      	ldr	r5, [pc, #24]	; (80082a0 <_kill_r+0x20>)
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	f7fa fab0 	bl	80027f2 <_kill>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	d102      	bne.n	800829c <_kill_r+0x1c>
 8008296:	682b      	ldr	r3, [r5, #0]
 8008298:	b103      	cbz	r3, 800829c <_kill_r+0x1c>
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	bf00      	nop
 80082a0:	20000450 	.word	0x20000450

080082a4 <_getpid_r>:
 80082a4:	f7fa ba9e 	b.w	80027e4 <_getpid>

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
